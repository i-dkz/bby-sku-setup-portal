"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pdfjs-dist";
exports.ids = ["vendor-chunks/pdfjs-dist"];
exports.modules = {

/***/ "(ssr)/./node_modules/pdfjs-dist/build/pdf.mjs":
/*!***********************************************!*\
  !*** ./node_modules/pdfjs-dist/build/pdf.mjs ***!
  \***********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortException: () => (/* binding */ __webpack_exports__AbortException),\n/* harmony export */   AnnotationEditorLayer: () => (/* binding */ __webpack_exports__AnnotationEditorLayer),\n/* harmony export */   AnnotationEditorParamsType: () => (/* binding */ __webpack_exports__AnnotationEditorParamsType),\n/* harmony export */   AnnotationEditorType: () => (/* binding */ __webpack_exports__AnnotationEditorType),\n/* harmony export */   AnnotationEditorUIManager: () => (/* binding */ __webpack_exports__AnnotationEditorUIManager),\n/* harmony export */   AnnotationLayer: () => (/* binding */ __webpack_exports__AnnotationLayer),\n/* harmony export */   AnnotationMode: () => (/* binding */ __webpack_exports__AnnotationMode),\n/* harmony export */   CMapCompressionType: () => (/* binding */ __webpack_exports__CMapCompressionType),\n/* harmony export */   ColorPicker: () => (/* binding */ __webpack_exports__ColorPicker),\n/* harmony export */   DOMSVGFactory: () => (/* binding */ __webpack_exports__DOMSVGFactory),\n/* harmony export */   DrawLayer: () => (/* binding */ __webpack_exports__DrawLayer),\n/* harmony export */   FeatureTest: () => (/* binding */ __webpack_exports__FeatureTest),\n/* harmony export */   GlobalWorkerOptions: () => (/* binding */ __webpack_exports__GlobalWorkerOptions),\n/* harmony export */   ImageKind: () => (/* binding */ __webpack_exports__ImageKind),\n/* harmony export */   InvalidPDFException: () => (/* binding */ __webpack_exports__InvalidPDFException),\n/* harmony export */   MissingPDFException: () => (/* binding */ __webpack_exports__MissingPDFException),\n/* harmony export */   OPS: () => (/* binding */ __webpack_exports__OPS),\n/* harmony export */   Outliner: () => (/* binding */ __webpack_exports__Outliner),\n/* harmony export */   PDFDataRangeTransport: () => (/* binding */ __webpack_exports__PDFDataRangeTransport),\n/* harmony export */   PDFDateString: () => (/* binding */ __webpack_exports__PDFDateString),\n/* harmony export */   PDFWorker: () => (/* binding */ __webpack_exports__PDFWorker),\n/* harmony export */   PasswordResponses: () => (/* binding */ __webpack_exports__PasswordResponses),\n/* harmony export */   PermissionFlag: () => (/* binding */ __webpack_exports__PermissionFlag),\n/* harmony export */   PixelsPerInch: () => (/* binding */ __webpack_exports__PixelsPerInch),\n/* harmony export */   PromiseCapability: () => (/* binding */ __webpack_exports__PromiseCapability),\n/* harmony export */   RenderingCancelledException: () => (/* binding */ __webpack_exports__RenderingCancelledException),\n/* harmony export */   UnexpectedResponseException: () => (/* binding */ __webpack_exports__UnexpectedResponseException),\n/* harmony export */   Util: () => (/* binding */ __webpack_exports__Util),\n/* harmony export */   VerbosityLevel: () => (/* binding */ __webpack_exports__VerbosityLevel),\n/* harmony export */   XfaLayer: () => (/* binding */ __webpack_exports__XfaLayer),\n/* harmony export */   build: () => (/* binding */ __webpack_exports__build),\n/* harmony export */   createValidAbsoluteUrl: () => (/* binding */ __webpack_exports__createValidAbsoluteUrl),\n/* harmony export */   fetchData: () => (/* binding */ __webpack_exports__fetchData),\n/* harmony export */   getDocument: () => (/* binding */ __webpack_exports__getDocument),\n/* harmony export */   getFilenameFromUrl: () => (/* binding */ __webpack_exports__getFilenameFromUrl),\n/* harmony export */   getPdfFilenameFromUrl: () => (/* binding */ __webpack_exports__getPdfFilenameFromUrl),\n/* harmony export */   getXfaPageViewport: () => (/* binding */ __webpack_exports__getXfaPageViewport),\n/* harmony export */   isDataScheme: () => (/* binding */ __webpack_exports__isDataScheme),\n/* harmony export */   isPdfFile: () => (/* binding */ __webpack_exports__isPdfFile),\n/* harmony export */   noContextMenu: () => (/* binding */ __webpack_exports__noContextMenu),\n/* harmony export */   normalizeUnicode: () => (/* binding */ __webpack_exports__normalizeUnicode),\n/* harmony export */   renderTextLayer: () => (/* binding */ __webpack_exports__renderTextLayer),\n/* harmony export */   setLayerDimensions: () => (/* binding */ __webpack_exports__setLayerDimensions),\n/* harmony export */   shadow: () => (/* binding */ __webpack_exports__shadow),\n/* harmony export */   updateTextLayer: () => (/* binding */ __webpack_exports__updateTextLayer),\n/* harmony export */   version: () => (/* binding */ __webpack_exports__version)\n/* harmony export */ });\n/**\n * @licstart The following is the entire license notice for the\n * JavaScript code in this page\n *\n * Copyright 2023 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * JavaScript code in this page\n */ /******/ var __webpack_modules__ = {\n    /***/ 640: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_912__)=>{\n        // EXPORTS\n        __nested_webpack_require_912__.d(__nested_webpack_exports__, {\n            AnnotationLayer: ()=>/* binding */ AnnotationLayer,\n            FreeTextAnnotationElement: ()=>/* binding */ FreeTextAnnotationElement,\n            InkAnnotationElement: ()=>/* binding */ InkAnnotationElement,\n            StampAnnotationElement: ()=>/* binding */ StampAnnotationElement\n        });\n        // EXTERNAL MODULE: ./src/shared/util.js\n        var util = __nested_webpack_require_912__(266);\n        // EXTERNAL MODULE: ./src/display/display_utils.js\n        var display_utils = __nested_webpack_require_912__(473);\n        // EXTERNAL MODULE: ./src/display/annotation_storage.js\n        var annotation_storage = __nested_webpack_require_912__(780);\n        ; // CONCATENATED MODULE: ./src/shared/scripting_utils.js\n        function makeColorComp(n) {\n            return Math.floor(Math.max(0, Math.min(1, n)) * 255).toString(16).padStart(2, \"0\");\n        }\n        function scaleAndClamp(x) {\n            return Math.max(0, Math.min(255, 255 * x));\n        }\n        class ColorConverters {\n            static CMYK_G([c, y, m, k]) {\n                return [\n                    \"G\",\n                    1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)\n                ];\n            }\n            static G_CMYK([g]) {\n                return [\n                    \"CMYK\",\n                    0,\n                    0,\n                    0,\n                    1 - g\n                ];\n            }\n            static G_RGB([g]) {\n                return [\n                    \"RGB\",\n                    g,\n                    g,\n                    g\n                ];\n            }\n            static G_rgb([g]) {\n                g = scaleAndClamp(g);\n                return [\n                    g,\n                    g,\n                    g\n                ];\n            }\n            static G_HTML([g]) {\n                const G = makeColorComp(g);\n                return `#${G}${G}${G}`;\n            }\n            static RGB_G([r, g, b]) {\n                return [\n                    \"G\",\n                    0.3 * r + 0.59 * g + 0.11 * b\n                ];\n            }\n            static RGB_rgb(color) {\n                return color.map(scaleAndClamp);\n            }\n            static RGB_HTML(color) {\n                return `#${color.map(makeColorComp).join(\"\")}`;\n            }\n            static T_HTML() {\n                return \"#00000000\";\n            }\n            static T_rgb() {\n                return [\n                    null\n                ];\n            }\n            static CMYK_RGB([c, y, m, k]) {\n                return [\n                    \"RGB\",\n                    1 - Math.min(1, c + k),\n                    1 - Math.min(1, m + k),\n                    1 - Math.min(1, y + k)\n                ];\n            }\n            static CMYK_rgb([c, y, m, k]) {\n                return [\n                    scaleAndClamp(1 - Math.min(1, c + k)),\n                    scaleAndClamp(1 - Math.min(1, m + k)),\n                    scaleAndClamp(1 - Math.min(1, y + k))\n                ];\n            }\n            static CMYK_HTML(components) {\n                const rgb = this.CMYK_RGB(components).slice(1);\n                return this.RGB_HTML(rgb);\n            }\n            static RGB_CMYK([r, g, b]) {\n                const c = 1 - r;\n                const m = 1 - g;\n                const y = 1 - b;\n                const k = Math.min(c, m, y);\n                return [\n                    \"CMYK\",\n                    c,\n                    m,\n                    y,\n                    k\n                ];\n            }\n        }\n        // EXTERNAL MODULE: ./src/display/xfa_layer.js\n        var xfa_layer = __nested_webpack_require_912__(160);\n        ; // CONCATENATED MODULE: ./src/display/annotation_layer.js\n        const DEFAULT_TAB_INDEX = 1000;\n        const DEFAULT_FONT_SIZE = 9;\n        const GetElementsByNameSet = new WeakSet();\n        function getRectDims(rect) {\n            return {\n                width: rect[2] - rect[0],\n                height: rect[3] - rect[1]\n            };\n        }\n        class AnnotationElementFactory {\n            static create(parameters) {\n                const subtype = parameters.data.annotationType;\n                switch(subtype){\n                    case util.AnnotationType.LINK:\n                        return new LinkAnnotationElement(parameters);\n                    case util.AnnotationType.TEXT:\n                        return new TextAnnotationElement(parameters);\n                    case util.AnnotationType.WIDGET:\n                        const fieldType = parameters.data.fieldType;\n                        switch(fieldType){\n                            case \"Tx\":\n                                return new TextWidgetAnnotationElement(parameters);\n                            case \"Btn\":\n                                if (parameters.data.radioButton) {\n                                    return new RadioButtonWidgetAnnotationElement(parameters);\n                                } else if (parameters.data.checkBox) {\n                                    return new CheckboxWidgetAnnotationElement(parameters);\n                                }\n                                return new PushButtonWidgetAnnotationElement(parameters);\n                            case \"Ch\":\n                                return new ChoiceWidgetAnnotationElement(parameters);\n                            case \"Sig\":\n                                return new SignatureWidgetAnnotationElement(parameters);\n                        }\n                        return new WidgetAnnotationElement(parameters);\n                    case util.AnnotationType.POPUP:\n                        return new PopupAnnotationElement(parameters);\n                    case util.AnnotationType.FREETEXT:\n                        return new FreeTextAnnotationElement(parameters);\n                    case util.AnnotationType.LINE:\n                        return new LineAnnotationElement(parameters);\n                    case util.AnnotationType.SQUARE:\n                        return new SquareAnnotationElement(parameters);\n                    case util.AnnotationType.CIRCLE:\n                        return new CircleAnnotationElement(parameters);\n                    case util.AnnotationType.POLYLINE:\n                        return new PolylineAnnotationElement(parameters);\n                    case util.AnnotationType.CARET:\n                        return new CaretAnnotationElement(parameters);\n                    case util.AnnotationType.INK:\n                        return new InkAnnotationElement(parameters);\n                    case util.AnnotationType.POLYGON:\n                        return new PolygonAnnotationElement(parameters);\n                    case util.AnnotationType.HIGHLIGHT:\n                        return new HighlightAnnotationElement(parameters);\n                    case util.AnnotationType.UNDERLINE:\n                        return new UnderlineAnnotationElement(parameters);\n                    case util.AnnotationType.SQUIGGLY:\n                        return new SquigglyAnnotationElement(parameters);\n                    case util.AnnotationType.STRIKEOUT:\n                        return new StrikeOutAnnotationElement(parameters);\n                    case util.AnnotationType.STAMP:\n                        return new StampAnnotationElement(parameters);\n                    case util.AnnotationType.FILEATTACHMENT:\n                        return new FileAttachmentAnnotationElement(parameters);\n                    default:\n                        return new AnnotationElement(parameters);\n                }\n            }\n        }\n        class AnnotationElement {\n            #hasBorder;\n            constructor(parameters, { isRenderable = false, ignoreBorder = false, createQuadrilaterals = false } = {}){\n                this.#hasBorder = false;\n                this.isRenderable = isRenderable;\n                this.data = parameters.data;\n                this.layer = parameters.layer;\n                this.linkService = parameters.linkService;\n                this.downloadManager = parameters.downloadManager;\n                this.imageResourcesPath = parameters.imageResourcesPath;\n                this.renderForms = parameters.renderForms;\n                this.svgFactory = parameters.svgFactory;\n                this.annotationStorage = parameters.annotationStorage;\n                this.enableScripting = parameters.enableScripting;\n                this.hasJSActions = parameters.hasJSActions;\n                this._fieldObjects = parameters.fieldObjects;\n                this.parent = parameters.parent;\n                if (isRenderable) {\n                    this.container = this._createContainer(ignoreBorder);\n                }\n                if (createQuadrilaterals) {\n                    this._createQuadrilaterals();\n                }\n            }\n            static _hasPopupData({ titleObj, contentsObj, richText }) {\n                return !!(titleObj?.str || contentsObj?.str || richText?.str);\n            }\n            get hasPopupData() {\n                return AnnotationElement._hasPopupData(this.data);\n            }\n            _createContainer(ignoreBorder) {\n                const { data, parent: { page, viewport } } = this;\n                const container = document.createElement(\"section\");\n                container.setAttribute(\"data-annotation-id\", data.id);\n                if (!(this instanceof WidgetAnnotationElement)) {\n                    container.tabIndex = DEFAULT_TAB_INDEX;\n                }\n                container.style.zIndex = this.parent.zIndex++;\n                if (this.data.popupRef) {\n                    container.setAttribute(\"aria-haspopup\", \"dialog\");\n                }\n                if (data.noRotate) {\n                    container.classList.add(\"norotate\");\n                }\n                const { pageWidth, pageHeight, pageX, pageY } = viewport.rawDims;\n                if (!data.rect || this instanceof PopupAnnotationElement) {\n                    const { rotation } = data;\n                    if (!data.hasOwnCanvas && rotation !== 0) {\n                        this.setRotation(rotation, container);\n                    }\n                    return container;\n                }\n                const { width, height } = getRectDims(data.rect);\n                const rect = util.Util.normalizeRect([\n                    data.rect[0],\n                    page.view[3] - data.rect[1] + page.view[1],\n                    data.rect[2],\n                    page.view[3] - data.rect[3] + page.view[1]\n                ]);\n                if (!ignoreBorder && data.borderStyle.width > 0) {\n                    container.style.borderWidth = `${data.borderStyle.width}px`;\n                    const horizontalRadius = data.borderStyle.horizontalCornerRadius;\n                    const verticalRadius = data.borderStyle.verticalCornerRadius;\n                    if (horizontalRadius > 0 || verticalRadius > 0) {\n                        const radius = `calc(${horizontalRadius}px * var(--scale-factor)) / calc(${verticalRadius}px * var(--scale-factor))`;\n                        container.style.borderRadius = radius;\n                    } else if (this instanceof RadioButtonWidgetAnnotationElement) {\n                        const radius = `calc(${width}px * var(--scale-factor)) / calc(${height}px * var(--scale-factor))`;\n                        container.style.borderRadius = radius;\n                    }\n                    switch(data.borderStyle.style){\n                        case util.AnnotationBorderStyleType.SOLID:\n                            container.style.borderStyle = \"solid\";\n                            break;\n                        case util.AnnotationBorderStyleType.DASHED:\n                            container.style.borderStyle = \"dashed\";\n                            break;\n                        case util.AnnotationBorderStyleType.BEVELED:\n                            (0, util.warn)(\"Unimplemented border style: beveled\");\n                            break;\n                        case util.AnnotationBorderStyleType.INSET:\n                            (0, util.warn)(\"Unimplemented border style: inset\");\n                            break;\n                        case util.AnnotationBorderStyleType.UNDERLINE:\n                            container.style.borderBottomStyle = \"solid\";\n                            break;\n                        default:\n                            break;\n                    }\n                    const borderColor = data.borderColor || null;\n                    if (borderColor) {\n                        this.#hasBorder = true;\n                        container.style.borderColor = util.Util.makeHexColor(borderColor[0] | 0, borderColor[1] | 0, borderColor[2] | 0);\n                    } else {\n                        container.style.borderWidth = 0;\n                    }\n                }\n                container.style.left = `${100 * (rect[0] - pageX) / pageWidth}%`;\n                container.style.top = `${100 * (rect[1] - pageY) / pageHeight}%`;\n                const { rotation } = data;\n                if (data.hasOwnCanvas || rotation === 0) {\n                    container.style.width = `${100 * width / pageWidth}%`;\n                    container.style.height = `${100 * height / pageHeight}%`;\n                } else {\n                    this.setRotation(rotation, container);\n                }\n                return container;\n            }\n            setRotation(angle, container = this.container) {\n                if (!this.data.rect) {\n                    return;\n                }\n                const { pageWidth, pageHeight } = this.parent.viewport.rawDims;\n                const { width, height } = getRectDims(this.data.rect);\n                let elementWidth, elementHeight;\n                if (angle % 180 === 0) {\n                    elementWidth = 100 * width / pageWidth;\n                    elementHeight = 100 * height / pageHeight;\n                } else {\n                    elementWidth = 100 * height / pageWidth;\n                    elementHeight = 100 * width / pageHeight;\n                }\n                container.style.width = `${elementWidth}%`;\n                container.style.height = `${elementHeight}%`;\n                container.setAttribute(\"data-main-rotation\", (360 - angle) % 360);\n            }\n            get _commonActions() {\n                const setColor = (jsName, styleName, event)=>{\n                    const color = event.detail[jsName];\n                    const colorType = color[0];\n                    const colorArray = color.slice(1);\n                    event.target.style[styleName] = ColorConverters[`${colorType}_HTML`](colorArray);\n                    this.annotationStorage.setValue(this.data.id, {\n                        [styleName]: ColorConverters[`${colorType}_rgb`](colorArray)\n                    });\n                };\n                return (0, util.shadow)(this, \"_commonActions\", {\n                    display: (event)=>{\n                        const { display } = event.detail;\n                        const hidden = display % 2 === 1;\n                        this.container.style.visibility = hidden ? \"hidden\" : \"visible\";\n                        this.annotationStorage.setValue(this.data.id, {\n                            noView: hidden,\n                            noPrint: display === 1 || display === 2\n                        });\n                    },\n                    print: (event)=>{\n                        this.annotationStorage.setValue(this.data.id, {\n                            noPrint: !event.detail.print\n                        });\n                    },\n                    hidden: (event)=>{\n                        const { hidden } = event.detail;\n                        this.container.style.visibility = hidden ? \"hidden\" : \"visible\";\n                        this.annotationStorage.setValue(this.data.id, {\n                            noPrint: hidden,\n                            noView: hidden\n                        });\n                    },\n                    focus: (event)=>{\n                        setTimeout(()=>event.target.focus({\n                                preventScroll: false\n                            }), 0);\n                    },\n                    userName: (event)=>{\n                        event.target.title = event.detail.userName;\n                    },\n                    readonly: (event)=>{\n                        event.target.disabled = event.detail.readonly;\n                    },\n                    required: (event)=>{\n                        this._setRequired(event.target, event.detail.required);\n                    },\n                    bgColor: (event)=>{\n                        setColor(\"bgColor\", \"backgroundColor\", event);\n                    },\n                    fillColor: (event)=>{\n                        setColor(\"fillColor\", \"backgroundColor\", event);\n                    },\n                    fgColor: (event)=>{\n                        setColor(\"fgColor\", \"color\", event);\n                    },\n                    textColor: (event)=>{\n                        setColor(\"textColor\", \"color\", event);\n                    },\n                    borderColor: (event)=>{\n                        setColor(\"borderColor\", \"borderColor\", event);\n                    },\n                    strokeColor: (event)=>{\n                        setColor(\"strokeColor\", \"borderColor\", event);\n                    },\n                    rotation: (event)=>{\n                        const angle = event.detail.rotation;\n                        this.setRotation(angle);\n                        this.annotationStorage.setValue(this.data.id, {\n                            rotation: angle\n                        });\n                    }\n                });\n            }\n            _dispatchEventFromSandbox(actions, jsEvent) {\n                const commonActions = this._commonActions;\n                for (const name of Object.keys(jsEvent.detail)){\n                    const action = actions[name] || commonActions[name];\n                    action?.(jsEvent);\n                }\n            }\n            _setDefaultPropertiesFromJS(element) {\n                if (!this.enableScripting) {\n                    return;\n                }\n                const storedData = this.annotationStorage.getRawValue(this.data.id);\n                if (!storedData) {\n                    return;\n                }\n                const commonActions = this._commonActions;\n                for (const [actionName, detail] of Object.entries(storedData)){\n                    const action = commonActions[actionName];\n                    if (action) {\n                        const eventProxy = {\n                            detail: {\n                                [actionName]: detail\n                            },\n                            target: element\n                        };\n                        action(eventProxy);\n                        delete storedData[actionName];\n                    }\n                }\n            }\n            _createQuadrilaterals() {\n                if (!this.container) {\n                    return;\n                }\n                const { quadPoints } = this.data;\n                if (!quadPoints) {\n                    return;\n                }\n                const [rectBlX, rectBlY, rectTrX, rectTrY] = this.data.rect;\n                if (quadPoints.length === 1) {\n                    const [, { x: trX, y: trY }, { x: blX, y: blY }] = quadPoints[0];\n                    if (rectTrX === trX && rectTrY === trY && rectBlX === blX && rectBlY === blY) {\n                        return;\n                    }\n                }\n                const { style } = this.container;\n                let svgBuffer;\n                if (this.#hasBorder) {\n                    const { borderColor, borderWidth } = style;\n                    style.borderWidth = 0;\n                    svgBuffer = [\n                        \"url('data:image/svg+xml;utf8,\",\n                        `<svg xmlns=\"http://www.w3.org/2000/svg\"`,\n                        ` preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\">`,\n                        `<g fill=\"transparent\" stroke=\"${borderColor}\" stroke-width=\"${borderWidth}\">`\n                    ];\n                    this.container.classList.add(\"hasBorder\");\n                }\n                const width = rectTrX - rectBlX;\n                const height = rectTrY - rectBlY;\n                const { svgFactory } = this;\n                const svg = svgFactory.createElement(\"svg\");\n                svg.classList.add(\"quadrilateralsContainer\");\n                svg.setAttribute(\"width\", 0);\n                svg.setAttribute(\"height\", 0);\n                const defs = svgFactory.createElement(\"defs\");\n                svg.append(defs);\n                const clipPath = svgFactory.createElement(\"clipPath\");\n                const id = `clippath_${this.data.id}`;\n                clipPath.setAttribute(\"id\", id);\n                clipPath.setAttribute(\"clipPathUnits\", \"objectBoundingBox\");\n                defs.append(clipPath);\n                for (const [, { x: trX, y: trY }, { x: blX, y: blY }] of quadPoints){\n                    const rect = svgFactory.createElement(\"rect\");\n                    const x = (blX - rectBlX) / width;\n                    const y = (rectTrY - trY) / height;\n                    const rectWidth = (trX - blX) / width;\n                    const rectHeight = (trY - blY) / height;\n                    rect.setAttribute(\"x\", x);\n                    rect.setAttribute(\"y\", y);\n                    rect.setAttribute(\"width\", rectWidth);\n                    rect.setAttribute(\"height\", rectHeight);\n                    clipPath.append(rect);\n                    svgBuffer?.push(`<rect vector-effect=\"non-scaling-stroke\" x=\"${x}\" y=\"${y}\" width=\"${rectWidth}\" height=\"${rectHeight}\"/>`);\n                }\n                if (this.#hasBorder) {\n                    svgBuffer.push(`</g></svg>')`);\n                    style.backgroundImage = svgBuffer.join(\"\");\n                }\n                this.container.append(svg);\n                this.container.style.clipPath = `url(#${id})`;\n            }\n            _createPopup() {\n                const { container, data } = this;\n                container.setAttribute(\"aria-haspopup\", \"dialog\");\n                const popup = new PopupAnnotationElement({\n                    data: {\n                        color: data.color,\n                        titleObj: data.titleObj,\n                        modificationDate: data.modificationDate,\n                        contentsObj: data.contentsObj,\n                        richText: data.richText,\n                        parentRect: data.rect,\n                        borderStyle: 0,\n                        id: `popup_${data.id}`,\n                        rotation: data.rotation\n                    },\n                    parent: this.parent,\n                    elements: [\n                        this\n                    ]\n                });\n                this.parent.div.append(popup.render());\n            }\n            render() {\n                (0, util.unreachable)(\"Abstract method `AnnotationElement.render` called\");\n            }\n            _getElementsByName(name, skipId = null) {\n                const fields = [];\n                if (this._fieldObjects) {\n                    const fieldObj = this._fieldObjects[name];\n                    if (fieldObj) {\n                        for (const { page, id, exportValues } of fieldObj){\n                            if (page === -1) {\n                                continue;\n                            }\n                            if (id === skipId) {\n                                continue;\n                            }\n                            const exportValue = typeof exportValues === \"string\" ? exportValues : null;\n                            const domElement = document.querySelector(`[data-element-id=\"${id}\"]`);\n                            if (domElement && !GetElementsByNameSet.has(domElement)) {\n                                (0, util.warn)(`_getElementsByName - element not allowed: ${id}`);\n                                continue;\n                            }\n                            fields.push({\n                                id,\n                                exportValue,\n                                domElement\n                            });\n                        }\n                    }\n                    return fields;\n                }\n                for (const domElement of document.getElementsByName(name)){\n                    const { exportValue } = domElement;\n                    const id = domElement.getAttribute(\"data-element-id\");\n                    if (id === skipId) {\n                        continue;\n                    }\n                    if (!GetElementsByNameSet.has(domElement)) {\n                        continue;\n                    }\n                    fields.push({\n                        id,\n                        exportValue,\n                        domElement\n                    });\n                }\n                return fields;\n            }\n            show() {\n                if (this.container) {\n                    this.container.hidden = false;\n                }\n                this.popup?.maybeShow();\n            }\n            hide() {\n                if (this.container) {\n                    this.container.hidden = true;\n                }\n                this.popup?.forceHide();\n            }\n            getElementsToTriggerPopup() {\n                return this.container;\n            }\n            addHighlightArea() {\n                const triggers = this.getElementsToTriggerPopup();\n                if (Array.isArray(triggers)) {\n                    for (const element of triggers){\n                        element.classList.add(\"highlightArea\");\n                    }\n                } else {\n                    triggers.classList.add(\"highlightArea\");\n                }\n            }\n            get _isEditable() {\n                return false;\n            }\n            _editOnDoubleClick() {\n                if (!this._isEditable) {\n                    return;\n                }\n                const { annotationEditorType: mode, data: { id: editId } } = this;\n                this.container.addEventListener(\"dblclick\", ()=>{\n                    this.linkService.eventBus?.dispatch(\"switchannotationeditormode\", {\n                        source: this,\n                        mode,\n                        editId\n                    });\n                });\n            }\n        }\n        class LinkAnnotationElement extends AnnotationElement {\n            constructor(parameters, options = null){\n                super(parameters, {\n                    isRenderable: true,\n                    ignoreBorder: !!options?.ignoreBorder,\n                    createQuadrilaterals: true\n                });\n                this.isTooltipOnly = parameters.data.isTooltipOnly;\n            }\n            render() {\n                const { data, linkService } = this;\n                const link = document.createElement(\"a\");\n                link.setAttribute(\"data-element-id\", data.id);\n                let isBound = false;\n                if (data.url) {\n                    linkService.addLinkAttributes(link, data.url, data.newWindow);\n                    isBound = true;\n                } else if (data.action) {\n                    this._bindNamedAction(link, data.action);\n                    isBound = true;\n                } else if (data.attachment) {\n                    this.#bindAttachment(link, data.attachment, data.attachmentDest);\n                    isBound = true;\n                } else if (data.setOCGState) {\n                    this.#bindSetOCGState(link, data.setOCGState);\n                    isBound = true;\n                } else if (data.dest) {\n                    this._bindLink(link, data.dest);\n                    isBound = true;\n                } else {\n                    if (data.actions && (data.actions.Action || data.actions[\"Mouse Up\"] || data.actions[\"Mouse Down\"]) && this.enableScripting && this.hasJSActions) {\n                        this._bindJSAction(link, data);\n                        isBound = true;\n                    }\n                    if (data.resetForm) {\n                        this._bindResetFormAction(link, data.resetForm);\n                        isBound = true;\n                    } else if (this.isTooltipOnly && !isBound) {\n                        this._bindLink(link, \"\");\n                        isBound = true;\n                    }\n                }\n                this.container.classList.add(\"linkAnnotation\");\n                if (isBound) {\n                    this.container.append(link);\n                }\n                return this.container;\n            }\n            #setInternalLink() {\n                this.container.setAttribute(\"data-internal-link\", \"\");\n            }\n            _bindLink(link, destination) {\n                link.href = this.linkService.getDestinationHash(destination);\n                link.onclick = ()=>{\n                    if (destination) {\n                        this.linkService.goToDestination(destination);\n                    }\n                    return false;\n                };\n                if (destination || destination === \"\") {\n                    this.#setInternalLink();\n                }\n            }\n            _bindNamedAction(link, action) {\n                link.href = this.linkService.getAnchorUrl(\"\");\n                link.onclick = ()=>{\n                    this.linkService.executeNamedAction(action);\n                    return false;\n                };\n                this.#setInternalLink();\n            }\n            #bindAttachment(link, attachment, dest = null) {\n                link.href = this.linkService.getAnchorUrl(\"\");\n                link.onclick = ()=>{\n                    this.downloadManager?.openOrDownloadData(attachment.content, attachment.filename, dest);\n                    return false;\n                };\n                this.#setInternalLink();\n            }\n            #bindSetOCGState(link, action) {\n                link.href = this.linkService.getAnchorUrl(\"\");\n                link.onclick = ()=>{\n                    this.linkService.executeSetOCGState(action);\n                    return false;\n                };\n                this.#setInternalLink();\n            }\n            _bindJSAction(link, data) {\n                link.href = this.linkService.getAnchorUrl(\"\");\n                const map = new Map([\n                    [\n                        \"Action\",\n                        \"onclick\"\n                    ],\n                    [\n                        \"Mouse Up\",\n                        \"onmouseup\"\n                    ],\n                    [\n                        \"Mouse Down\",\n                        \"onmousedown\"\n                    ]\n                ]);\n                for (const name of Object.keys(data.actions)){\n                    const jsName = map.get(name);\n                    if (!jsName) {\n                        continue;\n                    }\n                    link[jsName] = ()=>{\n                        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                            source: this,\n                            detail: {\n                                id: data.id,\n                                name\n                            }\n                        });\n                        return false;\n                    };\n                }\n                if (!link.onclick) {\n                    link.onclick = ()=>false;\n                }\n                this.#setInternalLink();\n            }\n            _bindResetFormAction(link, resetForm) {\n                const otherClickAction = link.onclick;\n                if (!otherClickAction) {\n                    link.href = this.linkService.getAnchorUrl(\"\");\n                }\n                this.#setInternalLink();\n                if (!this._fieldObjects) {\n                    (0, util.warn)(`_bindResetFormAction - \"resetForm\" action not supported, ` + \"ensure that the `fieldObjects` parameter is provided.\");\n                    if (!otherClickAction) {\n                        link.onclick = ()=>false;\n                    }\n                    return;\n                }\n                link.onclick = ()=>{\n                    otherClickAction?.();\n                    const { fields: resetFormFields, refs: resetFormRefs, include } = resetForm;\n                    const allFields = [];\n                    if (resetFormFields.length !== 0 || resetFormRefs.length !== 0) {\n                        const fieldIds = new Set(resetFormRefs);\n                        for (const fieldName of resetFormFields){\n                            const fields = this._fieldObjects[fieldName] || [];\n                            for (const { id } of fields){\n                                fieldIds.add(id);\n                            }\n                        }\n                        for (const fields of Object.values(this._fieldObjects)){\n                            for (const field of fields){\n                                if (fieldIds.has(field.id) === include) {\n                                    allFields.push(field);\n                                }\n                            }\n                        }\n                    } else {\n                        for (const fields of Object.values(this._fieldObjects)){\n                            allFields.push(...fields);\n                        }\n                    }\n                    const storage = this.annotationStorage;\n                    const allIds = [];\n                    for (const field of allFields){\n                        const { id } = field;\n                        allIds.push(id);\n                        switch(field.type){\n                            case \"text\":\n                                {\n                                    const value = field.defaultValue || \"\";\n                                    storage.setValue(id, {\n                                        value\n                                    });\n                                    break;\n                                }\n                            case \"checkbox\":\n                            case \"radiobutton\":\n                                {\n                                    const value = field.defaultValue === field.exportValues;\n                                    storage.setValue(id, {\n                                        value\n                                    });\n                                    break;\n                                }\n                            case \"combobox\":\n                            case \"listbox\":\n                                {\n                                    const value = field.defaultValue || \"\";\n                                    storage.setValue(id, {\n                                        value\n                                    });\n                                    break;\n                                }\n                            default:\n                                continue;\n                        }\n                        const domElement = document.querySelector(`[data-element-id=\"${id}\"]`);\n                        if (!domElement) {\n                            continue;\n                        } else if (!GetElementsByNameSet.has(domElement)) {\n                            (0, util.warn)(`_bindResetFormAction - element not allowed: ${id}`);\n                            continue;\n                        }\n                        domElement.dispatchEvent(new Event(\"resetform\"));\n                    }\n                    if (this.enableScripting) {\n                        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                            source: this,\n                            detail: {\n                                id: \"app\",\n                                ids: allIds,\n                                name: \"ResetForm\"\n                            }\n                        });\n                    }\n                    return false;\n                };\n            }\n        }\n        class TextAnnotationElement extends AnnotationElement {\n            constructor(parameters){\n                super(parameters, {\n                    isRenderable: true\n                });\n            }\n            render() {\n                this.container.classList.add(\"textAnnotation\");\n                const image = document.createElement(\"img\");\n                image.src = this.imageResourcesPath + \"annotation-\" + this.data.name.toLowerCase() + \".svg\";\n                image.setAttribute(\"data-l10n-id\", \"pdfjs-text-annotation-type\");\n                image.setAttribute(\"data-l10n-args\", JSON.stringify({\n                    type: this.data.name\n                }));\n                if (!this.data.popupRef && this.hasPopupData) {\n                    this._createPopup();\n                }\n                this.container.append(image);\n                return this.container;\n            }\n        }\n        class WidgetAnnotationElement extends AnnotationElement {\n            render() {\n                if (this.data.alternativeText) {\n                    this.container.title = this.data.alternativeText;\n                }\n                return this.container;\n            }\n            showElementAndHideCanvas(element) {\n                if (this.data.hasOwnCanvas) {\n                    if (element.previousSibling?.nodeName === \"CANVAS\") {\n                        element.previousSibling.hidden = true;\n                    }\n                    element.hidden = false;\n                }\n            }\n            _getKeyModifier(event) {\n                return util.FeatureTest.platform.isMac ? event.metaKey : event.ctrlKey;\n            }\n            _setEventListener(element, elementData, baseName, eventName, valueGetter) {\n                if (baseName.includes(\"mouse\")) {\n                    element.addEventListener(baseName, (event)=>{\n                        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                            source: this,\n                            detail: {\n                                id: this.data.id,\n                                name: eventName,\n                                value: valueGetter(event),\n                                shift: event.shiftKey,\n                                modifier: this._getKeyModifier(event)\n                            }\n                        });\n                    });\n                } else {\n                    element.addEventListener(baseName, (event)=>{\n                        if (baseName === \"blur\") {\n                            if (!elementData.focused || !event.relatedTarget) {\n                                return;\n                            }\n                            elementData.focused = false;\n                        } else if (baseName === \"focus\") {\n                            if (elementData.focused) {\n                                return;\n                            }\n                            elementData.focused = true;\n                        }\n                        if (!valueGetter) {\n                            return;\n                        }\n                        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                            source: this,\n                            detail: {\n                                id: this.data.id,\n                                name: eventName,\n                                value: valueGetter(event)\n                            }\n                        });\n                    });\n                }\n            }\n            _setEventListeners(element, elementData, names, getter) {\n                for (const [baseName, eventName] of names){\n                    if (eventName === \"Action\" || this.data.actions?.[eventName]) {\n                        if (eventName === \"Focus\" || eventName === \"Blur\") {\n                            elementData ||= {\n                                focused: false\n                            };\n                        }\n                        this._setEventListener(element, elementData, baseName, eventName, getter);\n                        if (eventName === \"Focus\" && !this.data.actions?.Blur) {\n                            this._setEventListener(element, elementData, \"blur\", \"Blur\", null);\n                        } else if (eventName === \"Blur\" && !this.data.actions?.Focus) {\n                            this._setEventListener(element, elementData, \"focus\", \"Focus\", null);\n                        }\n                    }\n                }\n            }\n            _setBackgroundColor(element) {\n                const color = this.data.backgroundColor || null;\n                element.style.backgroundColor = color === null ? \"transparent\" : util.Util.makeHexColor(color[0], color[1], color[2]);\n            }\n            _setTextStyle(element) {\n                const TEXT_ALIGNMENT = [\n                    \"left\",\n                    \"center\",\n                    \"right\"\n                ];\n                const { fontColor } = this.data.defaultAppearanceData;\n                const fontSize = this.data.defaultAppearanceData.fontSize || DEFAULT_FONT_SIZE;\n                const style = element.style;\n                let computedFontSize;\n                const BORDER_SIZE = 2;\n                const roundToOneDecimal = (x)=>Math.round(10 * x) / 10;\n                if (this.data.multiLine) {\n                    const height = Math.abs(this.data.rect[3] - this.data.rect[1] - BORDER_SIZE);\n                    const numberOfLines = Math.round(height / (util.LINE_FACTOR * fontSize)) || 1;\n                    const lineHeight = height / numberOfLines;\n                    computedFontSize = Math.min(fontSize, roundToOneDecimal(lineHeight / util.LINE_FACTOR));\n                } else {\n                    const height = Math.abs(this.data.rect[3] - this.data.rect[1] - BORDER_SIZE);\n                    computedFontSize = Math.min(fontSize, roundToOneDecimal(height / util.LINE_FACTOR));\n                }\n                style.fontSize = `calc(${computedFontSize}px * var(--scale-factor))`;\n                style.color = util.Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);\n                if (this.data.textAlignment !== null) {\n                    style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\n                }\n            }\n            _setRequired(element, isRequired) {\n                if (isRequired) {\n                    element.setAttribute(\"required\", true);\n                } else {\n                    element.removeAttribute(\"required\");\n                }\n                element.setAttribute(\"aria-required\", isRequired);\n            }\n        }\n        class TextWidgetAnnotationElement extends WidgetAnnotationElement {\n            constructor(parameters){\n                const isRenderable = parameters.renderForms || parameters.data.hasOwnCanvas || !parameters.data.hasAppearance && !!parameters.data.fieldValue;\n                super(parameters, {\n                    isRenderable\n                });\n            }\n            setPropertyOnSiblings(base, key, value, keyInStorage) {\n                const storage = this.annotationStorage;\n                for (const element of this._getElementsByName(base.name, base.id)){\n                    if (element.domElement) {\n                        element.domElement[key] = value;\n                    }\n                    storage.setValue(element.id, {\n                        [keyInStorage]: value\n                    });\n                }\n            }\n            render() {\n                const storage = this.annotationStorage;\n                const id = this.data.id;\n                this.container.classList.add(\"textWidgetAnnotation\");\n                let element = null;\n                if (this.renderForms) {\n                    const storedData = storage.getValue(id, {\n                        value: this.data.fieldValue\n                    });\n                    let textContent = storedData.value || \"\";\n                    const maxLen = storage.getValue(id, {\n                        charLimit: this.data.maxLen\n                    }).charLimit;\n                    if (maxLen && textContent.length > maxLen) {\n                        textContent = textContent.slice(0, maxLen);\n                    }\n                    let fieldFormattedValues = storedData.formattedValue || this.data.textContent?.join(\"\\n\") || null;\n                    if (fieldFormattedValues && this.data.comb) {\n                        fieldFormattedValues = fieldFormattedValues.replaceAll(/\\s+/g, \"\");\n                    }\n                    const elementData = {\n                        userValue: textContent,\n                        formattedValue: fieldFormattedValues,\n                        lastCommittedValue: null,\n                        commitKey: 1,\n                        focused: false\n                    };\n                    if (this.data.multiLine) {\n                        element = document.createElement(\"textarea\");\n                        element.textContent = fieldFormattedValues ?? textContent;\n                        if (this.data.doNotScroll) {\n                            element.style.overflowY = \"hidden\";\n                        }\n                    } else {\n                        element = document.createElement(\"input\");\n                        element.type = \"text\";\n                        element.setAttribute(\"value\", fieldFormattedValues ?? textContent);\n                        if (this.data.doNotScroll) {\n                            element.style.overflowX = \"hidden\";\n                        }\n                    }\n                    if (this.data.hasOwnCanvas) {\n                        element.hidden = true;\n                    }\n                    GetElementsByNameSet.add(element);\n                    element.setAttribute(\"data-element-id\", id);\n                    element.disabled = this.data.readOnly;\n                    element.name = this.data.fieldName;\n                    element.tabIndex = DEFAULT_TAB_INDEX;\n                    this._setRequired(element, this.data.required);\n                    if (maxLen) {\n                        element.maxLength = maxLen;\n                    }\n                    element.addEventListener(\"input\", (event)=>{\n                        storage.setValue(id, {\n                            value: event.target.value\n                        });\n                        this.setPropertyOnSiblings(element, \"value\", event.target.value, \"value\");\n                        elementData.formattedValue = null;\n                    });\n                    element.addEventListener(\"resetform\", (event)=>{\n                        const defaultValue = this.data.defaultFieldValue ?? \"\";\n                        element.value = elementData.userValue = defaultValue;\n                        elementData.formattedValue = null;\n                    });\n                    let blurListener = (event)=>{\n                        const { formattedValue } = elementData;\n                        if (formattedValue !== null && formattedValue !== undefined) {\n                            event.target.value = formattedValue;\n                        }\n                        event.target.scrollLeft = 0;\n                    };\n                    if (this.enableScripting && this.hasJSActions) {\n                        element.addEventListener(\"focus\", (event)=>{\n                            if (elementData.focused) {\n                                return;\n                            }\n                            const { target } = event;\n                            if (elementData.userValue) {\n                                target.value = elementData.userValue;\n                            }\n                            elementData.lastCommittedValue = target.value;\n                            elementData.commitKey = 1;\n                            if (!this.data.actions?.Focus) {\n                                elementData.focused = true;\n                            }\n                        });\n                        element.addEventListener(\"updatefromsandbox\", (jsEvent)=>{\n                            this.showElementAndHideCanvas(jsEvent.target);\n                            const actions = {\n                                value (event) {\n                                    elementData.userValue = event.detail.value ?? \"\";\n                                    storage.setValue(id, {\n                                        value: elementData.userValue.toString()\n                                    });\n                                    event.target.value = elementData.userValue;\n                                },\n                                formattedValue (event) {\n                                    const { formattedValue } = event.detail;\n                                    elementData.formattedValue = formattedValue;\n                                    if (formattedValue !== null && formattedValue !== undefined && event.target !== document.activeElement) {\n                                        event.target.value = formattedValue;\n                                    }\n                                    storage.setValue(id, {\n                                        formattedValue\n                                    });\n                                },\n                                selRange (event) {\n                                    event.target.setSelectionRange(...event.detail.selRange);\n                                },\n                                charLimit: (event)=>{\n                                    const { charLimit } = event.detail;\n                                    const { target } = event;\n                                    if (charLimit === 0) {\n                                        target.removeAttribute(\"maxLength\");\n                                        return;\n                                    }\n                                    target.setAttribute(\"maxLength\", charLimit);\n                                    let value = elementData.userValue;\n                                    if (!value || value.length <= charLimit) {\n                                        return;\n                                    }\n                                    value = value.slice(0, charLimit);\n                                    target.value = elementData.userValue = value;\n                                    storage.setValue(id, {\n                                        value\n                                    });\n                                    this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                                        source: this,\n                                        detail: {\n                                            id,\n                                            name: \"Keystroke\",\n                                            value,\n                                            willCommit: true,\n                                            commitKey: 1,\n                                            selStart: target.selectionStart,\n                                            selEnd: target.selectionEnd\n                                        }\n                                    });\n                                }\n                            };\n                            this._dispatchEventFromSandbox(actions, jsEvent);\n                        });\n                        element.addEventListener(\"keydown\", (event)=>{\n                            elementData.commitKey = 1;\n                            let commitKey = -1;\n                            if (event.key === \"Escape\") {\n                                commitKey = 0;\n                            } else if (event.key === \"Enter\" && !this.data.multiLine) {\n                                commitKey = 2;\n                            } else if (event.key === \"Tab\") {\n                                elementData.commitKey = 3;\n                            }\n                            if (commitKey === -1) {\n                                return;\n                            }\n                            const { value } = event.target;\n                            if (elementData.lastCommittedValue === value) {\n                                return;\n                            }\n                            elementData.lastCommittedValue = value;\n                            elementData.userValue = value;\n                            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                                source: this,\n                                detail: {\n                                    id,\n                                    name: \"Keystroke\",\n                                    value,\n                                    willCommit: true,\n                                    commitKey,\n                                    selStart: event.target.selectionStart,\n                                    selEnd: event.target.selectionEnd\n                                }\n                            });\n                        });\n                        const _blurListener = blurListener;\n                        blurListener = null;\n                        element.addEventListener(\"blur\", (event)=>{\n                            if (!elementData.focused || !event.relatedTarget) {\n                                return;\n                            }\n                            if (!this.data.actions?.Blur) {\n                                elementData.focused = false;\n                            }\n                            const { value } = event.target;\n                            elementData.userValue = value;\n                            if (elementData.lastCommittedValue !== value) {\n                                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                                    source: this,\n                                    detail: {\n                                        id,\n                                        name: \"Keystroke\",\n                                        value,\n                                        willCommit: true,\n                                        commitKey: elementData.commitKey,\n                                        selStart: event.target.selectionStart,\n                                        selEnd: event.target.selectionEnd\n                                    }\n                                });\n                            }\n                            _blurListener(event);\n                        });\n                        if (this.data.actions?.Keystroke) {\n                            element.addEventListener(\"beforeinput\", (event)=>{\n                                elementData.lastCommittedValue = null;\n                                const { data, target } = event;\n                                const { value, selectionStart, selectionEnd } = target;\n                                let selStart = selectionStart, selEnd = selectionEnd;\n                                switch(event.inputType){\n                                    case \"deleteWordBackward\":\n                                        {\n                                            const match = value.substring(0, selectionStart).match(/\\w*[^\\w]*$/);\n                                            if (match) {\n                                                selStart -= match[0].length;\n                                            }\n                                            break;\n                                        }\n                                    case \"deleteWordForward\":\n                                        {\n                                            const match = value.substring(selectionStart).match(/^[^\\w]*\\w*/);\n                                            if (match) {\n                                                selEnd += match[0].length;\n                                            }\n                                            break;\n                                        }\n                                    case \"deleteContentBackward\":\n                                        if (selectionStart === selectionEnd) {\n                                            selStart -= 1;\n                                        }\n                                        break;\n                                    case \"deleteContentForward\":\n                                        if (selectionStart === selectionEnd) {\n                                            selEnd += 1;\n                                        }\n                                        break;\n                                }\n                                event.preventDefault();\n                                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                                    source: this,\n                                    detail: {\n                                        id,\n                                        name: \"Keystroke\",\n                                        value,\n                                        change: data || \"\",\n                                        willCommit: false,\n                                        selStart,\n                                        selEnd\n                                    }\n                                });\n                            });\n                        }\n                        this._setEventListeners(element, elementData, [\n                            [\n                                \"focus\",\n                                \"Focus\"\n                            ],\n                            [\n                                \"blur\",\n                                \"Blur\"\n                            ],\n                            [\n                                \"mousedown\",\n                                \"Mouse Down\"\n                            ],\n                            [\n                                \"mouseenter\",\n                                \"Mouse Enter\"\n                            ],\n                            [\n                                \"mouseleave\",\n                                \"Mouse Exit\"\n                            ],\n                            [\n                                \"mouseup\",\n                                \"Mouse Up\"\n                            ]\n                        ], (event)=>event.target.value);\n                    }\n                    if (blurListener) {\n                        element.addEventListener(\"blur\", blurListener);\n                    }\n                    if (this.data.comb) {\n                        const fieldWidth = this.data.rect[2] - this.data.rect[0];\n                        const combWidth = fieldWidth / maxLen;\n                        element.classList.add(\"comb\");\n                        element.style.letterSpacing = `calc(${combWidth}px * var(--scale-factor) - 1ch)`;\n                    }\n                } else {\n                    element = document.createElement(\"div\");\n                    element.textContent = this.data.fieldValue;\n                    element.style.verticalAlign = \"middle\";\n                    element.style.display = \"table-cell\";\n                    if (this.data.hasOwnCanvas) {\n                        element.hidden = true;\n                    }\n                }\n                this._setTextStyle(element);\n                this._setBackgroundColor(element);\n                this._setDefaultPropertiesFromJS(element);\n                this.container.append(element);\n                return this.container;\n            }\n        }\n        class SignatureWidgetAnnotationElement extends WidgetAnnotationElement {\n            constructor(parameters){\n                super(parameters, {\n                    isRenderable: !!parameters.data.hasOwnCanvas\n                });\n            }\n        }\n        class CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {\n            constructor(parameters){\n                super(parameters, {\n                    isRenderable: parameters.renderForms\n                });\n            }\n            render() {\n                const storage = this.annotationStorage;\n                const data = this.data;\n                const id = data.id;\n                let value = storage.getValue(id, {\n                    value: data.exportValue === data.fieldValue\n                }).value;\n                if (typeof value === \"string\") {\n                    value = value !== \"Off\";\n                    storage.setValue(id, {\n                        value\n                    });\n                }\n                this.container.classList.add(\"buttonWidgetAnnotation\", \"checkBox\");\n                const element = document.createElement(\"input\");\n                GetElementsByNameSet.add(element);\n                element.setAttribute(\"data-element-id\", id);\n                element.disabled = data.readOnly;\n                this._setRequired(element, this.data.required);\n                element.type = \"checkbox\";\n                element.name = data.fieldName;\n                if (value) {\n                    element.setAttribute(\"checked\", true);\n                }\n                element.setAttribute(\"exportValue\", data.exportValue);\n                element.tabIndex = DEFAULT_TAB_INDEX;\n                element.addEventListener(\"change\", (event)=>{\n                    const { name, checked } = event.target;\n                    for (const checkbox of this._getElementsByName(name, id)){\n                        const curChecked = checked && checkbox.exportValue === data.exportValue;\n                        if (checkbox.domElement) {\n                            checkbox.domElement.checked = curChecked;\n                        }\n                        storage.setValue(checkbox.id, {\n                            value: curChecked\n                        });\n                    }\n                    storage.setValue(id, {\n                        value: checked\n                    });\n                });\n                element.addEventListener(\"resetform\", (event)=>{\n                    const defaultValue = data.defaultFieldValue || \"Off\";\n                    event.target.checked = defaultValue === data.exportValue;\n                });\n                if (this.enableScripting && this.hasJSActions) {\n                    element.addEventListener(\"updatefromsandbox\", (jsEvent)=>{\n                        const actions = {\n                            value (event) {\n                                event.target.checked = event.detail.value !== \"Off\";\n                                storage.setValue(id, {\n                                    value: event.target.checked\n                                });\n                            }\n                        };\n                        this._dispatchEventFromSandbox(actions, jsEvent);\n                    });\n                    this._setEventListeners(element, null, [\n                        [\n                            \"change\",\n                            \"Validate\"\n                        ],\n                        [\n                            \"change\",\n                            \"Action\"\n                        ],\n                        [\n                            \"focus\",\n                            \"Focus\"\n                        ],\n                        [\n                            \"blur\",\n                            \"Blur\"\n                        ],\n                        [\n                            \"mousedown\",\n                            \"Mouse Down\"\n                        ],\n                        [\n                            \"mouseenter\",\n                            \"Mouse Enter\"\n                        ],\n                        [\n                            \"mouseleave\",\n                            \"Mouse Exit\"\n                        ],\n                        [\n                            \"mouseup\",\n                            \"Mouse Up\"\n                        ]\n                    ], (event)=>event.target.checked);\n                }\n                this._setBackgroundColor(element);\n                this._setDefaultPropertiesFromJS(element);\n                this.container.append(element);\n                return this.container;\n            }\n        }\n        class RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {\n            constructor(parameters){\n                super(parameters, {\n                    isRenderable: parameters.renderForms\n                });\n            }\n            render() {\n                this.container.classList.add(\"buttonWidgetAnnotation\", \"radioButton\");\n                const storage = this.annotationStorage;\n                const data = this.data;\n                const id = data.id;\n                let value = storage.getValue(id, {\n                    value: data.fieldValue === data.buttonValue\n                }).value;\n                if (typeof value === \"string\") {\n                    value = value !== data.buttonValue;\n                    storage.setValue(id, {\n                        value\n                    });\n                }\n                if (value) {\n                    for (const radio of this._getElementsByName(data.fieldName, id)){\n                        storage.setValue(radio.id, {\n                            value: false\n                        });\n                    }\n                }\n                const element = document.createElement(\"input\");\n                GetElementsByNameSet.add(element);\n                element.setAttribute(\"data-element-id\", id);\n                element.disabled = data.readOnly;\n                this._setRequired(element, this.data.required);\n                element.type = \"radio\";\n                element.name = data.fieldName;\n                if (value) {\n                    element.setAttribute(\"checked\", true);\n                }\n                element.tabIndex = DEFAULT_TAB_INDEX;\n                element.addEventListener(\"change\", (event)=>{\n                    const { name, checked } = event.target;\n                    for (const radio of this._getElementsByName(name, id)){\n                        storage.setValue(radio.id, {\n                            value: false\n                        });\n                    }\n                    storage.setValue(id, {\n                        value: checked\n                    });\n                });\n                element.addEventListener(\"resetform\", (event)=>{\n                    const defaultValue = data.defaultFieldValue;\n                    event.target.checked = defaultValue !== null && defaultValue !== undefined && defaultValue === data.buttonValue;\n                });\n                if (this.enableScripting && this.hasJSActions) {\n                    const pdfButtonValue = data.buttonValue;\n                    element.addEventListener(\"updatefromsandbox\", (jsEvent)=>{\n                        const actions = {\n                            value: (event)=>{\n                                const checked = pdfButtonValue === event.detail.value;\n                                for (const radio of this._getElementsByName(event.target.name)){\n                                    const curChecked = checked && radio.id === id;\n                                    if (radio.domElement) {\n                                        radio.domElement.checked = curChecked;\n                                    }\n                                    storage.setValue(radio.id, {\n                                        value: curChecked\n                                    });\n                                }\n                            }\n                        };\n                        this._dispatchEventFromSandbox(actions, jsEvent);\n                    });\n                    this._setEventListeners(element, null, [\n                        [\n                            \"change\",\n                            \"Validate\"\n                        ],\n                        [\n                            \"change\",\n                            \"Action\"\n                        ],\n                        [\n                            \"focus\",\n                            \"Focus\"\n                        ],\n                        [\n                            \"blur\",\n                            \"Blur\"\n                        ],\n                        [\n                            \"mousedown\",\n                            \"Mouse Down\"\n                        ],\n                        [\n                            \"mouseenter\",\n                            \"Mouse Enter\"\n                        ],\n                        [\n                            \"mouseleave\",\n                            \"Mouse Exit\"\n                        ],\n                        [\n                            \"mouseup\",\n                            \"Mouse Up\"\n                        ]\n                    ], (event)=>event.target.checked);\n                }\n                this._setBackgroundColor(element);\n                this._setDefaultPropertiesFromJS(element);\n                this.container.append(element);\n                return this.container;\n            }\n        }\n        class PushButtonWidgetAnnotationElement extends LinkAnnotationElement {\n            constructor(parameters){\n                super(parameters, {\n                    ignoreBorder: parameters.data.hasAppearance\n                });\n            }\n            render() {\n                const container = super.render();\n                container.classList.add(\"buttonWidgetAnnotation\", \"pushButton\");\n                if (this.data.alternativeText) {\n                    container.title = this.data.alternativeText;\n                }\n                const linkElement = container.lastChild;\n                if (this.enableScripting && this.hasJSActions && linkElement) {\n                    this._setDefaultPropertiesFromJS(linkElement);\n                    linkElement.addEventListener(\"updatefromsandbox\", (jsEvent)=>{\n                        this._dispatchEventFromSandbox({}, jsEvent);\n                    });\n                }\n                return container;\n            }\n        }\n        class ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {\n            constructor(parameters){\n                super(parameters, {\n                    isRenderable: parameters.renderForms\n                });\n            }\n            render() {\n                this.container.classList.add(\"choiceWidgetAnnotation\");\n                const storage = this.annotationStorage;\n                const id = this.data.id;\n                const storedData = storage.getValue(id, {\n                    value: this.data.fieldValue\n                });\n                const selectElement = document.createElement(\"select\");\n                GetElementsByNameSet.add(selectElement);\n                selectElement.setAttribute(\"data-element-id\", id);\n                selectElement.disabled = this.data.readOnly;\n                this._setRequired(selectElement, this.data.required);\n                selectElement.name = this.data.fieldName;\n                selectElement.tabIndex = DEFAULT_TAB_INDEX;\n                let addAnEmptyEntry = this.data.combo && this.data.options.length > 0;\n                if (!this.data.combo) {\n                    selectElement.size = this.data.options.length;\n                    if (this.data.multiSelect) {\n                        selectElement.multiple = true;\n                    }\n                }\n                selectElement.addEventListener(\"resetform\", (event)=>{\n                    const defaultValue = this.data.defaultFieldValue;\n                    for (const option of selectElement.options){\n                        option.selected = option.value === defaultValue;\n                    }\n                });\n                for (const option of this.data.options){\n                    const optionElement = document.createElement(\"option\");\n                    optionElement.textContent = option.displayValue;\n                    optionElement.value = option.exportValue;\n                    if (storedData.value.includes(option.exportValue)) {\n                        optionElement.setAttribute(\"selected\", true);\n                        addAnEmptyEntry = false;\n                    }\n                    selectElement.append(optionElement);\n                }\n                let removeEmptyEntry = null;\n                if (addAnEmptyEntry) {\n                    const noneOptionElement = document.createElement(\"option\");\n                    noneOptionElement.value = \" \";\n                    noneOptionElement.setAttribute(\"hidden\", true);\n                    noneOptionElement.setAttribute(\"selected\", true);\n                    selectElement.prepend(noneOptionElement);\n                    removeEmptyEntry = ()=>{\n                        noneOptionElement.remove();\n                        selectElement.removeEventListener(\"input\", removeEmptyEntry);\n                        removeEmptyEntry = null;\n                    };\n                    selectElement.addEventListener(\"input\", removeEmptyEntry);\n                }\n                const getValue = (isExport)=>{\n                    const name = isExport ? \"value\" : \"textContent\";\n                    const { options, multiple } = selectElement;\n                    if (!multiple) {\n                        return options.selectedIndex === -1 ? null : options[options.selectedIndex][name];\n                    }\n                    return Array.prototype.filter.call(options, (option)=>option.selected).map((option)=>option[name]);\n                };\n                let selectedValues = getValue(false);\n                const getItems = (event)=>{\n                    const options = event.target.options;\n                    return Array.prototype.map.call(options, (option)=>{\n                        return {\n                            displayValue: option.textContent,\n                            exportValue: option.value\n                        };\n                    });\n                };\n                if (this.enableScripting && this.hasJSActions) {\n                    selectElement.addEventListener(\"updatefromsandbox\", (jsEvent)=>{\n                        const actions = {\n                            value (event) {\n                                removeEmptyEntry?.();\n                                const value = event.detail.value;\n                                const values = new Set(Array.isArray(value) ? value : [\n                                    value\n                                ]);\n                                for (const option of selectElement.options){\n                                    option.selected = values.has(option.value);\n                                }\n                                storage.setValue(id, {\n                                    value: getValue(true)\n                                });\n                                selectedValues = getValue(false);\n                            },\n                            multipleSelection (event) {\n                                selectElement.multiple = true;\n                            },\n                            remove (event) {\n                                const options = selectElement.options;\n                                const index = event.detail.remove;\n                                options[index].selected = false;\n                                selectElement.remove(index);\n                                if (options.length > 0) {\n                                    const i = Array.prototype.findIndex.call(options, (option)=>option.selected);\n                                    if (i === -1) {\n                                        options[0].selected = true;\n                                    }\n                                }\n                                storage.setValue(id, {\n                                    value: getValue(true),\n                                    items: getItems(event)\n                                });\n                                selectedValues = getValue(false);\n                            },\n                            clear (event) {\n                                while(selectElement.length !== 0){\n                                    selectElement.remove(0);\n                                }\n                                storage.setValue(id, {\n                                    value: null,\n                                    items: []\n                                });\n                                selectedValues = getValue(false);\n                            },\n                            insert (event) {\n                                const { index, displayValue, exportValue } = event.detail.insert;\n                                const selectChild = selectElement.children[index];\n                                const optionElement = document.createElement(\"option\");\n                                optionElement.textContent = displayValue;\n                                optionElement.value = exportValue;\n                                if (selectChild) {\n                                    selectChild.before(optionElement);\n                                } else {\n                                    selectElement.append(optionElement);\n                                }\n                                storage.setValue(id, {\n                                    value: getValue(true),\n                                    items: getItems(event)\n                                });\n                                selectedValues = getValue(false);\n                            },\n                            items (event) {\n                                const { items } = event.detail;\n                                while(selectElement.length !== 0){\n                                    selectElement.remove(0);\n                                }\n                                for (const item of items){\n                                    const { displayValue, exportValue } = item;\n                                    const optionElement = document.createElement(\"option\");\n                                    optionElement.textContent = displayValue;\n                                    optionElement.value = exportValue;\n                                    selectElement.append(optionElement);\n                                }\n                                if (selectElement.options.length > 0) {\n                                    selectElement.options[0].selected = true;\n                                }\n                                storage.setValue(id, {\n                                    value: getValue(true),\n                                    items: getItems(event)\n                                });\n                                selectedValues = getValue(false);\n                            },\n                            indices (event) {\n                                const indices = new Set(event.detail.indices);\n                                for (const option of event.target.options){\n                                    option.selected = indices.has(option.index);\n                                }\n                                storage.setValue(id, {\n                                    value: getValue(true)\n                                });\n                                selectedValues = getValue(false);\n                            },\n                            editable (event) {\n                                event.target.disabled = !event.detail.editable;\n                            }\n                        };\n                        this._dispatchEventFromSandbox(actions, jsEvent);\n                    });\n                    selectElement.addEventListener(\"input\", (event)=>{\n                        const exportValue = getValue(true);\n                        storage.setValue(id, {\n                            value: exportValue\n                        });\n                        event.preventDefault();\n                        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                            source: this,\n                            detail: {\n                                id,\n                                name: \"Keystroke\",\n                                value: selectedValues,\n                                changeEx: exportValue,\n                                willCommit: false,\n                                commitKey: 1,\n                                keyDown: false\n                            }\n                        });\n                    });\n                    this._setEventListeners(selectElement, null, [\n                        [\n                            \"focus\",\n                            \"Focus\"\n                        ],\n                        [\n                            \"blur\",\n                            \"Blur\"\n                        ],\n                        [\n                            \"mousedown\",\n                            \"Mouse Down\"\n                        ],\n                        [\n                            \"mouseenter\",\n                            \"Mouse Enter\"\n                        ],\n                        [\n                            \"mouseleave\",\n                            \"Mouse Exit\"\n                        ],\n                        [\n                            \"mouseup\",\n                            \"Mouse Up\"\n                        ],\n                        [\n                            \"input\",\n                            \"Action\"\n                        ],\n                        [\n                            \"input\",\n                            \"Validate\"\n                        ]\n                    ], (event)=>event.target.value);\n                } else {\n                    selectElement.addEventListener(\"input\", function(event) {\n                        storage.setValue(id, {\n                            value: getValue(true)\n                        });\n                    });\n                }\n                if (this.data.combo) {\n                    this._setTextStyle(selectElement);\n                } else {}\n                this._setBackgroundColor(selectElement);\n                this._setDefaultPropertiesFromJS(selectElement);\n                this.container.append(selectElement);\n                return this.container;\n            }\n        }\n        class PopupAnnotationElement extends AnnotationElement {\n            constructor(parameters){\n                const { data, elements } = parameters;\n                super(parameters, {\n                    isRenderable: AnnotationElement._hasPopupData(data)\n                });\n                this.elements = elements;\n            }\n            render() {\n                this.container.classList.add(\"popupAnnotation\");\n                const popup = new PopupElement({\n                    container: this.container,\n                    color: this.data.color,\n                    titleObj: this.data.titleObj,\n                    modificationDate: this.data.modificationDate,\n                    contentsObj: this.data.contentsObj,\n                    richText: this.data.richText,\n                    rect: this.data.rect,\n                    parentRect: this.data.parentRect || null,\n                    parent: this.parent,\n                    elements: this.elements,\n                    open: this.data.open\n                });\n                const elementIds = [];\n                for (const element of this.elements){\n                    element.popup = popup;\n                    elementIds.push(element.data.id);\n                    element.addHighlightArea();\n                }\n                this.container.setAttribute(\"aria-controls\", elementIds.map((id)=>`${util.AnnotationPrefix}${id}`).join(\",\"));\n                return this.container;\n            }\n        }\n        class PopupElement {\n            #boundKeyDown;\n            #boundHide;\n            #boundShow;\n            #boundToggle;\n            #color;\n            #container;\n            #contentsObj;\n            #dateObj;\n            #elements;\n            #parent;\n            #parentRect;\n            #pinned;\n            #popup;\n            #rect;\n            #richText;\n            #titleObj;\n            #wasVisible;\n            constructor({ container, color, elements, titleObj, modificationDate, contentsObj, richText, parent, rect, parentRect, open }){\n                this.#boundKeyDown = this.#keyDown.bind(this);\n                this.#boundHide = this.#hide.bind(this);\n                this.#boundShow = this.#show.bind(this);\n                this.#boundToggle = this.#toggle.bind(this);\n                this.#color = null;\n                this.#container = null;\n                this.#contentsObj = null;\n                this.#dateObj = null;\n                this.#elements = null;\n                this.#parent = null;\n                this.#parentRect = null;\n                this.#pinned = false;\n                this.#popup = null;\n                this.#rect = null;\n                this.#richText = null;\n                this.#titleObj = null;\n                this.#wasVisible = false;\n                this.#container = container;\n                this.#titleObj = titleObj;\n                this.#contentsObj = contentsObj;\n                this.#richText = richText;\n                this.#parent = parent;\n                this.#color = color;\n                this.#rect = rect;\n                this.#parentRect = parentRect;\n                this.#elements = elements;\n                this.#dateObj = display_utils.PDFDateString.toDateObject(modificationDate);\n                this.trigger = elements.flatMap((e)=>e.getElementsToTriggerPopup());\n                for (const element of this.trigger){\n                    element.addEventListener(\"click\", this.#boundToggle);\n                    element.addEventListener(\"mouseenter\", this.#boundShow);\n                    element.addEventListener(\"mouseleave\", this.#boundHide);\n                    element.classList.add(\"popupTriggerArea\");\n                }\n                for (const element of elements){\n                    element.container?.addEventListener(\"keydown\", this.#boundKeyDown);\n                }\n                this.#container.hidden = true;\n                if (open) {\n                    this.#toggle();\n                }\n            }\n            render() {\n                if (this.#popup) {\n                    return;\n                }\n                const { page: { view }, viewport: { rawDims: { pageWidth, pageHeight, pageX, pageY } } } = this.#parent;\n                const popup = this.#popup = document.createElement(\"div\");\n                popup.className = \"popup\";\n                if (this.#color) {\n                    const baseColor = popup.style.outlineColor = util.Util.makeHexColor(...this.#color);\n                    if (CSS.supports(\"background-color\", \"color-mix(in srgb, red 30%, white)\")) {\n                        popup.style.backgroundColor = `color-mix(in srgb, ${baseColor} 30%, white)`;\n                    } else {\n                        const BACKGROUND_ENLIGHT = 0.7;\n                        popup.style.backgroundColor = util.Util.makeHexColor(...this.#color.map((c)=>Math.floor(BACKGROUND_ENLIGHT * (255 - c) + c)));\n                    }\n                }\n                const header = document.createElement(\"span\");\n                header.className = \"header\";\n                const title = document.createElement(\"h1\");\n                header.append(title);\n                ({ dir: title.dir, str: title.textContent } = this.#titleObj);\n                popup.append(header);\n                if (this.#dateObj) {\n                    const modificationDate = document.createElement(\"span\");\n                    modificationDate.classList.add(\"popupDate\");\n                    modificationDate.setAttribute(\"data-l10n-id\", \"pdfjs-annotation-date-string\");\n                    modificationDate.setAttribute(\"data-l10n-args\", JSON.stringify({\n                        date: this.#dateObj.toLocaleDateString(),\n                        time: this.#dateObj.toLocaleTimeString()\n                    }));\n                    header.append(modificationDate);\n                }\n                const contentsObj = this.#contentsObj;\n                const richText = this.#richText;\n                if (richText?.str && (!contentsObj?.str || contentsObj.str === richText.str)) {\n                    xfa_layer.XfaLayer.render({\n                        xfaHtml: richText.html,\n                        intent: \"richText\",\n                        div: popup\n                    });\n                    popup.lastChild.classList.add(\"richText\", \"popupContent\");\n                } else {\n                    const contents = this._formatContents(contentsObj);\n                    popup.append(contents);\n                }\n                let useParentRect = !!this.#parentRect;\n                let rect = useParentRect ? this.#parentRect : this.#rect;\n                for (const element of this.#elements){\n                    if (!rect || util.Util.intersect(element.data.rect, rect) !== null) {\n                        rect = element.data.rect;\n                        useParentRect = true;\n                        break;\n                    }\n                }\n                const normalizedRect = util.Util.normalizeRect([\n                    rect[0],\n                    view[3] - rect[1] + view[1],\n                    rect[2],\n                    view[3] - rect[3] + view[1]\n                ]);\n                const HORIZONTAL_SPACE_AFTER_ANNOTATION = 5;\n                const parentWidth = useParentRect ? rect[2] - rect[0] + HORIZONTAL_SPACE_AFTER_ANNOTATION : 0;\n                const popupLeft = normalizedRect[0] + parentWidth;\n                const popupTop = normalizedRect[1];\n                const { style } = this.#container;\n                style.left = `${100 * (popupLeft - pageX) / pageWidth}%`;\n                style.top = `${100 * (popupTop - pageY) / pageHeight}%`;\n                this.#container.append(popup);\n            }\n            _formatContents({ str, dir }) {\n                const p = document.createElement(\"p\");\n                p.classList.add(\"popupContent\");\n                p.dir = dir;\n                const lines = str.split(/(?:\\r\\n?|\\n)/);\n                for(let i = 0, ii = lines.length; i < ii; ++i){\n                    const line = lines[i];\n                    p.append(document.createTextNode(line));\n                    if (i < ii - 1) {\n                        p.append(document.createElement(\"br\"));\n                    }\n                }\n                return p;\n            }\n            #keyDown(event) {\n                if (event.altKey || event.shiftKey || event.ctrlKey || event.metaKey) {\n                    return;\n                }\n                if (event.key === \"Enter\" || event.key === \"Escape\" && this.#pinned) {\n                    this.#toggle();\n                }\n            }\n            #toggle() {\n                this.#pinned = !this.#pinned;\n                if (this.#pinned) {\n                    this.#show();\n                    this.#container.addEventListener(\"click\", this.#boundToggle);\n                    this.#container.addEventListener(\"keydown\", this.#boundKeyDown);\n                } else {\n                    this.#hide();\n                    this.#container.removeEventListener(\"click\", this.#boundToggle);\n                    this.#container.removeEventListener(\"keydown\", this.#boundKeyDown);\n                }\n            }\n            #show() {\n                if (!this.#popup) {\n                    this.render();\n                }\n                if (!this.isVisible) {\n                    this.#container.hidden = false;\n                    this.#container.style.zIndex = parseInt(this.#container.style.zIndex) + 1000;\n                } else if (this.#pinned) {\n                    this.#container.classList.add(\"focused\");\n                }\n            }\n            #hide() {\n                this.#container.classList.remove(\"focused\");\n                if (this.#pinned || !this.isVisible) {\n                    return;\n                }\n                this.#container.hidden = true;\n                this.#container.style.zIndex = parseInt(this.#container.style.zIndex) - 1000;\n            }\n            forceHide() {\n                this.#wasVisible = this.isVisible;\n                if (!this.#wasVisible) {\n                    return;\n                }\n                this.#container.hidden = true;\n            }\n            maybeShow() {\n                if (!this.#wasVisible) {\n                    return;\n                }\n                this.#wasVisible = false;\n                this.#container.hidden = false;\n            }\n            get isVisible() {\n                return this.#container.hidden === false;\n            }\n        }\n        class FreeTextAnnotationElement extends AnnotationElement {\n            constructor(parameters){\n                super(parameters, {\n                    isRenderable: true,\n                    ignoreBorder: true\n                });\n                this.textContent = parameters.data.textContent;\n                this.textPosition = parameters.data.textPosition;\n                this.annotationEditorType = util.AnnotationEditorType.FREETEXT;\n            }\n            render() {\n                this.container.classList.add(\"freeTextAnnotation\");\n                if (this.textContent) {\n                    const content = document.createElement(\"div\");\n                    content.classList.add(\"annotationTextContent\");\n                    content.setAttribute(\"role\", \"comment\");\n                    for (const line of this.textContent){\n                        const lineSpan = document.createElement(\"span\");\n                        lineSpan.textContent = line;\n                        content.append(lineSpan);\n                    }\n                    this.container.append(content);\n                }\n                if (!this.data.popupRef && this.hasPopupData) {\n                    this._createPopup();\n                }\n                this._editOnDoubleClick();\n                return this.container;\n            }\n            get _isEditable() {\n                return this.data.hasOwnCanvas;\n            }\n        }\n        class LineAnnotationElement extends AnnotationElement {\n            #line;\n            constructor(parameters){\n                super(parameters, {\n                    isRenderable: true,\n                    ignoreBorder: true\n                });\n                this.#line = null;\n            }\n            render() {\n                this.container.classList.add(\"lineAnnotation\");\n                const data = this.data;\n                const { width, height } = getRectDims(data.rect);\n                const svg = this.svgFactory.create(width, height, true);\n                const line = this.#line = this.svgFactory.createElement(\"svg:line\");\n                line.setAttribute(\"x1\", data.rect[2] - data.lineCoordinates[0]);\n                line.setAttribute(\"y1\", data.rect[3] - data.lineCoordinates[1]);\n                line.setAttribute(\"x2\", data.rect[2] - data.lineCoordinates[2]);\n                line.setAttribute(\"y2\", data.rect[3] - data.lineCoordinates[3]);\n                line.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n                line.setAttribute(\"stroke\", \"transparent\");\n                line.setAttribute(\"fill\", \"transparent\");\n                svg.append(line);\n                this.container.append(svg);\n                if (!data.popupRef && this.hasPopupData) {\n                    this._createPopup();\n                }\n                return this.container;\n            }\n            getElementsToTriggerPopup() {\n                return this.#line;\n            }\n            addHighlightArea() {\n                this.container.classList.add(\"highlightArea\");\n            }\n        }\n        class SquareAnnotationElement extends AnnotationElement {\n            #square;\n            constructor(parameters){\n                super(parameters, {\n                    isRenderable: true,\n                    ignoreBorder: true\n                });\n                this.#square = null;\n            }\n            render() {\n                this.container.classList.add(\"squareAnnotation\");\n                const data = this.data;\n                const { width, height } = getRectDims(data.rect);\n                const svg = this.svgFactory.create(width, height, true);\n                const borderWidth = data.borderStyle.width;\n                const square = this.#square = this.svgFactory.createElement(\"svg:rect\");\n                square.setAttribute(\"x\", borderWidth / 2);\n                square.setAttribute(\"y\", borderWidth / 2);\n                square.setAttribute(\"width\", width - borderWidth);\n                square.setAttribute(\"height\", height - borderWidth);\n                square.setAttribute(\"stroke-width\", borderWidth || 1);\n                square.setAttribute(\"stroke\", \"transparent\");\n                square.setAttribute(\"fill\", \"transparent\");\n                svg.append(square);\n                this.container.append(svg);\n                if (!data.popupRef && this.hasPopupData) {\n                    this._createPopup();\n                }\n                return this.container;\n            }\n            getElementsToTriggerPopup() {\n                return this.#square;\n            }\n            addHighlightArea() {\n                this.container.classList.add(\"highlightArea\");\n            }\n        }\n        class CircleAnnotationElement extends AnnotationElement {\n            #circle;\n            constructor(parameters){\n                super(parameters, {\n                    isRenderable: true,\n                    ignoreBorder: true\n                });\n                this.#circle = null;\n            }\n            render() {\n                this.container.classList.add(\"circleAnnotation\");\n                const data = this.data;\n                const { width, height } = getRectDims(data.rect);\n                const svg = this.svgFactory.create(width, height, true);\n                const borderWidth = data.borderStyle.width;\n                const circle = this.#circle = this.svgFactory.createElement(\"svg:ellipse\");\n                circle.setAttribute(\"cx\", width / 2);\n                circle.setAttribute(\"cy\", height / 2);\n                circle.setAttribute(\"rx\", width / 2 - borderWidth / 2);\n                circle.setAttribute(\"ry\", height / 2 - borderWidth / 2);\n                circle.setAttribute(\"stroke-width\", borderWidth || 1);\n                circle.setAttribute(\"stroke\", \"transparent\");\n                circle.setAttribute(\"fill\", \"transparent\");\n                svg.append(circle);\n                this.container.append(svg);\n                if (!data.popupRef && this.hasPopupData) {\n                    this._createPopup();\n                }\n                return this.container;\n            }\n            getElementsToTriggerPopup() {\n                return this.#circle;\n            }\n            addHighlightArea() {\n                this.container.classList.add(\"highlightArea\");\n            }\n        }\n        class PolylineAnnotationElement extends AnnotationElement {\n            #polyline;\n            constructor(parameters){\n                super(parameters, {\n                    isRenderable: true,\n                    ignoreBorder: true\n                });\n                this.#polyline = null;\n                this.containerClassName = \"polylineAnnotation\";\n                this.svgElementName = \"svg:polyline\";\n            }\n            render() {\n                this.container.classList.add(this.containerClassName);\n                const data = this.data;\n                const { width, height } = getRectDims(data.rect);\n                const svg = this.svgFactory.create(width, height, true);\n                let points = [];\n                for (const coordinate of data.vertices){\n                    const x = coordinate.x - data.rect[0];\n                    const y = data.rect[3] - coordinate.y;\n                    points.push(x + \",\" + y);\n                }\n                points = points.join(\" \");\n                const polyline = this.#polyline = this.svgFactory.createElement(this.svgElementName);\n                polyline.setAttribute(\"points\", points);\n                polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n                polyline.setAttribute(\"stroke\", \"transparent\");\n                polyline.setAttribute(\"fill\", \"transparent\");\n                svg.append(polyline);\n                this.container.append(svg);\n                if (!data.popupRef && this.hasPopupData) {\n                    this._createPopup();\n                }\n                return this.container;\n            }\n            getElementsToTriggerPopup() {\n                return this.#polyline;\n            }\n            addHighlightArea() {\n                this.container.classList.add(\"highlightArea\");\n            }\n        }\n        class PolygonAnnotationElement extends PolylineAnnotationElement {\n            constructor(parameters){\n                super(parameters);\n                this.containerClassName = \"polygonAnnotation\";\n                this.svgElementName = \"svg:polygon\";\n            }\n        }\n        class CaretAnnotationElement extends AnnotationElement {\n            constructor(parameters){\n                super(parameters, {\n                    isRenderable: true,\n                    ignoreBorder: true\n                });\n            }\n            render() {\n                this.container.classList.add(\"caretAnnotation\");\n                if (!this.data.popupRef && this.hasPopupData) {\n                    this._createPopup();\n                }\n                return this.container;\n            }\n        }\n        class InkAnnotationElement extends AnnotationElement {\n            #polylines;\n            constructor(parameters){\n                super(parameters, {\n                    isRenderable: true,\n                    ignoreBorder: true\n                });\n                this.#polylines = [];\n                this.containerClassName = \"inkAnnotation\";\n                this.svgElementName = \"svg:polyline\";\n                this.annotationEditorType = util.AnnotationEditorType.INK;\n            }\n            render() {\n                this.container.classList.add(this.containerClassName);\n                const data = this.data;\n                const { width, height } = getRectDims(data.rect);\n                const svg = this.svgFactory.create(width, height, true);\n                for (const inkList of data.inkLists){\n                    let points = [];\n                    for (const coordinate of inkList){\n                        const x = coordinate.x - data.rect[0];\n                        const y = data.rect[3] - coordinate.y;\n                        points.push(`${x},${y}`);\n                    }\n                    points = points.join(\" \");\n                    const polyline = this.svgFactory.createElement(this.svgElementName);\n                    this.#polylines.push(polyline);\n                    polyline.setAttribute(\"points\", points);\n                    polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n                    polyline.setAttribute(\"stroke\", \"transparent\");\n                    polyline.setAttribute(\"fill\", \"transparent\");\n                    if (!data.popupRef && this.hasPopupData) {\n                        this._createPopup();\n                    }\n                    svg.append(polyline);\n                }\n                this.container.append(svg);\n                return this.container;\n            }\n            getElementsToTriggerPopup() {\n                return this.#polylines;\n            }\n            addHighlightArea() {\n                this.container.classList.add(\"highlightArea\");\n            }\n        }\n        class HighlightAnnotationElement extends AnnotationElement {\n            constructor(parameters){\n                super(parameters, {\n                    isRenderable: true,\n                    ignoreBorder: true,\n                    createQuadrilaterals: true\n                });\n            }\n            render() {\n                if (!this.data.popupRef && this.hasPopupData) {\n                    this._createPopup();\n                }\n                this.container.classList.add(\"highlightAnnotation\");\n                return this.container;\n            }\n        }\n        class UnderlineAnnotationElement extends AnnotationElement {\n            constructor(parameters){\n                super(parameters, {\n                    isRenderable: true,\n                    ignoreBorder: true,\n                    createQuadrilaterals: true\n                });\n            }\n            render() {\n                if (!this.data.popupRef && this.hasPopupData) {\n                    this._createPopup();\n                }\n                this.container.classList.add(\"underlineAnnotation\");\n                return this.container;\n            }\n        }\n        class SquigglyAnnotationElement extends AnnotationElement {\n            constructor(parameters){\n                super(parameters, {\n                    isRenderable: true,\n                    ignoreBorder: true,\n                    createQuadrilaterals: true\n                });\n            }\n            render() {\n                if (!this.data.popupRef && this.hasPopupData) {\n                    this._createPopup();\n                }\n                this.container.classList.add(\"squigglyAnnotation\");\n                return this.container;\n            }\n        }\n        class StrikeOutAnnotationElement extends AnnotationElement {\n            constructor(parameters){\n                super(parameters, {\n                    isRenderable: true,\n                    ignoreBorder: true,\n                    createQuadrilaterals: true\n                });\n            }\n            render() {\n                if (!this.data.popupRef && this.hasPopupData) {\n                    this._createPopup();\n                }\n                this.container.classList.add(\"strikeoutAnnotation\");\n                return this.container;\n            }\n        }\n        class StampAnnotationElement extends AnnotationElement {\n            constructor(parameters){\n                super(parameters, {\n                    isRenderable: true,\n                    ignoreBorder: true\n                });\n            }\n            render() {\n                this.container.classList.add(\"stampAnnotation\");\n                if (!this.data.popupRef && this.hasPopupData) {\n                    this._createPopup();\n                }\n                return this.container;\n            }\n        }\n        class FileAttachmentAnnotationElement extends AnnotationElement {\n            #trigger;\n            constructor(parameters){\n                super(parameters, {\n                    isRenderable: true\n                });\n                this.#trigger = null;\n                const { filename, content } = this.data.file;\n                this.filename = (0, display_utils.getFilenameFromUrl)(filename, true);\n                this.content = content;\n                this.linkService.eventBus?.dispatch(\"fileattachmentannotation\", {\n                    source: this,\n                    filename,\n                    content\n                });\n            }\n            render() {\n                this.container.classList.add(\"fileAttachmentAnnotation\");\n                const { container, data } = this;\n                let trigger;\n                if (data.hasAppearance || data.fillAlpha === 0) {\n                    trigger = document.createElement(\"div\");\n                } else {\n                    trigger = document.createElement(\"img\");\n                    trigger.src = `${this.imageResourcesPath}annotation-${/paperclip/i.test(data.name) ? \"paperclip\" : \"pushpin\"}.svg`;\n                    if (data.fillAlpha && data.fillAlpha < 1) {\n                        trigger.style = `filter: opacity(${Math.round(data.fillAlpha * 100)}%);`;\n                    }\n                }\n                trigger.addEventListener(\"dblclick\", this.#download.bind(this));\n                this.#trigger = trigger;\n                const { isMac } = util.FeatureTest.platform;\n                container.addEventListener(\"keydown\", (evt)=>{\n                    if (evt.key === \"Enter\" && (isMac ? evt.metaKey : evt.ctrlKey)) {\n                        this.#download();\n                    }\n                });\n                if (!data.popupRef && this.hasPopupData) {\n                    this._createPopup();\n                } else {\n                    trigger.classList.add(\"popupTriggerArea\");\n                }\n                container.append(trigger);\n                return container;\n            }\n            getElementsToTriggerPopup() {\n                return this.#trigger;\n            }\n            addHighlightArea() {\n                this.container.classList.add(\"highlightArea\");\n            }\n            #download() {\n                this.downloadManager?.openOrDownloadData(this.content, this.filename);\n            }\n        }\n        class AnnotationLayer {\n            #accessibilityManager;\n            #annotationCanvasMap;\n            #editableAnnotations;\n            constructor({ div, accessibilityManager, annotationCanvasMap, page, viewport }){\n                this.#accessibilityManager = null;\n                this.#annotationCanvasMap = null;\n                this.#editableAnnotations = new Map();\n                this.div = div;\n                this.#accessibilityManager = accessibilityManager;\n                this.#annotationCanvasMap = annotationCanvasMap;\n                this.page = page;\n                this.viewport = viewport;\n                this.zIndex = 0;\n            }\n            #appendElement(element, id) {\n                const contentElement = element.firstChild || element;\n                contentElement.id = `${util.AnnotationPrefix}${id}`;\n                this.div.append(element);\n                this.#accessibilityManager?.moveElementInDOM(this.div, element, contentElement, false);\n            }\n            async render(params) {\n                const { annotations } = params;\n                const layer = this.div;\n                (0, display_utils.setLayerDimensions)(layer, this.viewport);\n                const popupToElements = new Map();\n                const elementParams = {\n                    data: null,\n                    layer,\n                    linkService: params.linkService,\n                    downloadManager: params.downloadManager,\n                    imageResourcesPath: params.imageResourcesPath || \"\",\n                    renderForms: params.renderForms !== false,\n                    svgFactory: new display_utils.DOMSVGFactory(),\n                    annotationStorage: params.annotationStorage || new annotation_storage.AnnotationStorage(),\n                    enableScripting: params.enableScripting === true,\n                    hasJSActions: params.hasJSActions,\n                    fieldObjects: params.fieldObjects,\n                    parent: this,\n                    elements: null\n                };\n                for (const data of annotations){\n                    if (data.noHTML) {\n                        continue;\n                    }\n                    const isPopupAnnotation = data.annotationType === util.AnnotationType.POPUP;\n                    if (!isPopupAnnotation) {\n                        const { width, height } = getRectDims(data.rect);\n                        if (width <= 0 || height <= 0) {\n                            continue;\n                        }\n                    } else {\n                        const elements = popupToElements.get(data.id);\n                        if (!elements) {\n                            continue;\n                        }\n                        elementParams.elements = elements;\n                    }\n                    elementParams.data = data;\n                    const element = AnnotationElementFactory.create(elementParams);\n                    if (!element.isRenderable) {\n                        continue;\n                    }\n                    if (!isPopupAnnotation && data.popupRef) {\n                        const elements = popupToElements.get(data.popupRef);\n                        if (!elements) {\n                            popupToElements.set(data.popupRef, [\n                                element\n                            ]);\n                        } else {\n                            elements.push(element);\n                        }\n                    }\n                    if (element.annotationEditorType > 0) {\n                        this.#editableAnnotations.set(element.data.id, element);\n                    }\n                    const rendered = element.render();\n                    if (data.hidden) {\n                        rendered.style.visibility = \"hidden\";\n                    }\n                    this.#appendElement(rendered, data.id);\n                }\n                this.#setAnnotationCanvasMap();\n            }\n            update({ viewport }) {\n                const layer = this.div;\n                this.viewport = viewport;\n                (0, display_utils.setLayerDimensions)(layer, {\n                    rotation: viewport.rotation\n                });\n                this.#setAnnotationCanvasMap();\n                layer.hidden = false;\n            }\n            #setAnnotationCanvasMap() {\n                if (!this.#annotationCanvasMap) {\n                    return;\n                }\n                const layer = this.div;\n                for (const [id, canvas] of this.#annotationCanvasMap){\n                    const element = layer.querySelector(`[data-annotation-id=\"${id}\"]`);\n                    if (!element) {\n                        continue;\n                    }\n                    const { firstChild } = element;\n                    if (!firstChild) {\n                        element.append(canvas);\n                    } else if (firstChild.nodeName === \"CANVAS\") {\n                        firstChild.replaceWith(canvas);\n                    } else {\n                        firstChild.before(canvas);\n                    }\n                }\n                this.#annotationCanvasMap.clear();\n            }\n            getEditableAnnotations() {\n                return Array.from(this.#editableAnnotations.values());\n            }\n            getEditableAnnotation(id) {\n                return this.#editableAnnotations.get(id);\n            }\n        }\n    /***/ },\n    /***/ 780: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_116517__)=>{\n        /* harmony export */ __nested_webpack_require_116517__.d(__nested_webpack_exports__, {\n            /* harmony export */ AnnotationStorage: ()=>/* binding */ AnnotationStorage,\n            /* harmony export */ PrintAnnotationStorage: ()=>/* binding */ PrintAnnotationStorage,\n            /* harmony export */ SerializableEmpty: ()=>/* binding */ SerializableEmpty\n        });\n        /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_116517__(266);\n        /* harmony import */ var _editor_editor_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_116517__(115);\n        /* harmony import */ var _shared_murmurhash3_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_116517__(825);\n        const SerializableEmpty = Object.freeze({\n            map: null,\n            hash: \"\",\n            transfer: undefined\n        });\n        class AnnotationStorage {\n            #modified;\n            #storage;\n            constructor(){\n                this.#modified = false;\n                this.#storage = new Map();\n                this.onSetModified = null;\n                this.onResetModified = null;\n                this.onAnnotationEditor = null;\n            }\n            getValue(key, defaultValue) {\n                const value = this.#storage.get(key);\n                if (value === undefined) {\n                    return defaultValue;\n                }\n                return Object.assign(defaultValue, value);\n            }\n            getRawValue(key) {\n                return this.#storage.get(key);\n            }\n            remove(key) {\n                this.#storage.delete(key);\n                if (this.#storage.size === 0) {\n                    this.resetModified();\n                }\n                if (typeof this.onAnnotationEditor === \"function\") {\n                    for (const value of this.#storage.values()){\n                        if (value instanceof _editor_editor_js__WEBPACK_IMPORTED_MODULE_1__.AnnotationEditor) {\n                            return;\n                        }\n                    }\n                    this.onAnnotationEditor(null);\n                }\n            }\n            setValue(key, value) {\n                const obj = this.#storage.get(key);\n                let modified = false;\n                if (obj !== undefined) {\n                    for (const [entry, val] of Object.entries(value)){\n                        if (obj[entry] !== val) {\n                            modified = true;\n                            obj[entry] = val;\n                        }\n                    }\n                } else {\n                    modified = true;\n                    this.#storage.set(key, value);\n                }\n                if (modified) {\n                    this.#setModified();\n                }\n                if (value instanceof _editor_editor_js__WEBPACK_IMPORTED_MODULE_1__.AnnotationEditor && typeof this.onAnnotationEditor === \"function\") {\n                    this.onAnnotationEditor(value.constructor._type);\n                }\n            }\n            has(key) {\n                return this.#storage.has(key);\n            }\n            getAll() {\n                return this.#storage.size > 0 ? (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.objectFromMap)(this.#storage) : null;\n            }\n            setAll(obj) {\n                for (const [key, val] of Object.entries(obj)){\n                    this.setValue(key, val);\n                }\n            }\n            get size() {\n                return this.#storage.size;\n            }\n            #setModified() {\n                if (!this.#modified) {\n                    this.#modified = true;\n                    if (typeof this.onSetModified === \"function\") {\n                        this.onSetModified();\n                    }\n                }\n            }\n            resetModified() {\n                if (this.#modified) {\n                    this.#modified = false;\n                    if (typeof this.onResetModified === \"function\") {\n                        this.onResetModified();\n                    }\n                }\n            }\n            get print() {\n                return new PrintAnnotationStorage(this);\n            }\n            get serializable() {\n                if (this.#storage.size === 0) {\n                    return SerializableEmpty;\n                }\n                const map = new Map(), hash = new _shared_murmurhash3_js__WEBPACK_IMPORTED_MODULE_2__.MurmurHash3_64(), transfer = [];\n                const context = Object.create(null);\n                let hasBitmap = false;\n                for (const [key, val] of this.#storage){\n                    const serialized = val instanceof _editor_editor_js__WEBPACK_IMPORTED_MODULE_1__.AnnotationEditor ? val.serialize(false, context) : val;\n                    if (serialized) {\n                        map.set(key, serialized);\n                        hash.update(`${key}:${JSON.stringify(serialized)}`);\n                        hasBitmap ||= !!serialized.bitmap;\n                    }\n                }\n                if (hasBitmap) {\n                    for (const value of map.values()){\n                        if (value.bitmap) {\n                            transfer.push(value.bitmap);\n                        }\n                    }\n                }\n                return map.size > 0 ? {\n                    map,\n                    hash: hash.hexdigest(),\n                    transfer\n                } : SerializableEmpty;\n            }\n        }\n        class PrintAnnotationStorage extends AnnotationStorage {\n            #serializable;\n            constructor(parent){\n                super();\n                const { map, hash, transfer } = parent.serializable;\n                const clone = structuredClone(map, transfer ? {\n                    transfer\n                } : null);\n                this.#serializable = {\n                    map: clone,\n                    hash,\n                    transfer\n                };\n            }\n            get print() {\n                (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Should not call PrintAnnotationStorage.print\");\n            }\n            get serializable() {\n                return this.#serializable;\n            }\n        }\n    /***/ },\n    /***/ 406: /***/ (__webpack_module__, __nested_webpack_exports__, __nested_webpack_require_122875__)=>{\n        __nested_webpack_require_122875__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__)=>{\n            try {\n                /* harmony export */ __nested_webpack_require_122875__.d(__nested_webpack_exports__, {\n                    /* harmony export */ PDFDataRangeTransport: ()=>/* binding */ PDFDataRangeTransport,\n                    /* harmony export */ PDFWorker: ()=>/* binding */ PDFWorker,\n                    /* harmony export */ build: ()=>/* binding */ build,\n                    /* harmony export */ getDocument: ()=>/* binding */ getDocument,\n                    /* harmony export */ version: ()=>/* binding */ version\n                });\n                /* unused harmony exports DefaultCanvasFactory, DefaultCMapReaderFactory, DefaultFilterFactory, DefaultStandardFontDataFactory, LoopbackPort, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorkerUtil, RenderTask */ /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_122875__(266);\n                /* harmony import */ var _annotation_storage_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_122875__(780);\n                /* harmony import */ var _display_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_122875__(473);\n                /* harmony import */ var _font_loader_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_122875__(742);\n                /* harmony import */ var display_node_utils__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_122875__(738);\n                /* harmony import */ var _canvas_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_122875__(250);\n                /* harmony import */ var _worker_options_js__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_122875__(368);\n                /* harmony import */ var _shared_message_handler_js__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_122875__(694);\n                /* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_122875__(472);\n                /* harmony import */ var _optional_content_config_js__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_122875__(890);\n                /* harmony import */ var _transport_stream_js__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_122875__(92);\n                /* harmony import */ var display_fetch_stream__WEBPACK_IMPORTED_MODULE_11__ = __nested_webpack_require_122875__(171);\n                /* harmony import */ var display_network__WEBPACK_IMPORTED_MODULE_12__ = __nested_webpack_require_122875__(474);\n                /* harmony import */ var display_node_stream__WEBPACK_IMPORTED_MODULE_13__ = __nested_webpack_require_122875__(498);\n                /* harmony import */ var _xfa_text_js__WEBPACK_IMPORTED_MODULE_14__ = __nested_webpack_require_122875__(521);\n                var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([\n                    display_node_utils__WEBPACK_IMPORTED_MODULE_4__,\n                    display_node_stream__WEBPACK_IMPORTED_MODULE_13__\n                ]);\n                [display_node_utils__WEBPACK_IMPORTED_MODULE_4__, display_node_stream__WEBPACK_IMPORTED_MODULE_13__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__;\n                const DEFAULT_RANGE_CHUNK_SIZE = 65536;\n                const RENDERING_CANCELLED_TIMEOUT = 100;\n                const DELAYED_CLEANUP_TIMEOUT = 5000;\n                const DefaultCanvasFactory = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS ? display_node_utils__WEBPACK_IMPORTED_MODULE_4__.NodeCanvasFactory : _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.DOMCanvasFactory;\n                const DefaultCMapReaderFactory = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS ? display_node_utils__WEBPACK_IMPORTED_MODULE_4__.NodeCMapReaderFactory : _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.DOMCMapReaderFactory;\n                const DefaultFilterFactory = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS ? display_node_utils__WEBPACK_IMPORTED_MODULE_4__.NodeFilterFactory : _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.DOMFilterFactory;\n                const DefaultStandardFontDataFactory = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS ? display_node_utils__WEBPACK_IMPORTED_MODULE_4__.NodeStandardFontDataFactory : _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.DOMStandardFontDataFactory;\n                function getDocument(src) {\n                    if (typeof src === \"string\" || src instanceof URL) {\n                        src = {\n                            url: src\n                        };\n                    } else if ((0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isArrayBuffer)(src)) {\n                        src = {\n                            data: src\n                        };\n                    }\n                    if (typeof src !== \"object\") {\n                        throw new Error(\"Invalid parameter in getDocument, need parameter object.\");\n                    }\n                    if (!src.url && !src.data && !src.range) {\n                        throw new Error(\"Invalid parameter object: need either .data, .range or .url\");\n                    }\n                    const task = new PDFDocumentLoadingTask();\n                    const { docId } = task;\n                    const url = src.url ? getUrlProp(src.url) : null;\n                    const data = src.data ? getDataProp(src.data) : null;\n                    const httpHeaders = src.httpHeaders || null;\n                    const withCredentials = src.withCredentials === true;\n                    const password = src.password ?? null;\n                    const rangeTransport = src.range instanceof PDFDataRangeTransport ? src.range : null;\n                    const rangeChunkSize = Number.isInteger(src.rangeChunkSize) && src.rangeChunkSize > 0 ? src.rangeChunkSize : DEFAULT_RANGE_CHUNK_SIZE;\n                    let worker = src.worker instanceof PDFWorker ? src.worker : null;\n                    const verbosity = src.verbosity;\n                    const docBaseUrl = typeof src.docBaseUrl === \"string\" && !(0, _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.isDataScheme)(src.docBaseUrl) ? src.docBaseUrl : null;\n                    const cMapUrl = typeof src.cMapUrl === \"string\" ? src.cMapUrl : null;\n                    const cMapPacked = src.cMapPacked !== false;\n                    const CMapReaderFactory = src.CMapReaderFactory || DefaultCMapReaderFactory;\n                    const standardFontDataUrl = typeof src.standardFontDataUrl === \"string\" ? src.standardFontDataUrl : null;\n                    const StandardFontDataFactory = src.StandardFontDataFactory || DefaultStandardFontDataFactory;\n                    const ignoreErrors = src.stopAtErrors !== true;\n                    const maxImageSize = Number.isInteger(src.maxImageSize) && src.maxImageSize > -1 ? src.maxImageSize : -1;\n                    const isEvalSupported = src.isEvalSupported !== false;\n                    const isOffscreenCanvasSupported = typeof src.isOffscreenCanvasSupported === \"boolean\" ? src.isOffscreenCanvasSupported : !_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS;\n                    const canvasMaxAreaInBytes = Number.isInteger(src.canvasMaxAreaInBytes) ? src.canvasMaxAreaInBytes : -1;\n                    const disableFontFace = typeof src.disableFontFace === \"boolean\" ? src.disableFontFace : _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS;\n                    const fontExtraProperties = src.fontExtraProperties === true;\n                    const enableXfa = src.enableXfa === true;\n                    const ownerDocument = src.ownerDocument || globalThis.document;\n                    const disableRange = src.disableRange === true;\n                    const disableStream = src.disableStream === true;\n                    const disableAutoFetch = src.disableAutoFetch === true;\n                    const pdfBug = src.pdfBug === true;\n                    const length = rangeTransport ? rangeTransport.length : src.length ?? NaN;\n                    const useSystemFonts = typeof src.useSystemFonts === \"boolean\" ? src.useSystemFonts : !_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS && !disableFontFace;\n                    const useWorkerFetch = typeof src.useWorkerFetch === \"boolean\" ? src.useWorkerFetch : CMapReaderFactory === _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.DOMCMapReaderFactory && StandardFontDataFactory === _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.DOMStandardFontDataFactory && cMapUrl && standardFontDataUrl && (0, _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.isValidFetchUrl)(cMapUrl, document.baseURI) && (0, _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.isValidFetchUrl)(standardFontDataUrl, document.baseURI);\n                    const canvasFactory = src.canvasFactory || new DefaultCanvasFactory({\n                        ownerDocument\n                    });\n                    const filterFactory = src.filterFactory || new DefaultFilterFactory({\n                        docId,\n                        ownerDocument\n                    });\n                    const styleElement = null;\n                    (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.setVerbosityLevel)(verbosity);\n                    const transportFactory = {\n                        canvasFactory,\n                        filterFactory\n                    };\n                    if (!useWorkerFetch) {\n                        transportFactory.cMapReaderFactory = new CMapReaderFactory({\n                            baseUrl: cMapUrl,\n                            isCompressed: cMapPacked\n                        });\n                        transportFactory.standardFontDataFactory = new StandardFontDataFactory({\n                            baseUrl: standardFontDataUrl\n                        });\n                    }\n                    if (!worker) {\n                        const workerParams = {\n                            verbosity,\n                            port: _worker_options_js__WEBPACK_IMPORTED_MODULE_6__.GlobalWorkerOptions.workerPort\n                        };\n                        worker = workerParams.port ? PDFWorker.fromPort(workerParams) : new PDFWorker(workerParams);\n                        task._worker = worker;\n                    }\n                    const fetchDocParams = {\n                        docId,\n                        apiVersion: \"4.0.379\",\n                        data,\n                        password,\n                        disableAutoFetch,\n                        rangeChunkSize,\n                        length,\n                        docBaseUrl,\n                        enableXfa,\n                        evaluatorOptions: {\n                            maxImageSize,\n                            disableFontFace,\n                            ignoreErrors,\n                            isEvalSupported,\n                            isOffscreenCanvasSupported,\n                            canvasMaxAreaInBytes,\n                            fontExtraProperties,\n                            useSystemFonts,\n                            cMapUrl: useWorkerFetch ? cMapUrl : null,\n                            standardFontDataUrl: useWorkerFetch ? standardFontDataUrl : null\n                        }\n                    };\n                    const transportParams = {\n                        ignoreErrors,\n                        isEvalSupported,\n                        disableFontFace,\n                        fontExtraProperties,\n                        enableXfa,\n                        ownerDocument,\n                        disableAutoFetch,\n                        pdfBug,\n                        styleElement\n                    };\n                    worker.promise.then(function() {\n                        if (task.destroyed) {\n                            throw new Error(\"Loading aborted\");\n                        }\n                        const workerIdPromise = _fetchDocument(worker, fetchDocParams);\n                        const networkStreamPromise = new Promise(function(resolve) {\n                            let networkStream;\n                            if (rangeTransport) {\n                                networkStream = new _transport_stream_js__WEBPACK_IMPORTED_MODULE_10__.PDFDataTransportStream({\n                                    length,\n                                    initialData: rangeTransport.initialData,\n                                    progressiveDone: rangeTransport.progressiveDone,\n                                    contentDispositionFilename: rangeTransport.contentDispositionFilename,\n                                    disableRange,\n                                    disableStream\n                                }, rangeTransport);\n                            } else if (!data) {\n                                const createPDFNetworkStream = (params)=>{\n                                    if (_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS) {\n                                        return new display_node_stream__WEBPACK_IMPORTED_MODULE_13__.PDFNodeStream(params);\n                                    }\n                                    return (0, _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.isValidFetchUrl)(params.url) ? new display_fetch_stream__WEBPACK_IMPORTED_MODULE_11__.PDFFetchStream(params) : new display_network__WEBPACK_IMPORTED_MODULE_12__.PDFNetworkStream(params);\n                                };\n                                networkStream = createPDFNetworkStream({\n                                    url,\n                                    length,\n                                    httpHeaders,\n                                    withCredentials,\n                                    rangeChunkSize,\n                                    disableRange,\n                                    disableStream\n                                });\n                            }\n                            resolve(networkStream);\n                        });\n                        return Promise.all([\n                            workerIdPromise,\n                            networkStreamPromise\n                        ]).then(function([workerId, networkStream]) {\n                            if (task.destroyed) {\n                                throw new Error(\"Loading aborted\");\n                            }\n                            const messageHandler = new _shared_message_handler_js__WEBPACK_IMPORTED_MODULE_7__.MessageHandler(docId, workerId, worker.port);\n                            const transport = new WorkerTransport(messageHandler, task, networkStream, transportParams, transportFactory);\n                            task._transport = transport;\n                            messageHandler.send(\"Ready\", null);\n                        });\n                    }).catch(task._capability.reject);\n                    return task;\n                }\n                async function _fetchDocument(worker, source) {\n                    if (worker.destroyed) {\n                        throw new Error(\"Worker was destroyed\");\n                    }\n                    const workerId = await worker.messageHandler.sendWithPromise(\"GetDocRequest\", source, source.data ? [\n                        source.data.buffer\n                    ] : null);\n                    if (worker.destroyed) {\n                        throw new Error(\"Worker was destroyed\");\n                    }\n                    return workerId;\n                }\n                function getUrlProp(val) {\n                    if (val instanceof URL) {\n                        return val.href;\n                    }\n                    try {\n                        return new URL(val, window.location).href;\n                    } catch  {\n                        if (_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS && typeof val === \"string\") {\n                            return val;\n                        }\n                    }\n                    throw new Error(\"Invalid PDF url data: \" + \"either string or URL-object is expected in the url property.\");\n                }\n                function getDataProp(val) {\n                    if (_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS && typeof Buffer !== \"undefined\" && val instanceof Buffer) {\n                        throw new Error(\"Please provide binary data as `Uint8Array`, rather than `Buffer`.\");\n                    }\n                    if (val instanceof Uint8Array && val.byteLength === val.buffer.byteLength) {\n                        return val;\n                    }\n                    if (typeof val === \"string\") {\n                        return (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.stringToBytes)(val);\n                    }\n                    if (typeof val === \"object\" && !isNaN(val?.length) || (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isArrayBuffer)(val)) {\n                        return new Uint8Array(val);\n                    }\n                    throw new Error(\"Invalid PDF binary data: either TypedArray, \" + \"string, or array-like object is expected in the data property.\");\n                }\n                class PDFDocumentLoadingTask {\n                    static #docId = 0;\n                    constructor(){\n                        this._capability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                        this._transport = null;\n                        this._worker = null;\n                        this.docId = `d${PDFDocumentLoadingTask.#docId++}`;\n                        this.destroyed = false;\n                        this.onPassword = null;\n                        this.onProgress = null;\n                    }\n                    get promise() {\n                        return this._capability.promise;\n                    }\n                    async destroy() {\n                        this.destroyed = true;\n                        try {\n                            if (this._worker?.port) {\n                                this._worker._pendingDestroy = true;\n                            }\n                            await this._transport?.destroy();\n                        } catch (ex) {\n                            if (this._worker?.port) {\n                                delete this._worker._pendingDestroy;\n                            }\n                            throw ex;\n                        }\n                        this._transport = null;\n                        if (this._worker) {\n                            this._worker.destroy();\n                            this._worker = null;\n                        }\n                    }\n                }\n                class PDFDataRangeTransport {\n                    constructor(length, initialData, progressiveDone = false, contentDispositionFilename = null){\n                        this.length = length;\n                        this.initialData = initialData;\n                        this.progressiveDone = progressiveDone;\n                        this.contentDispositionFilename = contentDispositionFilename;\n                        this._rangeListeners = [];\n                        this._progressListeners = [];\n                        this._progressiveReadListeners = [];\n                        this._progressiveDoneListeners = [];\n                        this._readyCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                    }\n                    addRangeListener(listener) {\n                        this._rangeListeners.push(listener);\n                    }\n                    addProgressListener(listener) {\n                        this._progressListeners.push(listener);\n                    }\n                    addProgressiveReadListener(listener) {\n                        this._progressiveReadListeners.push(listener);\n                    }\n                    addProgressiveDoneListener(listener) {\n                        this._progressiveDoneListeners.push(listener);\n                    }\n                    onDataRange(begin, chunk) {\n                        for (const listener of this._rangeListeners){\n                            listener(begin, chunk);\n                        }\n                    }\n                    onDataProgress(loaded, total) {\n                        this._readyCapability.promise.then(()=>{\n                            for (const listener of this._progressListeners){\n                                listener(loaded, total);\n                            }\n                        });\n                    }\n                    onDataProgressiveRead(chunk) {\n                        this._readyCapability.promise.then(()=>{\n                            for (const listener of this._progressiveReadListeners){\n                                listener(chunk);\n                            }\n                        });\n                    }\n                    onDataProgressiveDone() {\n                        this._readyCapability.promise.then(()=>{\n                            for (const listener of this._progressiveDoneListeners){\n                                listener();\n                            }\n                        });\n                    }\n                    transportReady() {\n                        this._readyCapability.resolve();\n                    }\n                    requestDataRange(begin, end) {\n                        (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Abstract method PDFDataRangeTransport.requestDataRange\");\n                    }\n                    abort() {}\n                }\n                class PDFDocumentProxy {\n                    constructor(pdfInfo, transport){\n                        this._pdfInfo = pdfInfo;\n                        this._transport = transport;\n                    }\n                    get annotationStorage() {\n                        return this._transport.annotationStorage;\n                    }\n                    get filterFactory() {\n                        return this._transport.filterFactory;\n                    }\n                    get numPages() {\n                        return this._pdfInfo.numPages;\n                    }\n                    get fingerprints() {\n                        return this._pdfInfo.fingerprints;\n                    }\n                    get isPureXfa() {\n                        return (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"isPureXfa\", !!this._transport._htmlForXfa);\n                    }\n                    get allXfaHtml() {\n                        return this._transport._htmlForXfa;\n                    }\n                    getPage(pageNumber) {\n                        return this._transport.getPage(pageNumber);\n                    }\n                    getPageIndex(ref) {\n                        return this._transport.getPageIndex(ref);\n                    }\n                    getDestinations() {\n                        return this._transport.getDestinations();\n                    }\n                    getDestination(id) {\n                        return this._transport.getDestination(id);\n                    }\n                    getPageLabels() {\n                        return this._transport.getPageLabels();\n                    }\n                    getPageLayout() {\n                        return this._transport.getPageLayout();\n                    }\n                    getPageMode() {\n                        return this._transport.getPageMode();\n                    }\n                    getViewerPreferences() {\n                        return this._transport.getViewerPreferences();\n                    }\n                    getOpenAction() {\n                        return this._transport.getOpenAction();\n                    }\n                    getAttachments() {\n                        return this._transport.getAttachments();\n                    }\n                    getJSActions() {\n                        return this._transport.getDocJSActions();\n                    }\n                    getOutline() {\n                        return this._transport.getOutline();\n                    }\n                    getOptionalContentConfig() {\n                        return this._transport.getOptionalContentConfig();\n                    }\n                    getPermissions() {\n                        return this._transport.getPermissions();\n                    }\n                    getMetadata() {\n                        return this._transport.getMetadata();\n                    }\n                    getMarkInfo() {\n                        return this._transport.getMarkInfo();\n                    }\n                    getData() {\n                        return this._transport.getData();\n                    }\n                    saveDocument() {\n                        return this._transport.saveDocument();\n                    }\n                    getDownloadInfo() {\n                        return this._transport.downloadInfoCapability.promise;\n                    }\n                    cleanup(keepLoadedFonts = false) {\n                        return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);\n                    }\n                    destroy() {\n                        return this.loadingTask.destroy();\n                    }\n                    get loadingParams() {\n                        return this._transport.loadingParams;\n                    }\n                    get loadingTask() {\n                        return this._transport.loadingTask;\n                    }\n                    getFieldObjects() {\n                        return this._transport.getFieldObjects();\n                    }\n                    hasJSActions() {\n                        return this._transport.hasJSActions();\n                    }\n                    getCalculationOrderIds() {\n                        return this._transport.getCalculationOrderIds();\n                    }\n                }\n                class PDFPageProxy {\n                    #delayedCleanupTimeout;\n                    #pendingCleanup;\n                    constructor(pageIndex, pageInfo, transport, pdfBug = false){\n                        this.#delayedCleanupTimeout = null;\n                        this.#pendingCleanup = false;\n                        this._pageIndex = pageIndex;\n                        this._pageInfo = pageInfo;\n                        this._transport = transport;\n                        this._stats = pdfBug ? new _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.StatTimer() : null;\n                        this._pdfBug = pdfBug;\n                        this.commonObjs = transport.commonObjs;\n                        this.objs = new PDFObjects();\n                        this._maybeCleanupAfterRender = false;\n                        this._intentStates = new Map();\n                        this.destroyed = false;\n                    }\n                    get pageNumber() {\n                        return this._pageIndex + 1;\n                    }\n                    get rotate() {\n                        return this._pageInfo.rotate;\n                    }\n                    get ref() {\n                        return this._pageInfo.ref;\n                    }\n                    get userUnit() {\n                        return this._pageInfo.userUnit;\n                    }\n                    get view() {\n                        return this._pageInfo.view;\n                    }\n                    getViewport({ scale, rotation = this.rotate, offsetX = 0, offsetY = 0, dontFlip = false } = {}) {\n                        return new _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.PageViewport({\n                            viewBox: this.view,\n                            scale,\n                            rotation,\n                            offsetX,\n                            offsetY,\n                            dontFlip\n                        });\n                    }\n                    getAnnotations({ intent = \"display\" } = {}) {\n                        const intentArgs = this._transport.getRenderingIntent(intent);\n                        return this._transport.getAnnotations(this._pageIndex, intentArgs.renderingIntent);\n                    }\n                    getJSActions() {\n                        return this._transport.getPageJSActions(this._pageIndex);\n                    }\n                    get filterFactory() {\n                        return this._transport.filterFactory;\n                    }\n                    get isPureXfa() {\n                        return (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"isPureXfa\", !!this._transport._htmlForXfa);\n                    }\n                    async getXfa() {\n                        return this._transport._htmlForXfa?.children[this._pageIndex] || null;\n                    }\n                    render({ canvasContext, viewport, intent = \"display\", annotationMode = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationMode.ENABLE, transform = null, background = null, optionalContentConfigPromise = null, annotationCanvasMap = null, pageColors = null, printAnnotationStorage = null }) {\n                        this._stats?.time(\"Overall\");\n                        const intentArgs = this._transport.getRenderingIntent(intent, annotationMode, printAnnotationStorage);\n                        this.#pendingCleanup = false;\n                        this.#abortDelayedCleanup();\n                        if (!optionalContentConfigPromise) {\n                            optionalContentConfigPromise = this._transport.getOptionalContentConfig();\n                        }\n                        let intentState = this._intentStates.get(intentArgs.cacheKey);\n                        if (!intentState) {\n                            intentState = Object.create(null);\n                            this._intentStates.set(intentArgs.cacheKey, intentState);\n                        }\n                        if (intentState.streamReaderCancelTimeout) {\n                            clearTimeout(intentState.streamReaderCancelTimeout);\n                            intentState.streamReaderCancelTimeout = null;\n                        }\n                        const intentPrint = !!(intentArgs.renderingIntent & _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.RenderingIntentFlag.PRINT);\n                        if (!intentState.displayReadyCapability) {\n                            intentState.displayReadyCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                            intentState.operatorList = {\n                                fnArray: [],\n                                argsArray: [],\n                                lastChunk: false,\n                                separateAnnots: null\n                            };\n                            this._stats?.time(\"Page Request\");\n                            this._pumpOperatorList(intentArgs);\n                        }\n                        const complete = (error)=>{\n                            intentState.renderTasks.delete(internalRenderTask);\n                            if (this._maybeCleanupAfterRender || intentPrint) {\n                                this.#pendingCleanup = true;\n                            }\n                            this.#tryCleanup(!intentPrint);\n                            if (error) {\n                                internalRenderTask.capability.reject(error);\n                                this._abortOperatorList({\n                                    intentState,\n                                    reason: error instanceof Error ? error : new Error(error)\n                                });\n                            } else {\n                                internalRenderTask.capability.resolve();\n                            }\n                            this._stats?.timeEnd(\"Rendering\");\n                            this._stats?.timeEnd(\"Overall\");\n                        };\n                        const internalRenderTask = new InternalRenderTask({\n                            callback: complete,\n                            params: {\n                                canvasContext,\n                                viewport,\n                                transform,\n                                background\n                            },\n                            objs: this.objs,\n                            commonObjs: this.commonObjs,\n                            annotationCanvasMap,\n                            operatorList: intentState.operatorList,\n                            pageIndex: this._pageIndex,\n                            canvasFactory: this._transport.canvasFactory,\n                            filterFactory: this._transport.filterFactory,\n                            useRequestAnimationFrame: !intentPrint,\n                            pdfBug: this._pdfBug,\n                            pageColors\n                        });\n                        (intentState.renderTasks ||= new Set()).add(internalRenderTask);\n                        const renderTask = internalRenderTask.task;\n                        Promise.all([\n                            intentState.displayReadyCapability.promise,\n                            optionalContentConfigPromise\n                        ]).then(([transparency, optionalContentConfig])=>{\n                            if (this.destroyed) {\n                                complete();\n                                return;\n                            }\n                            this._stats?.time(\"Rendering\");\n                            internalRenderTask.initializeGraphics({\n                                transparency,\n                                optionalContentConfig\n                            });\n                            internalRenderTask.operatorListChanged();\n                        }).catch(complete);\n                        return renderTask;\n                    }\n                    getOperatorList({ intent = \"display\", annotationMode = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationMode.ENABLE, printAnnotationStorage = null } = {}) {\n                        function operatorListChanged() {\n                            if (intentState.operatorList.lastChunk) {\n                                intentState.opListReadCapability.resolve(intentState.operatorList);\n                                intentState.renderTasks.delete(opListTask);\n                            }\n                        }\n                        const intentArgs = this._transport.getRenderingIntent(intent, annotationMode, printAnnotationStorage, true);\n                        let intentState = this._intentStates.get(intentArgs.cacheKey);\n                        if (!intentState) {\n                            intentState = Object.create(null);\n                            this._intentStates.set(intentArgs.cacheKey, intentState);\n                        }\n                        let opListTask;\n                        if (!intentState.opListReadCapability) {\n                            opListTask = Object.create(null);\n                            opListTask.operatorListChanged = operatorListChanged;\n                            intentState.opListReadCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                            (intentState.renderTasks ||= new Set()).add(opListTask);\n                            intentState.operatorList = {\n                                fnArray: [],\n                                argsArray: [],\n                                lastChunk: false,\n                                separateAnnots: null\n                            };\n                            this._stats?.time(\"Page Request\");\n                            this._pumpOperatorList(intentArgs);\n                        }\n                        return intentState.opListReadCapability.promise;\n                    }\n                    streamTextContent({ includeMarkedContent = false, disableNormalization = false } = {}) {\n                        const TEXT_CONTENT_CHUNK_SIZE = 100;\n                        return this._transport.messageHandler.sendWithStream(\"GetTextContent\", {\n                            pageIndex: this._pageIndex,\n                            includeMarkedContent: includeMarkedContent === true,\n                            disableNormalization: disableNormalization === true\n                        }, {\n                            highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\n                            size (textContent) {\n                                return textContent.items.length;\n                            }\n                        });\n                    }\n                    getTextContent(params = {}) {\n                        if (this._transport._htmlForXfa) {\n                            return this.getXfa().then((xfa)=>{\n                                return _xfa_text_js__WEBPACK_IMPORTED_MODULE_14__.XfaText.textContent(xfa);\n                            });\n                        }\n                        const readableStream = this.streamTextContent(params);\n                        return new Promise(function(resolve, reject) {\n                            function pump() {\n                                reader.read().then(function({ value, done }) {\n                                    if (done) {\n                                        resolve(textContent);\n                                        return;\n                                    }\n                                    Object.assign(textContent.styles, value.styles);\n                                    textContent.items.push(...value.items);\n                                    pump();\n                                }, reject);\n                            }\n                            const reader = readableStream.getReader();\n                            const textContent = {\n                                items: [],\n                                styles: Object.create(null)\n                            };\n                            pump();\n                        });\n                    }\n                    getStructTree() {\n                        return this._transport.getStructTree(this._pageIndex);\n                    }\n                    _destroy() {\n                        this.destroyed = true;\n                        const waitOn = [];\n                        for (const intentState of this._intentStates.values()){\n                            this._abortOperatorList({\n                                intentState,\n                                reason: new Error(\"Page was destroyed.\"),\n                                force: true\n                            });\n                            if (intentState.opListReadCapability) {\n                                continue;\n                            }\n                            for (const internalRenderTask of intentState.renderTasks){\n                                waitOn.push(internalRenderTask.completed);\n                                internalRenderTask.cancel();\n                            }\n                        }\n                        this.objs.clear();\n                        this.#pendingCleanup = false;\n                        this.#abortDelayedCleanup();\n                        return Promise.all(waitOn);\n                    }\n                    cleanup(resetStats = false) {\n                        this.#pendingCleanup = true;\n                        const success = this.#tryCleanup(false);\n                        if (resetStats && success) {\n                            this._stats &&= new _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.StatTimer();\n                        }\n                        return success;\n                    }\n                    #tryCleanup(delayed = false) {\n                        this.#abortDelayedCleanup();\n                        if (!this.#pendingCleanup || this.destroyed) {\n                            return false;\n                        }\n                        if (delayed) {\n                            this.#delayedCleanupTimeout = setTimeout(()=>{\n                                this.#delayedCleanupTimeout = null;\n                                this.#tryCleanup(false);\n                            }, DELAYED_CLEANUP_TIMEOUT);\n                            return false;\n                        }\n                        for (const { renderTasks, operatorList } of this._intentStates.values()){\n                            if (renderTasks.size > 0 || !operatorList.lastChunk) {\n                                return false;\n                            }\n                        }\n                        this._intentStates.clear();\n                        this.objs.clear();\n                        this.#pendingCleanup = false;\n                        return true;\n                    }\n                    #abortDelayedCleanup() {\n                        if (this.#delayedCleanupTimeout) {\n                            clearTimeout(this.#delayedCleanupTimeout);\n                            this.#delayedCleanupTimeout = null;\n                        }\n                    }\n                    _startRenderPage(transparency, cacheKey) {\n                        const intentState = this._intentStates.get(cacheKey);\n                        if (!intentState) {\n                            return;\n                        }\n                        this._stats?.timeEnd(\"Page Request\");\n                        intentState.displayReadyCapability?.resolve(transparency);\n                    }\n                    _renderPageChunk(operatorListChunk, intentState) {\n                        for(let i = 0, ii = operatorListChunk.length; i < ii; i++){\n                            intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\n                            intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\n                        }\n                        intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\n                        intentState.operatorList.separateAnnots = operatorListChunk.separateAnnots;\n                        for (const internalRenderTask of intentState.renderTasks){\n                            internalRenderTask.operatorListChanged();\n                        }\n                        if (operatorListChunk.lastChunk) {\n                            this.#tryCleanup(true);\n                        }\n                    }\n                    _pumpOperatorList({ renderingIntent, cacheKey, annotationStorageSerializable }) {\n                        const { map, transfer } = annotationStorageSerializable;\n                        const readableStream = this._transport.messageHandler.sendWithStream(\"GetOperatorList\", {\n                            pageIndex: this._pageIndex,\n                            intent: renderingIntent,\n                            cacheKey,\n                            annotationStorage: map\n                        }, transfer);\n                        const reader = readableStream.getReader();\n                        const intentState = this._intentStates.get(cacheKey);\n                        intentState.streamReader = reader;\n                        const pump = ()=>{\n                            reader.read().then(({ value, done })=>{\n                                if (done) {\n                                    intentState.streamReader = null;\n                                    return;\n                                }\n                                if (this._transport.destroyed) {\n                                    return;\n                                }\n                                this._renderPageChunk(value, intentState);\n                                pump();\n                            }, (reason)=>{\n                                intentState.streamReader = null;\n                                if (this._transport.destroyed) {\n                                    return;\n                                }\n                                if (intentState.operatorList) {\n                                    intentState.operatorList.lastChunk = true;\n                                    for (const internalRenderTask of intentState.renderTasks){\n                                        internalRenderTask.operatorListChanged();\n                                    }\n                                    this.#tryCleanup(true);\n                                }\n                                if (intentState.displayReadyCapability) {\n                                    intentState.displayReadyCapability.reject(reason);\n                                } else if (intentState.opListReadCapability) {\n                                    intentState.opListReadCapability.reject(reason);\n                                } else {\n                                    throw reason;\n                                }\n                            });\n                        };\n                        pump();\n                    }\n                    _abortOperatorList({ intentState, reason, force = false }) {\n                        if (!intentState.streamReader) {\n                            return;\n                        }\n                        if (intentState.streamReaderCancelTimeout) {\n                            clearTimeout(intentState.streamReaderCancelTimeout);\n                            intentState.streamReaderCancelTimeout = null;\n                        }\n                        if (!force) {\n                            if (intentState.renderTasks.size > 0) {\n                                return;\n                            }\n                            if (reason instanceof _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.RenderingCancelledException) {\n                                let delay = RENDERING_CANCELLED_TIMEOUT;\n                                if (reason.extraDelay > 0 && reason.extraDelay < 1000) {\n                                    delay += reason.extraDelay;\n                                }\n                                intentState.streamReaderCancelTimeout = setTimeout(()=>{\n                                    intentState.streamReaderCancelTimeout = null;\n                                    this._abortOperatorList({\n                                        intentState,\n                                        reason,\n                                        force: true\n                                    });\n                                }, delay);\n                                return;\n                            }\n                        }\n                        intentState.streamReader.cancel(new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException(reason.message)).catch(()=>{});\n                        intentState.streamReader = null;\n                        if (this._transport.destroyed) {\n                            return;\n                        }\n                        for (const [curCacheKey, curIntentState] of this._intentStates){\n                            if (curIntentState === intentState) {\n                                this._intentStates.delete(curCacheKey);\n                                break;\n                            }\n                        }\n                        this.cleanup();\n                    }\n                    get stats() {\n                        return this._stats;\n                    }\n                }\n                class LoopbackPort {\n                    #listeners;\n                    #deferred;\n                    postMessage(obj, transfer) {\n                        const event = {\n                            data: structuredClone(obj, transfer ? {\n                                transfer\n                            } : null)\n                        };\n                        this.#deferred.then(()=>{\n                            for (const listener of this.#listeners){\n                                listener.call(this, event);\n                            }\n                        });\n                    }\n                    addEventListener(name, listener) {\n                        this.#listeners.add(listener);\n                    }\n                    removeEventListener(name, listener) {\n                        this.#listeners.delete(listener);\n                    }\n                    terminate() {\n                        this.#listeners.clear();\n                    }\n                    constructor(){\n                        this.#listeners = new Set();\n                        this.#deferred = Promise.resolve();\n                    }\n                }\n                const PDFWorkerUtil = {\n                    isWorkerDisabled: false,\n                    fakeWorkerId: 0\n                };\n                {\n                    if (_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS) {\n                        PDFWorkerUtil.isWorkerDisabled = true;\n                        _worker_options_js__WEBPACK_IMPORTED_MODULE_6__.GlobalWorkerOptions.workerSrc ||= \"./pdf.worker.mjs\";\n                    }\n                    PDFWorkerUtil.isSameOrigin = function(baseUrl, otherUrl) {\n                        let base;\n                        try {\n                            base = new URL(baseUrl);\n                            if (!base.origin || base.origin === \"null\") {\n                                return false;\n                            }\n                        } catch  {\n                            return false;\n                        }\n                        const other = new URL(otherUrl, base);\n                        return base.origin === other.origin;\n                    };\n                    PDFWorkerUtil.createCDNWrapper = function(url) {\n                        const wrapper = `await import(\"${url}\");`;\n                        return URL.createObjectURL(new Blob([\n                            wrapper\n                        ], {\n                            type: \"text/javascript\"\n                        }));\n                    };\n                }\n                class PDFWorker {\n                    static #workerPorts;\n                    constructor({ name = null, port = null, verbosity = (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.getVerbosityLevel)() } = {}){\n                        this.name = name;\n                        this.destroyed = false;\n                        this.verbosity = verbosity;\n                        this._readyCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                        this._port = null;\n                        this._webWorker = null;\n                        this._messageHandler = null;\n                        if (port) {\n                            if (PDFWorker.#workerPorts?.has(port)) {\n                                throw new Error(\"Cannot use more than one PDFWorker per port.\");\n                            }\n                            (PDFWorker.#workerPorts ||= new WeakMap()).set(port, this);\n                            this._initializeFromPort(port);\n                            return;\n                        }\n                        this._initialize();\n                    }\n                    get promise() {\n                        return this._readyCapability.promise;\n                    }\n                    get port() {\n                        return this._port;\n                    }\n                    get messageHandler() {\n                        return this._messageHandler;\n                    }\n                    _initializeFromPort(port) {\n                        this._port = port;\n                        this._messageHandler = new _shared_message_handler_js__WEBPACK_IMPORTED_MODULE_7__.MessageHandler(\"main\", \"worker\", port);\n                        this._messageHandler.on(\"ready\", function() {});\n                        this._readyCapability.resolve();\n                        this._messageHandler.send(\"configure\", {\n                            verbosity: this.verbosity\n                        });\n                    }\n                    _initialize() {\n                        if (!PDFWorkerUtil.isWorkerDisabled && !PDFWorker.#mainThreadWorkerMessageHandler) {\n                            let { workerSrc } = PDFWorker;\n                            try {\n                                if (!PDFWorkerUtil.isSameOrigin(window.location.href, workerSrc)) {\n                                    workerSrc = PDFWorkerUtil.createCDNWrapper(new URL(workerSrc, window.location).href);\n                                }\n                                const worker = new Worker(workerSrc, {\n                                    type: \"module\"\n                                });\n                                const messageHandler = new _shared_message_handler_js__WEBPACK_IMPORTED_MODULE_7__.MessageHandler(\"main\", \"worker\", worker);\n                                const terminateEarly = ()=>{\n                                    worker.removeEventListener(\"error\", onWorkerError);\n                                    messageHandler.destroy();\n                                    worker.terminate();\n                                    if (this.destroyed) {\n                                        this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n                                    } else {\n                                        this._setupFakeWorker();\n                                    }\n                                };\n                                const onWorkerError = ()=>{\n                                    if (!this._webWorker) {\n                                        terminateEarly();\n                                    }\n                                };\n                                worker.addEventListener(\"error\", onWorkerError);\n                                messageHandler.on(\"test\", (data)=>{\n                                    worker.removeEventListener(\"error\", onWorkerError);\n                                    if (this.destroyed) {\n                                        terminateEarly();\n                                        return;\n                                    }\n                                    if (data) {\n                                        this._messageHandler = messageHandler;\n                                        this._port = worker;\n                                        this._webWorker = worker;\n                                        this._readyCapability.resolve();\n                                        messageHandler.send(\"configure\", {\n                                            verbosity: this.verbosity\n                                        });\n                                    } else {\n                                        this._setupFakeWorker();\n                                        messageHandler.destroy();\n                                        worker.terminate();\n                                    }\n                                });\n                                messageHandler.on(\"ready\", (data)=>{\n                                    worker.removeEventListener(\"error\", onWorkerError);\n                                    if (this.destroyed) {\n                                        terminateEarly();\n                                        return;\n                                    }\n                                    try {\n                                        sendTest();\n                                    } catch  {\n                                        this._setupFakeWorker();\n                                    }\n                                });\n                                const sendTest = ()=>{\n                                    const testObj = new Uint8Array();\n                                    messageHandler.send(\"test\", testObj, [\n                                        testObj.buffer\n                                    ]);\n                                };\n                                sendTest();\n                                return;\n                            } catch  {\n                                (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.info)(\"The worker has been disabled.\");\n                            }\n                        }\n                        this._setupFakeWorker();\n                    }\n                    _setupFakeWorker() {\n                        if (!PDFWorkerUtil.isWorkerDisabled) {\n                            (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(\"Setting up fake worker.\");\n                            PDFWorkerUtil.isWorkerDisabled = true;\n                        }\n                        PDFWorker._setupFakeWorkerGlobal.then((WorkerMessageHandler)=>{\n                            if (this.destroyed) {\n                                this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n                                return;\n                            }\n                            const port = new LoopbackPort();\n                            this._port = port;\n                            const id = `fake${PDFWorkerUtil.fakeWorkerId++}`;\n                            const workerHandler = new _shared_message_handler_js__WEBPACK_IMPORTED_MODULE_7__.MessageHandler(id + \"_worker\", id, port);\n                            WorkerMessageHandler.setup(workerHandler, port);\n                            const messageHandler = new _shared_message_handler_js__WEBPACK_IMPORTED_MODULE_7__.MessageHandler(id, id + \"_worker\", port);\n                            this._messageHandler = messageHandler;\n                            this._readyCapability.resolve();\n                            messageHandler.send(\"configure\", {\n                                verbosity: this.verbosity\n                            });\n                        }).catch((reason)=>{\n                            this._readyCapability.reject(new Error(`Setting up fake worker failed: \"${reason.message}\".`));\n                        });\n                    }\n                    destroy() {\n                        this.destroyed = true;\n                        if (this._webWorker) {\n                            this._webWorker.terminate();\n                            this._webWorker = null;\n                        }\n                        PDFWorker.#workerPorts?.delete(this._port);\n                        this._port = null;\n                        if (this._messageHandler) {\n                            this._messageHandler.destroy();\n                            this._messageHandler = null;\n                        }\n                    }\n                    static fromPort(params) {\n                        if (!params?.port) {\n                            throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\n                        }\n                        const cachedPort = this.#workerPorts?.get(params.port);\n                        if (cachedPort) {\n                            if (cachedPort._pendingDestroy) {\n                                throw new Error(\"PDFWorker.fromPort - the worker is being destroyed.\\n\" + \"Please remember to await `PDFDocumentLoadingTask.destroy()`-calls.\");\n                            }\n                            return cachedPort;\n                        }\n                        return new PDFWorker(params);\n                    }\n                    static get workerSrc() {\n                        if (_worker_options_js__WEBPACK_IMPORTED_MODULE_6__.GlobalWorkerOptions.workerSrc) {\n                            return _worker_options_js__WEBPACK_IMPORTED_MODULE_6__.GlobalWorkerOptions.workerSrc;\n                        }\n                        throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\n                    }\n                    static get #mainThreadWorkerMessageHandler() {\n                        try {\n                            return globalThis.pdfjsWorker?.WorkerMessageHandler || null;\n                        } catch  {\n                            return null;\n                        }\n                    }\n                    static get _setupFakeWorkerGlobal() {\n                        const loader = async ()=>{\n                            if (this.#mainThreadWorkerMessageHandler) {\n                                return this.#mainThreadWorkerMessageHandler;\n                            }\n                            const worker = await import(/* webpackIgnore: true */ this.workerSrc);\n                            return worker.WorkerMessageHandler;\n                        };\n                        return (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"_setupFakeWorkerGlobal\", loader());\n                    }\n                }\n                class WorkerTransport {\n                    #methodPromises;\n                    #pageCache;\n                    #pagePromises;\n                    #passwordCapability;\n                    constructor(messageHandler, loadingTask, networkStream, params, factory){\n                        this.#methodPromises = new Map();\n                        this.#pageCache = new Map();\n                        this.#pagePromises = new Map();\n                        this.#passwordCapability = null;\n                        this.messageHandler = messageHandler;\n                        this.loadingTask = loadingTask;\n                        this.commonObjs = new PDFObjects();\n                        this.fontLoader = new _font_loader_js__WEBPACK_IMPORTED_MODULE_3__.FontLoader({\n                            ownerDocument: params.ownerDocument,\n                            styleElement: params.styleElement\n                        });\n                        this._params = params;\n                        this.canvasFactory = factory.canvasFactory;\n                        this.filterFactory = factory.filterFactory;\n                        this.cMapReaderFactory = factory.cMapReaderFactory;\n                        this.standardFontDataFactory = factory.standardFontDataFactory;\n                        this.destroyed = false;\n                        this.destroyCapability = null;\n                        this._networkStream = networkStream;\n                        this._fullReader = null;\n                        this._lastProgress = null;\n                        this.downloadInfoCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                        this.setupMessageHandler();\n                    }\n                    #cacheSimpleMethod(name, data = null) {\n                        const cachedPromise = this.#methodPromises.get(name);\n                        if (cachedPromise) {\n                            return cachedPromise;\n                        }\n                        const promise = this.messageHandler.sendWithPromise(name, data);\n                        this.#methodPromises.set(name, promise);\n                        return promise;\n                    }\n                    get annotationStorage() {\n                        return (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"annotationStorage\", new _annotation_storage_js__WEBPACK_IMPORTED_MODULE_1__.AnnotationStorage());\n                    }\n                    getRenderingIntent(intent, annotationMode = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationMode.ENABLE, printAnnotationStorage = null, isOpList = false) {\n                        let renderingIntent = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.RenderingIntentFlag.DISPLAY;\n                        let annotationStorageSerializable = _annotation_storage_js__WEBPACK_IMPORTED_MODULE_1__.SerializableEmpty;\n                        switch(intent){\n                            case \"any\":\n                                renderingIntent = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.RenderingIntentFlag.ANY;\n                                break;\n                            case \"display\":\n                                break;\n                            case \"print\":\n                                renderingIntent = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.RenderingIntentFlag.PRINT;\n                                break;\n                            default:\n                                (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`getRenderingIntent - invalid intent: ${intent}`);\n                        }\n                        switch(annotationMode){\n                            case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationMode.DISABLE:\n                                renderingIntent += _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.RenderingIntentFlag.ANNOTATIONS_DISABLE;\n                                break;\n                            case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationMode.ENABLE:\n                                break;\n                            case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationMode.ENABLE_FORMS:\n                                renderingIntent += _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.RenderingIntentFlag.ANNOTATIONS_FORMS;\n                                break;\n                            case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationMode.ENABLE_STORAGE:\n                                renderingIntent += _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.RenderingIntentFlag.ANNOTATIONS_STORAGE;\n                                const annotationStorage = renderingIntent & _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.RenderingIntentFlag.PRINT && printAnnotationStorage instanceof _annotation_storage_js__WEBPACK_IMPORTED_MODULE_1__.PrintAnnotationStorage ? printAnnotationStorage : this.annotationStorage;\n                                annotationStorageSerializable = annotationStorage.serializable;\n                                break;\n                            default:\n                                (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`getRenderingIntent - invalid annotationMode: ${annotationMode}`);\n                        }\n                        if (isOpList) {\n                            renderingIntent += _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.RenderingIntentFlag.OPLIST;\n                        }\n                        return {\n                            renderingIntent,\n                            cacheKey: `${renderingIntent}_${annotationStorageSerializable.hash}`,\n                            annotationStorageSerializable\n                        };\n                    }\n                    destroy() {\n                        if (this.destroyCapability) {\n                            return this.destroyCapability.promise;\n                        }\n                        this.destroyed = true;\n                        this.destroyCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                        this.#passwordCapability?.reject(new Error(\"Worker was destroyed during onPassword callback\"));\n                        const waitOn = [];\n                        for (const page of this.#pageCache.values()){\n                            waitOn.push(page._destroy());\n                        }\n                        this.#pageCache.clear();\n                        this.#pagePromises.clear();\n                        if (this.hasOwnProperty(\"annotationStorage\")) {\n                            this.annotationStorage.resetModified();\n                        }\n                        const terminated = this.messageHandler.sendWithPromise(\"Terminate\", null);\n                        waitOn.push(terminated);\n                        Promise.all(waitOn).then(()=>{\n                            this.commonObjs.clear();\n                            this.fontLoader.clear();\n                            this.#methodPromises.clear();\n                            this.filterFactory.destroy();\n                            this._networkStream?.cancelAllRequests(new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException(\"Worker was terminated.\"));\n                            if (this.messageHandler) {\n                                this.messageHandler.destroy();\n                                this.messageHandler = null;\n                            }\n                            this.destroyCapability.resolve();\n                        }, this.destroyCapability.reject);\n                        return this.destroyCapability.promise;\n                    }\n                    setupMessageHandler() {\n                        const { messageHandler, loadingTask } = this;\n                        messageHandler.on(\"GetReader\", (data, sink)=>{\n                            (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this._networkStream, \"GetReader - no `IPDFStream` instance available.\");\n                            this._fullReader = this._networkStream.getFullReader();\n                            this._fullReader.onProgress = (evt)=>{\n                                this._lastProgress = {\n                                    loaded: evt.loaded,\n                                    total: evt.total\n                                };\n                            };\n                            sink.onPull = ()=>{\n                                this._fullReader.read().then(function({ value, done }) {\n                                    if (done) {\n                                        sink.close();\n                                        return;\n                                    }\n                                    (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(value instanceof ArrayBuffer, \"GetReader - expected an ArrayBuffer.\");\n                                    sink.enqueue(new Uint8Array(value), 1, [\n                                        value\n                                    ]);\n                                }).catch((reason)=>{\n                                    sink.error(reason);\n                                });\n                            };\n                            sink.onCancel = (reason)=>{\n                                this._fullReader.cancel(reason);\n                                sink.ready.catch((readyReason)=>{\n                                    if (this.destroyed) {\n                                        return;\n                                    }\n                                    throw readyReason;\n                                });\n                            };\n                        });\n                        messageHandler.on(\"ReaderHeadersReady\", (data)=>{\n                            const headersCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                            const fullReader = this._fullReader;\n                            fullReader.headersReady.then(()=>{\n                                if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {\n                                    if (this._lastProgress) {\n                                        loadingTask.onProgress?.(this._lastProgress);\n                                    }\n                                    fullReader.onProgress = (evt)=>{\n                                        loadingTask.onProgress?.({\n                                            loaded: evt.loaded,\n                                            total: evt.total\n                                        });\n                                    };\n                                }\n                                headersCapability.resolve({\n                                    isStreamingSupported: fullReader.isStreamingSupported,\n                                    isRangeSupported: fullReader.isRangeSupported,\n                                    contentLength: fullReader.contentLength\n                                });\n                            }, headersCapability.reject);\n                            return headersCapability.promise;\n                        });\n                        messageHandler.on(\"GetRangeReader\", (data, sink)=>{\n                            (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this._networkStream, \"GetRangeReader - no `IPDFStream` instance available.\");\n                            const rangeReader = this._networkStream.getRangeReader(data.begin, data.end);\n                            if (!rangeReader) {\n                                sink.close();\n                                return;\n                            }\n                            sink.onPull = ()=>{\n                                rangeReader.read().then(function({ value, done }) {\n                                    if (done) {\n                                        sink.close();\n                                        return;\n                                    }\n                                    (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(value instanceof ArrayBuffer, \"GetRangeReader - expected an ArrayBuffer.\");\n                                    sink.enqueue(new Uint8Array(value), 1, [\n                                        value\n                                    ]);\n                                }).catch((reason)=>{\n                                    sink.error(reason);\n                                });\n                            };\n                            sink.onCancel = (reason)=>{\n                                rangeReader.cancel(reason);\n                                sink.ready.catch((readyReason)=>{\n                                    if (this.destroyed) {\n                                        return;\n                                    }\n                                    throw readyReason;\n                                });\n                            };\n                        });\n                        messageHandler.on(\"GetDoc\", ({ pdfInfo })=>{\n                            this._numPages = pdfInfo.numPages;\n                            this._htmlForXfa = pdfInfo.htmlForXfa;\n                            delete pdfInfo.htmlForXfa;\n                            loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));\n                        });\n                        messageHandler.on(\"DocException\", function(ex) {\n                            let reason;\n                            switch(ex.name){\n                                case \"PasswordException\":\n                                    reason = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PasswordException(ex.message, ex.code);\n                                    break;\n                                case \"InvalidPDFException\":\n                                    reason = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.InvalidPDFException(ex.message);\n                                    break;\n                                case \"MissingPDFException\":\n                                    reason = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.MissingPDFException(ex.message);\n                                    break;\n                                case \"UnexpectedResponseException\":\n                                    reason = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.UnexpectedResponseException(ex.message, ex.status);\n                                    break;\n                                case \"UnknownErrorException\":\n                                    reason = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.UnknownErrorException(ex.message, ex.details);\n                                    break;\n                                default:\n                                    (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"DocException - expected a valid Error.\");\n                            }\n                            loadingTask._capability.reject(reason);\n                        });\n                        messageHandler.on(\"PasswordRequest\", (exception)=>{\n                            this.#passwordCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                            if (loadingTask.onPassword) {\n                                const updatePassword = (password)=>{\n                                    if (password instanceof Error) {\n                                        this.#passwordCapability.reject(password);\n                                    } else {\n                                        this.#passwordCapability.resolve({\n                                            password\n                                        });\n                                    }\n                                };\n                                try {\n                                    loadingTask.onPassword(updatePassword, exception.code);\n                                } catch (ex) {\n                                    this.#passwordCapability.reject(ex);\n                                }\n                            } else {\n                                this.#passwordCapability.reject(new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PasswordException(exception.message, exception.code));\n                            }\n                            return this.#passwordCapability.promise;\n                        });\n                        messageHandler.on(\"DataLoaded\", (data)=>{\n                            loadingTask.onProgress?.({\n                                loaded: data.length,\n                                total: data.length\n                            });\n                            this.downloadInfoCapability.resolve(data);\n                        });\n                        messageHandler.on(\"StartRenderPage\", (data)=>{\n                            if (this.destroyed) {\n                                return;\n                            }\n                            const page = this.#pageCache.get(data.pageIndex);\n                            page._startRenderPage(data.transparency, data.cacheKey);\n                        });\n                        messageHandler.on(\"commonobj\", ([id, type, exportedData])=>{\n                            if (this.destroyed) {\n                                return null;\n                            }\n                            if (this.commonObjs.has(id)) {\n                                return null;\n                            }\n                            switch(type){\n                                case \"Font\":\n                                    const params = this._params;\n                                    if (\"error\" in exportedData) {\n                                        const exportedError = exportedData.error;\n                                        (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Error during font loading: ${exportedError}`);\n                                        this.commonObjs.resolve(id, exportedError);\n                                        break;\n                                    }\n                                    const inspectFont = params.pdfBug && globalThis.FontInspector?.enabled ? (font, url)=>globalThis.FontInspector.fontAdded(font, url) : null;\n                                    const font = new _font_loader_js__WEBPACK_IMPORTED_MODULE_3__.FontFaceObject(exportedData, {\n                                        isEvalSupported: params.isEvalSupported,\n                                        disableFontFace: params.disableFontFace,\n                                        ignoreErrors: params.ignoreErrors,\n                                        inspectFont\n                                    });\n                                    this.fontLoader.bind(font).catch((reason)=>{\n                                        return messageHandler.sendWithPromise(\"FontFallback\", {\n                                            id\n                                        });\n                                    }).finally(()=>{\n                                        if (!params.fontExtraProperties && font.data) {\n                                            font.data = null;\n                                        }\n                                        this.commonObjs.resolve(id, font);\n                                    });\n                                    break;\n                                case \"CopyLocalImage\":\n                                    const { imageRef } = exportedData;\n                                    (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(imageRef, \"The imageRef must be defined.\");\n                                    for (const pageProxy of this.#pageCache.values()){\n                                        for (const [, data] of pageProxy.objs){\n                                            if (data.ref !== imageRef) {\n                                                continue;\n                                            }\n                                            if (!data.dataLen) {\n                                                return null;\n                                            }\n                                            this.commonObjs.resolve(id, structuredClone(data));\n                                            return data.dataLen;\n                                        }\n                                    }\n                                    break;\n                                case \"FontPath\":\n                                case \"Image\":\n                                case \"Pattern\":\n                                    this.commonObjs.resolve(id, exportedData);\n                                    break;\n                                default:\n                                    throw new Error(`Got unknown common object type ${type}`);\n                            }\n                            return null;\n                        });\n                        messageHandler.on(\"obj\", ([id, pageIndex, type, imageData])=>{\n                            if (this.destroyed) {\n                                return;\n                            }\n                            const pageProxy = this.#pageCache.get(pageIndex);\n                            if (pageProxy.objs.has(id)) {\n                                return;\n                            }\n                            if (pageProxy._intentStates.size === 0) {\n                                imageData?.bitmap?.close();\n                                return;\n                            }\n                            switch(type){\n                                case \"Image\":\n                                    pageProxy.objs.resolve(id, imageData);\n                                    if (imageData?.dataLen > _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.MAX_IMAGE_SIZE_TO_CACHE) {\n                                        pageProxy._maybeCleanupAfterRender = true;\n                                    }\n                                    break;\n                                case \"Pattern\":\n                                    pageProxy.objs.resolve(id, imageData);\n                                    break;\n                                default:\n                                    throw new Error(`Got unknown object type ${type}`);\n                            }\n                        });\n                        messageHandler.on(\"DocProgress\", (data)=>{\n                            if (this.destroyed) {\n                                return;\n                            }\n                            loadingTask.onProgress?.({\n                                loaded: data.loaded,\n                                total: data.total\n                            });\n                        });\n                        messageHandler.on(\"FetchBuiltInCMap\", (data)=>{\n                            if (this.destroyed) {\n                                return Promise.reject(new Error(\"Worker was destroyed.\"));\n                            }\n                            if (!this.cMapReaderFactory) {\n                                return Promise.reject(new Error(\"CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.\"));\n                            }\n                            return this.cMapReaderFactory.fetch(data);\n                        });\n                        messageHandler.on(\"FetchStandardFontData\", (data)=>{\n                            if (this.destroyed) {\n                                return Promise.reject(new Error(\"Worker was destroyed.\"));\n                            }\n                            if (!this.standardFontDataFactory) {\n                                return Promise.reject(new Error(\"StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.\"));\n                            }\n                            return this.standardFontDataFactory.fetch(data);\n                        });\n                    }\n                    getData() {\n                        return this.messageHandler.sendWithPromise(\"GetData\", null);\n                    }\n                    saveDocument() {\n                        if (this.annotationStorage.size <= 0) {\n                            (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(\"saveDocument called while `annotationStorage` is empty, \" + \"please use the getData-method instead.\");\n                        }\n                        const { map, transfer } = this.annotationStorage.serializable;\n                        return this.messageHandler.sendWithPromise(\"SaveDocument\", {\n                            isPureXfa: !!this._htmlForXfa,\n                            numPages: this._numPages,\n                            annotationStorage: map,\n                            filename: this._fullReader?.filename ?? null\n                        }, transfer).finally(()=>{\n                            this.annotationStorage.resetModified();\n                        });\n                    }\n                    getPage(pageNumber) {\n                        if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this._numPages) {\n                            return Promise.reject(new Error(\"Invalid page request.\"));\n                        }\n                        const pageIndex = pageNumber - 1, cachedPromise = this.#pagePromises.get(pageIndex);\n                        if (cachedPromise) {\n                            return cachedPromise;\n                        }\n                        const promise = this.messageHandler.sendWithPromise(\"GetPage\", {\n                            pageIndex\n                        }).then((pageInfo)=>{\n                            if (this.destroyed) {\n                                throw new Error(\"Transport destroyed\");\n                            }\n                            const page = new PDFPageProxy(pageIndex, pageInfo, this, this._params.pdfBug);\n                            this.#pageCache.set(pageIndex, page);\n                            return page;\n                        });\n                        this.#pagePromises.set(pageIndex, promise);\n                        return promise;\n                    }\n                    getPageIndex(ref) {\n                        if (typeof ref !== \"object\" || ref === null || !Number.isInteger(ref.num) || ref.num < 0 || !Number.isInteger(ref.gen) || ref.gen < 0) {\n                            return Promise.reject(new Error(\"Invalid pageIndex request.\"));\n                        }\n                        return this.messageHandler.sendWithPromise(\"GetPageIndex\", {\n                            num: ref.num,\n                            gen: ref.gen\n                        });\n                    }\n                    getAnnotations(pageIndex, intent) {\n                        return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\n                            pageIndex,\n                            intent\n                        });\n                    }\n                    getFieldObjects() {\n                        return this.#cacheSimpleMethod(\"GetFieldObjects\");\n                    }\n                    hasJSActions() {\n                        return this.#cacheSimpleMethod(\"HasJSActions\");\n                    }\n                    getCalculationOrderIds() {\n                        return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\n                    }\n                    getDestinations() {\n                        return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\n                    }\n                    getDestination(id) {\n                        if (typeof id !== \"string\") {\n                            return Promise.reject(new Error(\"Invalid destination request.\"));\n                        }\n                        return this.messageHandler.sendWithPromise(\"GetDestination\", {\n                            id\n                        });\n                    }\n                    getPageLabels() {\n                        return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\n                    }\n                    getPageLayout() {\n                        return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\n                    }\n                    getPageMode() {\n                        return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\n                    }\n                    getViewerPreferences() {\n                        return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\n                    }\n                    getOpenAction() {\n                        return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\n                    }\n                    getAttachments() {\n                        return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\n                    }\n                    getDocJSActions() {\n                        return this.#cacheSimpleMethod(\"GetDocJSActions\");\n                    }\n                    getPageJSActions(pageIndex) {\n                        return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\n                            pageIndex\n                        });\n                    }\n                    getStructTree(pageIndex) {\n                        return this.messageHandler.sendWithPromise(\"GetStructTree\", {\n                            pageIndex\n                        });\n                    }\n                    getOutline() {\n                        return this.messageHandler.sendWithPromise(\"GetOutline\", null);\n                    }\n                    getOptionalContentConfig() {\n                        return this.messageHandler.sendWithPromise(\"GetOptionalContentConfig\", null).then((results)=>{\n                            return new _optional_content_config_js__WEBPACK_IMPORTED_MODULE_9__.OptionalContentConfig(results);\n                        });\n                    }\n                    getPermissions() {\n                        return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\n                    }\n                    getMetadata() {\n                        const name = \"GetMetadata\", cachedPromise = this.#methodPromises.get(name);\n                        if (cachedPromise) {\n                            return cachedPromise;\n                        }\n                        const promise = this.messageHandler.sendWithPromise(name, null).then((results)=>{\n                            return {\n                                info: results[0],\n                                metadata: results[1] ? new _metadata_js__WEBPACK_IMPORTED_MODULE_8__.Metadata(results[1]) : null,\n                                contentDispositionFilename: this._fullReader?.filename ?? null,\n                                contentLength: this._fullReader?.contentLength ?? null\n                            };\n                        });\n                        this.#methodPromises.set(name, promise);\n                        return promise;\n                    }\n                    getMarkInfo() {\n                        return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\n                    }\n                    async startCleanup(keepLoadedFonts = false) {\n                        if (this.destroyed) {\n                            return;\n                        }\n                        await this.messageHandler.sendWithPromise(\"Cleanup\", null);\n                        for (const page of this.#pageCache.values()){\n                            const cleanupSuccessful = page.cleanup();\n                            if (!cleanupSuccessful) {\n                                throw new Error(`startCleanup: Page ${page.pageNumber} is currently rendering.`);\n                            }\n                        }\n                        this.commonObjs.clear();\n                        if (!keepLoadedFonts) {\n                            this.fontLoader.clear();\n                        }\n                        this.#methodPromises.clear();\n                        this.filterFactory.destroy(true);\n                    }\n                    get loadingParams() {\n                        const { disableAutoFetch, enableXfa } = this._params;\n                        return (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"loadingParams\", {\n                            disableAutoFetch,\n                            enableXfa\n                        });\n                    }\n                }\n                class PDFObjects {\n                    #objs;\n                    #ensureObj(objId) {\n                        return this.#objs[objId] ||= {\n                            capability: new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability(),\n                            data: null\n                        };\n                    }\n                    get(objId, callback = null) {\n                        if (callback) {\n                            const obj = this.#ensureObj(objId);\n                            obj.capability.promise.then(()=>callback(obj.data));\n                            return null;\n                        }\n                        const obj = this.#objs[objId];\n                        if (!obj?.capability.settled) {\n                            throw new Error(`Requesting object that isn't resolved yet ${objId}.`);\n                        }\n                        return obj.data;\n                    }\n                    has(objId) {\n                        const obj = this.#objs[objId];\n                        return obj?.capability.settled ?? false;\n                    }\n                    resolve(objId, data = null) {\n                        const obj = this.#ensureObj(objId);\n                        obj.data = data;\n                        obj.capability.resolve();\n                    }\n                    clear() {\n                        for(const objId in this.#objs){\n                            const { data } = this.#objs[objId];\n                            data?.bitmap?.close();\n                        }\n                        this.#objs = Object.create(null);\n                    }\n                    *[Symbol.iterator]() {\n                        for(const objId in this.#objs){\n                            const { capability, data } = this.#objs[objId];\n                            if (!capability.settled) {\n                                continue;\n                            }\n                            yield [\n                                objId,\n                                data\n                            ];\n                        }\n                    }\n                    constructor(){\n                        this.#objs = Object.create(null);\n                    }\n                }\n                class RenderTask {\n                    #internalRenderTask;\n                    constructor(internalRenderTask){\n                        this.#internalRenderTask = null;\n                        this.#internalRenderTask = internalRenderTask;\n                        this.onContinue = null;\n                    }\n                    get promise() {\n                        return this.#internalRenderTask.capability.promise;\n                    }\n                    cancel(extraDelay = 0) {\n                        this.#internalRenderTask.cancel(null, extraDelay);\n                    }\n                    get separateAnnots() {\n                        const { separateAnnots } = this.#internalRenderTask.operatorList;\n                        if (!separateAnnots) {\n                            return false;\n                        }\n                        const { annotationCanvasMap } = this.#internalRenderTask;\n                        return separateAnnots.form || separateAnnots.canvas && annotationCanvasMap?.size > 0;\n                    }\n                }\n                class InternalRenderTask {\n                    static #canvasInUse = new WeakSet();\n                    constructor({ callback, params, objs, commonObjs, annotationCanvasMap, operatorList, pageIndex, canvasFactory, filterFactory, useRequestAnimationFrame = false, pdfBug = false, pageColors = null }){\n                        this.callback = callback;\n                        this.params = params;\n                        this.objs = objs;\n                        this.commonObjs = commonObjs;\n                        this.annotationCanvasMap = annotationCanvasMap;\n                        this.operatorListIdx = null;\n                        this.operatorList = operatorList;\n                        this._pageIndex = pageIndex;\n                        this.canvasFactory = canvasFactory;\n                        this.filterFactory = filterFactory;\n                        this._pdfBug = pdfBug;\n                        this.pageColors = pageColors;\n                        this.running = false;\n                        this.graphicsReadyCallback = null;\n                        this.graphicsReady = false;\n                        this._useRequestAnimationFrame = useRequestAnimationFrame === true && \"undefined\" !== \"undefined\";\n                        this.cancelled = false;\n                        this.capability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                        this.task = new RenderTask(this);\n                        this._cancelBound = this.cancel.bind(this);\n                        this._continueBound = this._continue.bind(this);\n                        this._scheduleNextBound = this._scheduleNext.bind(this);\n                        this._nextBound = this._next.bind(this);\n                        this._canvas = params.canvasContext.canvas;\n                    }\n                    get completed() {\n                        return this.capability.promise.catch(function() {});\n                    }\n                    initializeGraphics({ transparency = false, optionalContentConfig }) {\n                        if (this.cancelled) {\n                            return;\n                        }\n                        if (this._canvas) {\n                            if (InternalRenderTask.#canvasInUse.has(this._canvas)) {\n                                throw new Error(\"Cannot use the same canvas during multiple render() operations. \" + \"Use different canvas or ensure previous operations were \" + \"cancelled or completed.\");\n                            }\n                            InternalRenderTask.#canvasInUse.add(this._canvas);\n                        }\n                        if (this._pdfBug && globalThis.StepperManager?.enabled) {\n                            this.stepper = globalThis.StepperManager.create(this._pageIndex);\n                            this.stepper.init(this.operatorList);\n                            this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n                        }\n                        const { canvasContext, viewport, transform, background } = this.params;\n                        this.gfx = new _canvas_js__WEBPACK_IMPORTED_MODULE_5__.CanvasGraphics(canvasContext, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {\n                            optionalContentConfig\n                        }, this.annotationCanvasMap, this.pageColors);\n                        this.gfx.beginDrawing({\n                            transform,\n                            viewport,\n                            transparency,\n                            background\n                        });\n                        this.operatorListIdx = 0;\n                        this.graphicsReady = true;\n                        this.graphicsReadyCallback?.();\n                    }\n                    cancel(error = null, extraDelay = 0) {\n                        this.running = false;\n                        this.cancelled = true;\n                        this.gfx?.endDrawing();\n                        InternalRenderTask.#canvasInUse.delete(this._canvas);\n                        this.callback(error || new _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex + 1}`, extraDelay));\n                    }\n                    operatorListChanged() {\n                        if (!this.graphicsReady) {\n                            this.graphicsReadyCallback ||= this._continueBound;\n                            return;\n                        }\n                        this.stepper?.updateOperatorList(this.operatorList);\n                        if (this.running) {\n                            return;\n                        }\n                        this._continue();\n                    }\n                    _continue() {\n                        this.running = true;\n                        if (this.cancelled) {\n                            return;\n                        }\n                        if (this.task.onContinue) {\n                            this.task.onContinue(this._scheduleNextBound);\n                        } else {\n                            this._scheduleNext();\n                        }\n                    }\n                    _scheduleNext() {\n                        if (this._useRequestAnimationFrame) {\n                            window.requestAnimationFrame(()=>{\n                                this._nextBound().catch(this._cancelBound);\n                            });\n                        } else {\n                            Promise.resolve().then(this._nextBound).catch(this._cancelBound);\n                        }\n                    }\n                    async _next() {\n                        if (this.cancelled) {\n                            return;\n                        }\n                        this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);\n                        if (this.operatorListIdx === this.operatorList.argsArray.length) {\n                            this.running = false;\n                            if (this.operatorList.lastChunk) {\n                                this.gfx.endDrawing();\n                                InternalRenderTask.#canvasInUse.delete(this._canvas);\n                                this.callback();\n                            }\n                        }\n                    }\n                }\n                const version = \"4.0.379\";\n                const build = \"9e14d04fd\";\n                __webpack_async_result__();\n            } catch (e) {\n                __webpack_async_result__(e);\n            }\n        });\n    /***/ },\n    /***/ 822: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_226410__)=>{\n        /* harmony export */ __nested_webpack_require_226410__.d(__nested_webpack_exports__, {\n            /* harmony export */ BaseCMapReaderFactory: ()=>/* binding */ BaseCMapReaderFactory,\n            /* harmony export */ BaseCanvasFactory: ()=>/* binding */ BaseCanvasFactory,\n            /* harmony export */ BaseFilterFactory: ()=>/* binding */ BaseFilterFactory,\n            /* harmony export */ BaseSVGFactory: ()=>/* binding */ BaseSVGFactory,\n            /* harmony export */ BaseStandardFontDataFactory: ()=>/* binding */ BaseStandardFontDataFactory\n        });\n        /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_226410__(266);\n        class BaseFilterFactory {\n            constructor(){\n                if (this.constructor === BaseFilterFactory) {\n                    (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Cannot initialize BaseFilterFactory.\");\n                }\n            }\n            addFilter(maps) {\n                return \"none\";\n            }\n            addHCMFilter(fgColor, bgColor) {\n                return \"none\";\n            }\n            addHighlightHCMFilter(fgColor, bgColor, newFgColor, newBgColor) {\n                return \"none\";\n            }\n            destroy(keepHCM = false) {}\n        }\n        class BaseCanvasFactory {\n            constructor(){\n                if (this.constructor === BaseCanvasFactory) {\n                    (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Cannot initialize BaseCanvasFactory.\");\n                }\n            }\n            create(width, height) {\n                if (width <= 0 || height <= 0) {\n                    throw new Error(\"Invalid canvas size\");\n                }\n                const canvas = this._createCanvas(width, height);\n                return {\n                    canvas,\n                    context: canvas.getContext(\"2d\")\n                };\n            }\n            reset(canvasAndContext, width, height) {\n                if (!canvasAndContext.canvas) {\n                    throw new Error(\"Canvas is not specified\");\n                }\n                if (width <= 0 || height <= 0) {\n                    throw new Error(\"Invalid canvas size\");\n                }\n                canvasAndContext.canvas.width = width;\n                canvasAndContext.canvas.height = height;\n            }\n            destroy(canvasAndContext) {\n                if (!canvasAndContext.canvas) {\n                    throw new Error(\"Canvas is not specified\");\n                }\n                canvasAndContext.canvas.width = 0;\n                canvasAndContext.canvas.height = 0;\n                canvasAndContext.canvas = null;\n                canvasAndContext.context = null;\n            }\n            _createCanvas(width, height) {\n                (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Abstract method `_createCanvas` called.\");\n            }\n        }\n        class BaseCMapReaderFactory {\n            constructor({ baseUrl = null, isCompressed = true }){\n                if (this.constructor === BaseCMapReaderFactory) {\n                    (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Cannot initialize BaseCMapReaderFactory.\");\n                }\n                this.baseUrl = baseUrl;\n                this.isCompressed = isCompressed;\n            }\n            async fetch({ name }) {\n                if (!this.baseUrl) {\n                    throw new Error('The CMap \"baseUrl\" parameter must be specified, ensure that ' + 'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.');\n                }\n                if (!name) {\n                    throw new Error(\"CMap name must be specified.\");\n                }\n                const url = this.baseUrl + name + (this.isCompressed ? \".bcmap\" : \"\");\n                const compressionType = this.isCompressed ? _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.CMapCompressionType.BINARY : _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.CMapCompressionType.NONE;\n                return this._fetchData(url, compressionType).catch((reason)=>{\n                    throw new Error(`Unable to load ${this.isCompressed ? \"binary \" : \"\"}CMap at: ${url}`);\n                });\n            }\n            _fetchData(url, compressionType) {\n                (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Abstract method `_fetchData` called.\");\n            }\n        }\n        class BaseStandardFontDataFactory {\n            constructor({ baseUrl = null }){\n                if (this.constructor === BaseStandardFontDataFactory) {\n                    (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Cannot initialize BaseStandardFontDataFactory.\");\n                }\n                this.baseUrl = baseUrl;\n            }\n            async fetch({ filename }) {\n                if (!this.baseUrl) {\n                    throw new Error('The standard font \"baseUrl\" parameter must be specified, ensure that ' + 'the \"standardFontDataUrl\" API parameter is provided.');\n                }\n                if (!filename) {\n                    throw new Error(\"Font filename must be specified.\");\n                }\n                const url = `${this.baseUrl}${filename}`;\n                return this._fetchData(url).catch((reason)=>{\n                    throw new Error(`Unable to load font data at: ${url}`);\n                });\n            }\n            _fetchData(url) {\n                (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Abstract method `_fetchData` called.\");\n            }\n        }\n        class BaseSVGFactory {\n            constructor(){\n                if (this.constructor === BaseSVGFactory) {\n                    (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Cannot initialize BaseSVGFactory.\");\n                }\n            }\n            create(width, height, skipDimensions = false) {\n                if (width <= 0 || height <= 0) {\n                    throw new Error(\"Invalid SVG dimensions\");\n                }\n                const svg = this._createSVG(\"svg:svg\");\n                svg.setAttribute(\"version\", \"1.1\");\n                if (!skipDimensions) {\n                    svg.setAttribute(\"width\", `${width}px`);\n                    svg.setAttribute(\"height\", `${height}px`);\n                }\n                svg.setAttribute(\"preserveAspectRatio\", \"none\");\n                svg.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\n                return svg;\n            }\n            createElement(type) {\n                if (typeof type !== \"string\") {\n                    throw new Error(\"Invalid SVG element type\");\n                }\n                return this._createSVG(type);\n            }\n            _createSVG(type) {\n                (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Abstract method `_createSVG` called.\");\n            }\n        }\n    /***/ },\n    /***/ 250: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_233430__)=>{\n        // EXPORTS\n        __nested_webpack_require_233430__.d(__nested_webpack_exports__, {\n            CanvasGraphics: ()=>/* binding */ CanvasGraphics\n        });\n        // EXTERNAL MODULE: ./src/shared/util.js\n        var util = __nested_webpack_require_233430__(266);\n        // EXTERNAL MODULE: ./src/display/display_utils.js\n        var display_utils = __nested_webpack_require_233430__(473);\n        ; // CONCATENATED MODULE: ./src/display/pattern_helper.js\n        const PathType = {\n            FILL: \"Fill\",\n            STROKE: \"Stroke\",\n            SHADING: \"Shading\"\n        };\n        function applyBoundingBox(ctx, bbox) {\n            if (!bbox) {\n                return;\n            }\n            const width = bbox[2] - bbox[0];\n            const height = bbox[3] - bbox[1];\n            const region = new Path2D();\n            region.rect(bbox[0], bbox[1], width, height);\n            ctx.clip(region);\n        }\n        class BaseShadingPattern {\n            constructor(){\n                if (this.constructor === BaseShadingPattern) {\n                    (0, util.unreachable)(\"Cannot initialize BaseShadingPattern.\");\n                }\n            }\n            getPattern() {\n                (0, util.unreachable)(\"Abstract method `getPattern` called.\");\n            }\n        }\n        class RadialAxialShadingPattern extends BaseShadingPattern {\n            constructor(IR){\n                super();\n                this._type = IR[1];\n                this._bbox = IR[2];\n                this._colorStops = IR[3];\n                this._p0 = IR[4];\n                this._p1 = IR[5];\n                this._r0 = IR[6];\n                this._r1 = IR[7];\n                this.matrix = null;\n            }\n            _createGradient(ctx) {\n                let grad;\n                if (this._type === \"axial\") {\n                    grad = ctx.createLinearGradient(this._p0[0], this._p0[1], this._p1[0], this._p1[1]);\n                } else if (this._type === \"radial\") {\n                    grad = ctx.createRadialGradient(this._p0[0], this._p0[1], this._r0, this._p1[0], this._p1[1], this._r1);\n                }\n                for (const colorStop of this._colorStops){\n                    grad.addColorStop(colorStop[0], colorStop[1]);\n                }\n                return grad;\n            }\n            getPattern(ctx, owner, inverse, pathType) {\n                let pattern;\n                if (pathType === PathType.STROKE || pathType === PathType.FILL) {\n                    const ownerBBox = owner.current.getClippedPathBoundingBox(pathType, (0, display_utils.getCurrentTransform)(ctx)) || [\n                        0,\n                        0,\n                        0,\n                        0\n                    ];\n                    const width = Math.ceil(ownerBBox[2] - ownerBBox[0]) || 1;\n                    const height = Math.ceil(ownerBBox[3] - ownerBBox[1]) || 1;\n                    const tmpCanvas = owner.cachedCanvases.getCanvas(\"pattern\", width, height, true);\n                    const tmpCtx = tmpCanvas.context;\n                    tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n                    tmpCtx.beginPath();\n                    tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n                    tmpCtx.translate(-ownerBBox[0], -ownerBBox[1]);\n                    inverse = util.Util.transform(inverse, [\n                        1,\n                        0,\n                        0,\n                        1,\n                        ownerBBox[0],\n                        ownerBBox[1]\n                    ]);\n                    tmpCtx.transform(...owner.baseTransform);\n                    if (this.matrix) {\n                        tmpCtx.transform(...this.matrix);\n                    }\n                    applyBoundingBox(tmpCtx, this._bbox);\n                    tmpCtx.fillStyle = this._createGradient(tmpCtx);\n                    tmpCtx.fill();\n                    pattern = ctx.createPattern(tmpCanvas.canvas, \"no-repeat\");\n                    const domMatrix = new DOMMatrix(inverse);\n                    pattern.setTransform(domMatrix);\n                } else {\n                    applyBoundingBox(ctx, this._bbox);\n                    pattern = this._createGradient(ctx);\n                }\n                return pattern;\n            }\n        }\n        function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\n            const coords = context.coords, colors = context.colors;\n            const bytes = data.data, rowSize = data.width * 4;\n            let tmp;\n            if (coords[p1 + 1] > coords[p2 + 1]) {\n                tmp = p1;\n                p1 = p2;\n                p2 = tmp;\n                tmp = c1;\n                c1 = c2;\n                c2 = tmp;\n            }\n            if (coords[p2 + 1] > coords[p3 + 1]) {\n                tmp = p2;\n                p2 = p3;\n                p3 = tmp;\n                tmp = c2;\n                c2 = c3;\n                c3 = tmp;\n            }\n            if (coords[p1 + 1] > coords[p2 + 1]) {\n                tmp = p1;\n                p1 = p2;\n                p2 = tmp;\n                tmp = c1;\n                c1 = c2;\n                c2 = tmp;\n            }\n            const x1 = (coords[p1] + context.offsetX) * context.scaleX;\n            const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\n            const x2 = (coords[p2] + context.offsetX) * context.scaleX;\n            const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\n            const x3 = (coords[p3] + context.offsetX) * context.scaleX;\n            const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\n            if (y1 >= y3) {\n                return;\n            }\n            const c1r = colors[c1], c1g = colors[c1 + 1], c1b = colors[c1 + 2];\n            const c2r = colors[c2], c2g = colors[c2 + 1], c2b = colors[c2 + 2];\n            const c3r = colors[c3], c3g = colors[c3 + 1], c3b = colors[c3 + 2];\n            const minY = Math.round(y1), maxY = Math.round(y3);\n            let xa, car, cag, cab;\n            let xb, cbr, cbg, cbb;\n            for(let y = minY; y <= maxY; y++){\n                if (y < y2) {\n                    const k = y < y1 ? 0 : (y1 - y) / (y1 - y2);\n                    xa = x1 - (x1 - x2) * k;\n                    car = c1r - (c1r - c2r) * k;\n                    cag = c1g - (c1g - c2g) * k;\n                    cab = c1b - (c1b - c2b) * k;\n                } else {\n                    let k;\n                    if (y > y3) {\n                        k = 1;\n                    } else if (y2 === y3) {\n                        k = 0;\n                    } else {\n                        k = (y2 - y) / (y2 - y3);\n                    }\n                    xa = x2 - (x2 - x3) * k;\n                    car = c2r - (c2r - c3r) * k;\n                    cag = c2g - (c2g - c3g) * k;\n                    cab = c2b - (c2b - c3b) * k;\n                }\n                let k;\n                if (y < y1) {\n                    k = 0;\n                } else if (y > y3) {\n                    k = 1;\n                } else {\n                    k = (y1 - y) / (y1 - y3);\n                }\n                xb = x1 - (x1 - x3) * k;\n                cbr = c1r - (c1r - c3r) * k;\n                cbg = c1g - (c1g - c3g) * k;\n                cbb = c1b - (c1b - c3b) * k;\n                const x1_ = Math.round(Math.min(xa, xb));\n                const x2_ = Math.round(Math.max(xa, xb));\n                let j = rowSize * y + x1_ * 4;\n                for(let x = x1_; x <= x2_; x++){\n                    k = (xa - x) / (xa - xb);\n                    if (k < 0) {\n                        k = 0;\n                    } else if (k > 1) {\n                        k = 1;\n                    }\n                    bytes[j++] = car - (car - cbr) * k | 0;\n                    bytes[j++] = cag - (cag - cbg) * k | 0;\n                    bytes[j++] = cab - (cab - cbb) * k | 0;\n                    bytes[j++] = 255;\n                }\n            }\n        }\n        function drawFigure(data, figure, context) {\n            const ps = figure.coords;\n            const cs = figure.colors;\n            let i, ii;\n            switch(figure.type){\n                case \"lattice\":\n                    const verticesPerRow = figure.verticesPerRow;\n                    const rows = Math.floor(ps.length / verticesPerRow) - 1;\n                    const cols = verticesPerRow - 1;\n                    for(i = 0; i < rows; i++){\n                        let q = i * verticesPerRow;\n                        for(let j = 0; j < cols; j++, q++){\n                            drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);\n                            drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);\n                        }\n                    }\n                    break;\n                case \"triangles\":\n                    for(i = 0, ii = ps.length; i < ii; i += 3){\n                        drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);\n                    }\n                    break;\n                default:\n                    throw new Error(\"illegal figure\");\n            }\n        }\n        class MeshShadingPattern extends BaseShadingPattern {\n            constructor(IR){\n                super();\n                this._coords = IR[2];\n                this._colors = IR[3];\n                this._figures = IR[4];\n                this._bounds = IR[5];\n                this._bbox = IR[7];\n                this._background = IR[8];\n                this.matrix = null;\n            }\n            _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {\n                const EXPECTED_SCALE = 1.1;\n                const MAX_PATTERN_SIZE = 3000;\n                const BORDER_SIZE = 2;\n                const offsetX = Math.floor(this._bounds[0]);\n                const offsetY = Math.floor(this._bounds[1]);\n                const boundsWidth = Math.ceil(this._bounds[2]) - offsetX;\n                const boundsHeight = Math.ceil(this._bounds[3]) - offsetY;\n                const width = Math.min(Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n                const height = Math.min(Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n                const scaleX = boundsWidth / width;\n                const scaleY = boundsHeight / height;\n                const context = {\n                    coords: this._coords,\n                    colors: this._colors,\n                    offsetX: -offsetX,\n                    offsetY: -offsetY,\n                    scaleX: 1 / scaleX,\n                    scaleY: 1 / scaleY\n                };\n                const paddedWidth = width + BORDER_SIZE * 2;\n                const paddedHeight = height + BORDER_SIZE * 2;\n                const tmpCanvas = cachedCanvases.getCanvas(\"mesh\", paddedWidth, paddedHeight, false);\n                const tmpCtx = tmpCanvas.context;\n                const data = tmpCtx.createImageData(width, height);\n                if (backgroundColor) {\n                    const bytes = data.data;\n                    for(let i = 0, ii = bytes.length; i < ii; i += 4){\n                        bytes[i] = backgroundColor[0];\n                        bytes[i + 1] = backgroundColor[1];\n                        bytes[i + 2] = backgroundColor[2];\n                        bytes[i + 3] = 255;\n                    }\n                }\n                for (const figure of this._figures){\n                    drawFigure(data, figure, context);\n                }\n                tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\n                const canvas = tmpCanvas.canvas;\n                return {\n                    canvas,\n                    offsetX: offsetX - BORDER_SIZE * scaleX,\n                    offsetY: offsetY - BORDER_SIZE * scaleY,\n                    scaleX,\n                    scaleY\n                };\n            }\n            getPattern(ctx, owner, inverse, pathType) {\n                applyBoundingBox(ctx, this._bbox);\n                let scale;\n                if (pathType === PathType.SHADING) {\n                    scale = util.Util.singularValueDecompose2dScale((0, display_utils.getCurrentTransform)(ctx));\n                } else {\n                    scale = util.Util.singularValueDecompose2dScale(owner.baseTransform);\n                    if (this.matrix) {\n                        const matrixScale = util.Util.singularValueDecompose2dScale(this.matrix);\n                        scale = [\n                            scale[0] * matrixScale[0],\n                            scale[1] * matrixScale[1]\n                        ];\n                    }\n                }\n                const temporaryPatternCanvas = this._createMeshCanvas(scale, pathType === PathType.SHADING ? null : this._background, owner.cachedCanvases);\n                if (pathType !== PathType.SHADING) {\n                    ctx.setTransform(...owner.baseTransform);\n                    if (this.matrix) {\n                        ctx.transform(...this.matrix);\n                    }\n                }\n                ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\n                ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\n                return ctx.createPattern(temporaryPatternCanvas.canvas, \"no-repeat\");\n            }\n        }\n        class DummyShadingPattern extends BaseShadingPattern {\n            getPattern() {\n                return \"hotpink\";\n            }\n        }\n        function getShadingPattern(IR) {\n            switch(IR[0]){\n                case \"RadialAxial\":\n                    return new RadialAxialShadingPattern(IR);\n                case \"Mesh\":\n                    return new MeshShadingPattern(IR);\n                case \"Dummy\":\n                    return new DummyShadingPattern();\n            }\n            throw new Error(`Unknown IR type: ${IR[0]}`);\n        }\n        const PaintType = {\n            COLORED: 1,\n            UNCOLORED: 2\n        };\n        class TilingPattern {\n            static{\n                this.MAX_PATTERN_SIZE = 3000;\n            }\n            constructor(IR, color, ctx, canvasGraphicsFactory, baseTransform){\n                this.operatorList = IR[2];\n                this.matrix = IR[3] || [\n                    1,\n                    0,\n                    0,\n                    1,\n                    0,\n                    0\n                ];\n                this.bbox = IR[4];\n                this.xstep = IR[5];\n                this.ystep = IR[6];\n                this.paintType = IR[7];\n                this.tilingType = IR[8];\n                this.color = color;\n                this.ctx = ctx;\n                this.canvasGraphicsFactory = canvasGraphicsFactory;\n                this.baseTransform = baseTransform;\n            }\n            createPatternCanvas(owner) {\n                const operatorList = this.operatorList;\n                const bbox = this.bbox;\n                const xstep = this.xstep;\n                const ystep = this.ystep;\n                const paintType = this.paintType;\n                const tilingType = this.tilingType;\n                const color = this.color;\n                const canvasGraphicsFactory = this.canvasGraphicsFactory;\n                (0, util.info)(\"TilingType: \" + tilingType);\n                const x0 = bbox[0], y0 = bbox[1], x1 = bbox[2], y1 = bbox[3];\n                const matrixScale = util.Util.singularValueDecompose2dScale(this.matrix);\n                const curMatrixScale = util.Util.singularValueDecompose2dScale(this.baseTransform);\n                const combinedScale = [\n                    matrixScale[0] * curMatrixScale[0],\n                    matrixScale[1] * curMatrixScale[1]\n                ];\n                const dimx = this.getSizeAndScale(xstep, this.ctx.canvas.width, combinedScale[0]);\n                const dimy = this.getSizeAndScale(ystep, this.ctx.canvas.height, combinedScale[1]);\n                const tmpCanvas = owner.cachedCanvases.getCanvas(\"pattern\", dimx.size, dimy.size, true);\n                const tmpCtx = tmpCanvas.context;\n                const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\n                graphics.groupLevel = owner.groupLevel;\n                this.setFillAndStrokeStyleToContext(graphics, paintType, color);\n                let adjustedX0 = x0;\n                let adjustedY0 = y0;\n                let adjustedX1 = x1;\n                let adjustedY1 = y1;\n                if (x0 < 0) {\n                    adjustedX0 = 0;\n                    adjustedX1 += Math.abs(x0);\n                }\n                if (y0 < 0) {\n                    adjustedY0 = 0;\n                    adjustedY1 += Math.abs(y0);\n                }\n                tmpCtx.translate(-(dimx.scale * adjustedX0), -(dimy.scale * adjustedY0));\n                graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\n                tmpCtx.save();\n                this.clipBbox(graphics, adjustedX0, adjustedY0, adjustedX1, adjustedY1);\n                graphics.baseTransform = (0, display_utils.getCurrentTransform)(graphics.ctx);\n                graphics.executeOperatorList(operatorList);\n                graphics.endDrawing();\n                return {\n                    canvas: tmpCanvas.canvas,\n                    scaleX: dimx.scale,\n                    scaleY: dimy.scale,\n                    offsetX: adjustedX0,\n                    offsetY: adjustedY0\n                };\n            }\n            getSizeAndScale(step, realOutputSize, scale) {\n                step = Math.abs(step);\n                const maxSize = Math.max(TilingPattern.MAX_PATTERN_SIZE, realOutputSize);\n                let size = Math.ceil(step * scale);\n                if (size >= maxSize) {\n                    size = maxSize;\n                } else {\n                    scale = size / step;\n                }\n                return {\n                    scale,\n                    size\n                };\n            }\n            clipBbox(graphics, x0, y0, x1, y1) {\n                const bboxWidth = x1 - x0;\n                const bboxHeight = y1 - y0;\n                graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\n                graphics.current.updateRectMinMax((0, display_utils.getCurrentTransform)(graphics.ctx), [\n                    x0,\n                    y0,\n                    x1,\n                    y1\n                ]);\n                graphics.clip();\n                graphics.endPath();\n            }\n            setFillAndStrokeStyleToContext(graphics, paintType, color) {\n                const context = graphics.ctx, current = graphics.current;\n                switch(paintType){\n                    case PaintType.COLORED:\n                        const ctx = this.ctx;\n                        context.fillStyle = ctx.fillStyle;\n                        context.strokeStyle = ctx.strokeStyle;\n                        current.fillColor = ctx.fillStyle;\n                        current.strokeColor = ctx.strokeStyle;\n                        break;\n                    case PaintType.UNCOLORED:\n                        const cssColor = util.Util.makeHexColor(color[0], color[1], color[2]);\n                        context.fillStyle = cssColor;\n                        context.strokeStyle = cssColor;\n                        current.fillColor = cssColor;\n                        current.strokeColor = cssColor;\n                        break;\n                    default:\n                        throw new util.FormatError(`Unsupported paint type: ${paintType}`);\n                }\n            }\n            getPattern(ctx, owner, inverse, pathType) {\n                let matrix = inverse;\n                if (pathType !== PathType.SHADING) {\n                    matrix = util.Util.transform(matrix, owner.baseTransform);\n                    if (this.matrix) {\n                        matrix = util.Util.transform(matrix, this.matrix);\n                    }\n                }\n                const temporaryPatternCanvas = this.createPatternCanvas(owner);\n                let domMatrix = new DOMMatrix(matrix);\n                domMatrix = domMatrix.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\n                domMatrix = domMatrix.scale(1 / temporaryPatternCanvas.scaleX, 1 / temporaryPatternCanvas.scaleY);\n                const pattern = ctx.createPattern(temporaryPatternCanvas.canvas, \"repeat\");\n                pattern.setTransform(domMatrix);\n                return pattern;\n            }\n        }\n        ; // CONCATENATED MODULE: ./src/shared/image_utils.js\n        function convertToRGBA(params) {\n            switch(params.kind){\n                case ImageKind.GRAYSCALE_1BPP:\n                    return convertBlackAndWhiteToRGBA(params);\n                case ImageKind.RGB_24BPP:\n                    return convertRGBToRGBA(params);\n            }\n            return null;\n        }\n        function convertBlackAndWhiteToRGBA({ src, srcPos = 0, dest, width, height, nonBlackColor = 0xffffffff, inverseDecode = false }) {\n            const black = util.FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;\n            const [zeroMapping, oneMapping] = inverseDecode ? [\n                nonBlackColor,\n                black\n            ] : [\n                black,\n                nonBlackColor\n            ];\n            const widthInSource = width >> 3;\n            const widthRemainder = width & 7;\n            const srcLength = src.length;\n            dest = new Uint32Array(dest.buffer);\n            let destPos = 0;\n            for(let i = 0; i < height; i++){\n                for(const max = srcPos + widthInSource; srcPos < max; srcPos++){\n                    const elem = srcPos < srcLength ? src[srcPos] : 255;\n                    dest[destPos++] = elem & 128 ? oneMapping : zeroMapping;\n                    dest[destPos++] = elem & 64 ? oneMapping : zeroMapping;\n                    dest[destPos++] = elem & 32 ? oneMapping : zeroMapping;\n                    dest[destPos++] = elem & 16 ? oneMapping : zeroMapping;\n                    dest[destPos++] = elem & 8 ? oneMapping : zeroMapping;\n                    dest[destPos++] = elem & 4 ? oneMapping : zeroMapping;\n                    dest[destPos++] = elem & 2 ? oneMapping : zeroMapping;\n                    dest[destPos++] = elem & 1 ? oneMapping : zeroMapping;\n                }\n                if (widthRemainder === 0) {\n                    continue;\n                }\n                const elem = srcPos < srcLength ? src[srcPos++] : 255;\n                for(let j = 0; j < widthRemainder; j++){\n                    dest[destPos++] = elem & 1 << 7 - j ? oneMapping : zeroMapping;\n                }\n            }\n            return {\n                srcPos,\n                destPos\n            };\n        }\n        function convertRGBToRGBA({ src, srcPos = 0, dest, destPos = 0, width, height }) {\n            let i = 0;\n            const len32 = src.length >> 2;\n            const src32 = new Uint32Array(src.buffer, srcPos, len32);\n            if (FeatureTest.isLittleEndian) {\n                for(; i < len32 - 2; i += 3, destPos += 4){\n                    const s1 = src32[i];\n                    const s2 = src32[i + 1];\n                    const s3 = src32[i + 2];\n                    dest[destPos] = s1 | 0xff000000;\n                    dest[destPos + 1] = s1 >>> 24 | s2 << 8 | 0xff000000;\n                    dest[destPos + 2] = s2 >>> 16 | s3 << 16 | 0xff000000;\n                    dest[destPos + 3] = s3 >>> 8 | 0xff000000;\n                }\n                for(let j = i * 4, jj = src.length; j < jj; j += 3){\n                    dest[destPos++] = src[j] | src[j + 1] << 8 | src[j + 2] << 16 | 0xff000000;\n                }\n            } else {\n                for(; i < len32 - 2; i += 3, destPos += 4){\n                    const s1 = src32[i];\n                    const s2 = src32[i + 1];\n                    const s3 = src32[i + 2];\n                    dest[destPos] = s1 | 0xff;\n                    dest[destPos + 1] = s1 << 24 | s2 >>> 8 | 0xff;\n                    dest[destPos + 2] = s2 << 16 | s3 >>> 16 | 0xff;\n                    dest[destPos + 3] = s3 << 8 | 0xff;\n                }\n                for(let j = i * 4, jj = src.length; j < jj; j += 3){\n                    dest[destPos++] = src[j] << 24 | src[j + 1] << 16 | src[j + 2] << 8 | 0xff;\n                }\n            }\n            return {\n                srcPos,\n                destPos\n            };\n        }\n        function grayToRGBA(src, dest) {\n            if (FeatureTest.isLittleEndian) {\n                for(let i = 0, ii = src.length; i < ii; i++){\n                    dest[i] = src[i] * 0x10101 | 0xff000000;\n                }\n            } else {\n                for(let i = 0, ii = src.length; i < ii; i++){\n                    dest[i] = src[i] * 0x1010100 | 0x000000ff;\n                }\n            }\n        }\n        ; // CONCATENATED MODULE: ./src/display/canvas.js\n        const MIN_FONT_SIZE = 16;\n        const MAX_FONT_SIZE = 100;\n        const MAX_GROUP_SIZE = 4096;\n        const EXECUTION_TIME = 15;\n        const EXECUTION_STEPS = 10;\n        const MAX_SIZE_TO_COMPILE = 1000;\n        const FULL_CHUNK_HEIGHT = 16;\n        function mirrorContextOperations(ctx, destCtx) {\n            if (ctx._removeMirroring) {\n                throw new Error(\"Context is already forwarding operations.\");\n            }\n            ctx.__originalSave = ctx.save;\n            ctx.__originalRestore = ctx.restore;\n            ctx.__originalRotate = ctx.rotate;\n            ctx.__originalScale = ctx.scale;\n            ctx.__originalTranslate = ctx.translate;\n            ctx.__originalTransform = ctx.transform;\n            ctx.__originalSetTransform = ctx.setTransform;\n            ctx.__originalResetTransform = ctx.resetTransform;\n            ctx.__originalClip = ctx.clip;\n            ctx.__originalMoveTo = ctx.moveTo;\n            ctx.__originalLineTo = ctx.lineTo;\n            ctx.__originalBezierCurveTo = ctx.bezierCurveTo;\n            ctx.__originalRect = ctx.rect;\n            ctx.__originalClosePath = ctx.closePath;\n            ctx.__originalBeginPath = ctx.beginPath;\n            ctx._removeMirroring = ()=>{\n                ctx.save = ctx.__originalSave;\n                ctx.restore = ctx.__originalRestore;\n                ctx.rotate = ctx.__originalRotate;\n                ctx.scale = ctx.__originalScale;\n                ctx.translate = ctx.__originalTranslate;\n                ctx.transform = ctx.__originalTransform;\n                ctx.setTransform = ctx.__originalSetTransform;\n                ctx.resetTransform = ctx.__originalResetTransform;\n                ctx.clip = ctx.__originalClip;\n                ctx.moveTo = ctx.__originalMoveTo;\n                ctx.lineTo = ctx.__originalLineTo;\n                ctx.bezierCurveTo = ctx.__originalBezierCurveTo;\n                ctx.rect = ctx.__originalRect;\n                ctx.closePath = ctx.__originalClosePath;\n                ctx.beginPath = ctx.__originalBeginPath;\n                delete ctx._removeMirroring;\n            };\n            ctx.save = function ctxSave() {\n                destCtx.save();\n                this.__originalSave();\n            };\n            ctx.restore = function ctxRestore() {\n                destCtx.restore();\n                this.__originalRestore();\n            };\n            ctx.translate = function ctxTranslate(x, y) {\n                destCtx.translate(x, y);\n                this.__originalTranslate(x, y);\n            };\n            ctx.scale = function ctxScale(x, y) {\n                destCtx.scale(x, y);\n                this.__originalScale(x, y);\n            };\n            ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n                destCtx.transform(a, b, c, d, e, f);\n                this.__originalTransform(a, b, c, d, e, f);\n            };\n            ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n                destCtx.setTransform(a, b, c, d, e, f);\n                this.__originalSetTransform(a, b, c, d, e, f);\n            };\n            ctx.resetTransform = function ctxResetTransform() {\n                destCtx.resetTransform();\n                this.__originalResetTransform();\n            };\n            ctx.rotate = function ctxRotate(angle) {\n                destCtx.rotate(angle);\n                this.__originalRotate(angle);\n            };\n            ctx.clip = function ctxRotate(rule) {\n                destCtx.clip(rule);\n                this.__originalClip(rule);\n            };\n            ctx.moveTo = function(x, y) {\n                destCtx.moveTo(x, y);\n                this.__originalMoveTo(x, y);\n            };\n            ctx.lineTo = function(x, y) {\n                destCtx.lineTo(x, y);\n                this.__originalLineTo(x, y);\n            };\n            ctx.bezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) {\n                destCtx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n                this.__originalBezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n            };\n            ctx.rect = function(x, y, width, height) {\n                destCtx.rect(x, y, width, height);\n                this.__originalRect(x, y, width, height);\n            };\n            ctx.closePath = function() {\n                destCtx.closePath();\n                this.__originalClosePath();\n            };\n            ctx.beginPath = function() {\n                destCtx.beginPath();\n                this.__originalBeginPath();\n            };\n        }\n        class CachedCanvases {\n            constructor(canvasFactory){\n                this.canvasFactory = canvasFactory;\n                this.cache = Object.create(null);\n            }\n            getCanvas(id, width, height) {\n                let canvasEntry;\n                if (this.cache[id] !== undefined) {\n                    canvasEntry = this.cache[id];\n                    this.canvasFactory.reset(canvasEntry, width, height);\n                } else {\n                    canvasEntry = this.canvasFactory.create(width, height);\n                    this.cache[id] = canvasEntry;\n                }\n                return canvasEntry;\n            }\n            delete(id) {\n                delete this.cache[id];\n            }\n            clear() {\n                for(const id in this.cache){\n                    const canvasEntry = this.cache[id];\n                    this.canvasFactory.destroy(canvasEntry);\n                    delete this.cache[id];\n                }\n            }\n        }\n        function drawImageAtIntegerCoords(ctx, srcImg, srcX, srcY, srcW, srcH, destX, destY, destW, destH) {\n            const [a, b, c, d, tx, ty] = (0, display_utils.getCurrentTransform)(ctx);\n            if (b === 0 && c === 0) {\n                const tlX = destX * a + tx;\n                const rTlX = Math.round(tlX);\n                const tlY = destY * d + ty;\n                const rTlY = Math.round(tlY);\n                const brX = (destX + destW) * a + tx;\n                const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;\n                const brY = (destY + destH) * d + ty;\n                const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;\n                ctx.setTransform(Math.sign(a), 0, 0, Math.sign(d), rTlX, rTlY);\n                ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rWidth, rHeight);\n                ctx.setTransform(a, b, c, d, tx, ty);\n                return [\n                    rWidth,\n                    rHeight\n                ];\n            }\n            if (a === 0 && d === 0) {\n                const tlX = destY * c + tx;\n                const rTlX = Math.round(tlX);\n                const tlY = destX * b + ty;\n                const rTlY = Math.round(tlY);\n                const brX = (destY + destH) * c + tx;\n                const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;\n                const brY = (destX + destW) * b + ty;\n                const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;\n                ctx.setTransform(0, Math.sign(b), Math.sign(c), 0, rTlX, rTlY);\n                ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rHeight, rWidth);\n                ctx.setTransform(a, b, c, d, tx, ty);\n                return [\n                    rHeight,\n                    rWidth\n                ];\n            }\n            ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, destX, destY, destW, destH);\n            const scaleX = Math.hypot(a, b);\n            const scaleY = Math.hypot(c, d);\n            return [\n                scaleX * destW,\n                scaleY * destH\n            ];\n        }\n        function compileType3Glyph(imgData) {\n            const { width, height } = imgData;\n            if (width > MAX_SIZE_TO_COMPILE || height > MAX_SIZE_TO_COMPILE) {\n                return null;\n            }\n            const POINT_TO_PROCESS_LIMIT = 1000;\n            const POINT_TYPES = new Uint8Array([\n                0,\n                2,\n                4,\n                0,\n                1,\n                0,\n                5,\n                4,\n                8,\n                10,\n                0,\n                8,\n                0,\n                2,\n                1,\n                0\n            ]);\n            const width1 = width + 1;\n            let points = new Uint8Array(width1 * (height + 1));\n            let i, j, j0;\n            const lineSize = width + 7 & ~7;\n            let data = new Uint8Array(lineSize * height), pos = 0;\n            for (const elem of imgData.data){\n                let mask = 128;\n                while(mask > 0){\n                    data[pos++] = elem & mask ? 0 : 255;\n                    mask >>= 1;\n                }\n            }\n            let count = 0;\n            pos = 0;\n            if (data[pos] !== 0) {\n                points[0] = 1;\n                ++count;\n            }\n            for(j = 1; j < width; j++){\n                if (data[pos] !== data[pos + 1]) {\n                    points[j] = data[pos] ? 2 : 1;\n                    ++count;\n                }\n                pos++;\n            }\n            if (data[pos] !== 0) {\n                points[j] = 2;\n                ++count;\n            }\n            for(i = 1; i < height; i++){\n                pos = i * lineSize;\n                j0 = i * width1;\n                if (data[pos - lineSize] !== data[pos]) {\n                    points[j0] = data[pos] ? 1 : 8;\n                    ++count;\n                }\n                let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\n                for(j = 1; j < width; j++){\n                    sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);\n                    if (POINT_TYPES[sum]) {\n                        points[j0 + j] = POINT_TYPES[sum];\n                        ++count;\n                    }\n                    pos++;\n                }\n                if (data[pos - lineSize] !== data[pos]) {\n                    points[j0 + j] = data[pos] ? 2 : 4;\n                    ++count;\n                }\n                if (count > POINT_TO_PROCESS_LIMIT) {\n                    return null;\n                }\n            }\n            pos = lineSize * (height - 1);\n            j0 = i * width1;\n            if (data[pos] !== 0) {\n                points[j0] = 8;\n                ++count;\n            }\n            for(j = 1; j < width; j++){\n                if (data[pos] !== data[pos + 1]) {\n                    points[j0 + j] = data[pos] ? 4 : 8;\n                    ++count;\n                }\n                pos++;\n            }\n            if (data[pos] !== 0) {\n                points[j0 + j] = 4;\n                ++count;\n            }\n            if (count > POINT_TO_PROCESS_LIMIT) {\n                return null;\n            }\n            const steps = new Int32Array([\n                0,\n                width1,\n                -1,\n                0,\n                -width1,\n                0,\n                0,\n                0,\n                1\n            ]);\n            const path = new Path2D();\n            for(i = 0; count && i <= height; i++){\n                let p = i * width1;\n                const end = p + width;\n                while(p < end && !points[p]){\n                    p++;\n                }\n                if (p === end) {\n                    continue;\n                }\n                path.moveTo(p % width1, i);\n                const p0 = p;\n                let type = points[p];\n                do {\n                    const step = steps[type];\n                    do {\n                        p += step;\n                    }while (!points[p]);\n                    const pp = points[p];\n                    if (pp !== 5 && pp !== 10) {\n                        type = pp;\n                        points[p] = 0;\n                    } else {\n                        type = pp & 0x33 * type >> 4;\n                        points[p] &= type >> 2 | type << 2;\n                    }\n                    path.lineTo(p % width1, p / width1 | 0);\n                    if (!points[p]) {\n                        --count;\n                    }\n                }while (p0 !== p);\n                --i;\n            }\n            data = null;\n            points = null;\n            const drawOutline = function(c) {\n                c.save();\n                c.scale(1 / width, -1 / height);\n                c.translate(0, -height);\n                c.fill(path);\n                c.beginPath();\n                c.restore();\n            };\n            return drawOutline;\n        }\n        class CanvasExtraState {\n            constructor(width, height){\n                this.alphaIsShape = false;\n                this.fontSize = 0;\n                this.fontSizeScale = 1;\n                this.textMatrix = util.IDENTITY_MATRIX;\n                this.textMatrixScale = 1;\n                this.fontMatrix = util.FONT_IDENTITY_MATRIX;\n                this.leading = 0;\n                this.x = 0;\n                this.y = 0;\n                this.lineX = 0;\n                this.lineY = 0;\n                this.charSpacing = 0;\n                this.wordSpacing = 0;\n                this.textHScale = 1;\n                this.textRenderingMode = util.TextRenderingMode.FILL;\n                this.textRise = 0;\n                this.fillColor = \"#000000\";\n                this.strokeColor = \"#000000\";\n                this.patternFill = false;\n                this.fillAlpha = 1;\n                this.strokeAlpha = 1;\n                this.lineWidth = 1;\n                this.activeSMask = null;\n                this.transferMaps = \"none\";\n                this.startNewPathAndClipBox([\n                    0,\n                    0,\n                    width,\n                    height\n                ]);\n            }\n            clone() {\n                const clone = Object.create(this);\n                clone.clipBox = this.clipBox.slice();\n                return clone;\n            }\n            setCurrentPoint(x, y) {\n                this.x = x;\n                this.y = y;\n            }\n            updatePathMinMax(transform, x, y) {\n                [x, y] = util.Util.applyTransform([\n                    x,\n                    y\n                ], transform);\n                this.minX = Math.min(this.minX, x);\n                this.minY = Math.min(this.minY, y);\n                this.maxX = Math.max(this.maxX, x);\n                this.maxY = Math.max(this.maxY, y);\n            }\n            updateRectMinMax(transform, rect) {\n                const p1 = util.Util.applyTransform(rect, transform);\n                const p2 = util.Util.applyTransform(rect.slice(2), transform);\n                const p3 = util.Util.applyTransform([\n                    rect[0],\n                    rect[3]\n                ], transform);\n                const p4 = util.Util.applyTransform([\n                    rect[2],\n                    rect[1]\n                ], transform);\n                this.minX = Math.min(this.minX, p1[0], p2[0], p3[0], p4[0]);\n                this.minY = Math.min(this.minY, p1[1], p2[1], p3[1], p4[1]);\n                this.maxX = Math.max(this.maxX, p1[0], p2[0], p3[0], p4[0]);\n                this.maxY = Math.max(this.maxY, p1[1], p2[1], p3[1], p4[1]);\n            }\n            updateScalingPathMinMax(transform, minMax) {\n                util.Util.scaleMinMax(transform, minMax);\n                this.minX = Math.min(this.minX, minMax[0]);\n                this.maxX = Math.max(this.maxX, minMax[1]);\n                this.minY = Math.min(this.minY, minMax[2]);\n                this.maxY = Math.max(this.maxY, minMax[3]);\n            }\n            updateCurvePathMinMax(transform, x0, y0, x1, y1, x2, y2, x3, y3, minMax) {\n                const box = util.Util.bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3);\n                if (minMax) {\n                    minMax[0] = Math.min(minMax[0], box[0], box[2]);\n                    minMax[1] = Math.max(minMax[1], box[0], box[2]);\n                    minMax[2] = Math.min(minMax[2], box[1], box[3]);\n                    minMax[3] = Math.max(minMax[3], box[1], box[3]);\n                    return;\n                }\n                this.updateRectMinMax(transform, box);\n            }\n            getPathBoundingBox(pathType = PathType.FILL, transform = null) {\n                const box = [\n                    this.minX,\n                    this.minY,\n                    this.maxX,\n                    this.maxY\n                ];\n                if (pathType === PathType.STROKE) {\n                    if (!transform) {\n                        (0, util.unreachable)(\"Stroke bounding box must include transform.\");\n                    }\n                    const scale = util.Util.singularValueDecompose2dScale(transform);\n                    const xStrokePad = scale[0] * this.lineWidth / 2;\n                    const yStrokePad = scale[1] * this.lineWidth / 2;\n                    box[0] -= xStrokePad;\n                    box[1] -= yStrokePad;\n                    box[2] += xStrokePad;\n                    box[3] += yStrokePad;\n                }\n                return box;\n            }\n            updateClipFromPath() {\n                const intersect = util.Util.intersect(this.clipBox, this.getPathBoundingBox());\n                this.startNewPathAndClipBox(intersect || [\n                    0,\n                    0,\n                    0,\n                    0\n                ]);\n            }\n            isEmptyClip() {\n                return this.minX === Infinity;\n            }\n            startNewPathAndClipBox(box) {\n                this.clipBox = box;\n                this.minX = Infinity;\n                this.minY = Infinity;\n                this.maxX = 0;\n                this.maxY = 0;\n            }\n            getClippedPathBoundingBox(pathType = PathType.FILL, transform = null) {\n                return util.Util.intersect(this.clipBox, this.getPathBoundingBox(pathType, transform));\n            }\n        }\n        function putBinaryImageData(ctx, imgData) {\n            if (typeof ImageData !== \"undefined\" && imgData instanceof ImageData) {\n                ctx.putImageData(imgData, 0, 0);\n                return;\n            }\n            const height = imgData.height, width = imgData.width;\n            const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n            const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n            const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n            const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n            let srcPos = 0, destPos;\n            const src = imgData.data;\n            const dest = chunkImgData.data;\n            let i, j, thisChunkHeight, elemsInThisChunk;\n            if (imgData.kind === util.ImageKind.GRAYSCALE_1BPP) {\n                const srcLength = src.byteLength;\n                const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\n                const dest32DataLength = dest32.length;\n                const fullSrcDiff = width + 7 >> 3;\n                const white = 0xffffffff;\n                const black = util.FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;\n                for(i = 0; i < totalChunks; i++){\n                    thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n                    destPos = 0;\n                    for(j = 0; j < thisChunkHeight; j++){\n                        const srcDiff = srcLength - srcPos;\n                        let k = 0;\n                        const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\n                        const kEndUnrolled = kEnd & ~7;\n                        let mask = 0;\n                        let srcByte = 0;\n                        for(; k < kEndUnrolled; k += 8){\n                            srcByte = src[srcPos++];\n                            dest32[destPos++] = srcByte & 128 ? white : black;\n                            dest32[destPos++] = srcByte & 64 ? white : black;\n                            dest32[destPos++] = srcByte & 32 ? white : black;\n                            dest32[destPos++] = srcByte & 16 ? white : black;\n                            dest32[destPos++] = srcByte & 8 ? white : black;\n                            dest32[destPos++] = srcByte & 4 ? white : black;\n                            dest32[destPos++] = srcByte & 2 ? white : black;\n                            dest32[destPos++] = srcByte & 1 ? white : black;\n                        }\n                        for(; k < kEnd; k++){\n                            if (mask === 0) {\n                                srcByte = src[srcPos++];\n                                mask = 128;\n                            }\n                            dest32[destPos++] = srcByte & mask ? white : black;\n                            mask >>= 1;\n                        }\n                    }\n                    while(destPos < dest32DataLength){\n                        dest32[destPos++] = 0;\n                    }\n                    ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n                }\n            } else if (imgData.kind === util.ImageKind.RGBA_32BPP) {\n                j = 0;\n                elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\n                for(i = 0; i < fullChunks; i++){\n                    dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n                    srcPos += elemsInThisChunk;\n                    ctx.putImageData(chunkImgData, 0, j);\n                    j += FULL_CHUNK_HEIGHT;\n                }\n                if (i < totalChunks) {\n                    elemsInThisChunk = width * partialChunkHeight * 4;\n                    dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n                    ctx.putImageData(chunkImgData, 0, j);\n                }\n            } else if (imgData.kind === util.ImageKind.RGB_24BPP) {\n                thisChunkHeight = FULL_CHUNK_HEIGHT;\n                elemsInThisChunk = width * thisChunkHeight;\n                for(i = 0; i < totalChunks; i++){\n                    if (i >= fullChunks) {\n                        thisChunkHeight = partialChunkHeight;\n                        elemsInThisChunk = width * thisChunkHeight;\n                    }\n                    destPos = 0;\n                    for(j = elemsInThisChunk; j--;){\n                        dest[destPos++] = src[srcPos++];\n                        dest[destPos++] = src[srcPos++];\n                        dest[destPos++] = src[srcPos++];\n                        dest[destPos++] = 255;\n                    }\n                    ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n                }\n            } else {\n                throw new Error(`bad image kind: ${imgData.kind}`);\n            }\n        }\n        function putBinaryImageMask(ctx, imgData) {\n            if (imgData.bitmap) {\n                ctx.drawImage(imgData.bitmap, 0, 0);\n                return;\n            }\n            const height = imgData.height, width = imgData.width;\n            const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n            const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n            const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n            const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n            let srcPos = 0;\n            const src = imgData.data;\n            const dest = chunkImgData.data;\n            for(let i = 0; i < totalChunks; i++){\n                const thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n                ({ srcPos } = convertBlackAndWhiteToRGBA({\n                    src,\n                    srcPos,\n                    dest,\n                    width,\n                    height: thisChunkHeight,\n                    nonBlackColor: 0\n                }));\n                ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n            }\n        }\n        function copyCtxState(sourceCtx, destCtx) {\n            const properties = [\n                \"strokeStyle\",\n                \"fillStyle\",\n                \"fillRule\",\n                \"globalAlpha\",\n                \"lineWidth\",\n                \"lineCap\",\n                \"lineJoin\",\n                \"miterLimit\",\n                \"globalCompositeOperation\",\n                \"font\",\n                \"filter\"\n            ];\n            for (const property of properties){\n                if (sourceCtx[property] !== undefined) {\n                    destCtx[property] = sourceCtx[property];\n                }\n            }\n            if (sourceCtx.setLineDash !== undefined) {\n                destCtx.setLineDash(sourceCtx.getLineDash());\n                destCtx.lineDashOffset = sourceCtx.lineDashOffset;\n            }\n        }\n        function resetCtxToDefault(ctx) {\n            ctx.strokeStyle = ctx.fillStyle = \"#000000\";\n            ctx.fillRule = \"nonzero\";\n            ctx.globalAlpha = 1;\n            ctx.lineWidth = 1;\n            ctx.lineCap = \"butt\";\n            ctx.lineJoin = \"miter\";\n            ctx.miterLimit = 10;\n            ctx.globalCompositeOperation = \"source-over\";\n            ctx.font = \"10px sans-serif\";\n            if (ctx.setLineDash !== undefined) {\n                ctx.setLineDash([]);\n                ctx.lineDashOffset = 0;\n            }\n            if (!util.isNodeJS) {\n                const { filter } = ctx;\n                if (filter !== \"none\" && filter !== \"\") {\n                    ctx.filter = \"none\";\n                }\n            }\n        }\n        function composeSMaskBackdrop(bytes, r0, g0, b0) {\n            const length = bytes.length;\n            for(let i = 3; i < length; i += 4){\n                const alpha = bytes[i];\n                if (alpha === 0) {\n                    bytes[i - 3] = r0;\n                    bytes[i - 2] = g0;\n                    bytes[i - 1] = b0;\n                } else if (alpha < 255) {\n                    const alpha_ = 255 - alpha;\n                    bytes[i - 3] = bytes[i - 3] * alpha + r0 * alpha_ >> 8;\n                    bytes[i - 2] = bytes[i - 2] * alpha + g0 * alpha_ >> 8;\n                    bytes[i - 1] = bytes[i - 1] * alpha + b0 * alpha_ >> 8;\n                }\n            }\n        }\n        function composeSMaskAlpha(maskData, layerData, transferMap) {\n            const length = maskData.length;\n            const scale = 1 / 255;\n            for(let i = 3; i < length; i += 4){\n                const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];\n                layerData[i] = layerData[i] * alpha * scale | 0;\n            }\n        }\n        function composeSMaskLuminosity(maskData, layerData, transferMap) {\n            const length = maskData.length;\n            for(let i = 3; i < length; i += 4){\n                const y = maskData[i - 3] * 77 + maskData[i - 2] * 152 + maskData[i - 1] * 28;\n                layerData[i] = transferMap ? layerData[i] * transferMap[y >> 8] >> 8 : layerData[i] * y >> 16;\n            }\n        }\n        function genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap, layerOffsetX, layerOffsetY, maskOffsetX, maskOffsetY) {\n            const hasBackdrop = !!backdrop;\n            const r0 = hasBackdrop ? backdrop[0] : 0;\n            const g0 = hasBackdrop ? backdrop[1] : 0;\n            const b0 = hasBackdrop ? backdrop[2] : 0;\n            const composeFn = subtype === \"Luminosity\" ? composeSMaskLuminosity : composeSMaskAlpha;\n            const PIXELS_TO_PROCESS = 1048576;\n            const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));\n            for(let row = 0; row < height; row += chunkSize){\n                const chunkHeight = Math.min(chunkSize, height - row);\n                const maskData = maskCtx.getImageData(layerOffsetX - maskOffsetX, row + (layerOffsetY - maskOffsetY), width, chunkHeight);\n                const layerData = layerCtx.getImageData(layerOffsetX, row + layerOffsetY, width, chunkHeight);\n                if (hasBackdrop) {\n                    composeSMaskBackdrop(maskData.data, r0, g0, b0);\n                }\n                composeFn(maskData.data, layerData.data, transferMap);\n                layerCtx.putImageData(layerData, layerOffsetX, row + layerOffsetY);\n            }\n        }\n        function composeSMask(ctx, smask, layerCtx, layerBox) {\n            const layerOffsetX = layerBox[0];\n            const layerOffsetY = layerBox[1];\n            const layerWidth = layerBox[2] - layerOffsetX;\n            const layerHeight = layerBox[3] - layerOffsetY;\n            if (layerWidth === 0 || layerHeight === 0) {\n                return;\n            }\n            genericComposeSMask(smask.context, layerCtx, layerWidth, layerHeight, smask.subtype, smask.backdrop, smask.transferMap, layerOffsetX, layerOffsetY, smask.offsetX, smask.offsetY);\n            ctx.save();\n            ctx.globalAlpha = 1;\n            ctx.globalCompositeOperation = \"source-over\";\n            ctx.setTransform(1, 0, 0, 1, 0, 0);\n            ctx.drawImage(layerCtx.canvas, 0, 0);\n            ctx.restore();\n        }\n        function getImageSmoothingEnabled(transform, interpolate) {\n            const scale = util.Util.singularValueDecompose2dScale(transform);\n            scale[0] = Math.fround(scale[0]);\n            scale[1] = Math.fround(scale[1]);\n            const actualScale = Math.fround((globalThis.devicePixelRatio || 1) * display_utils.PixelsPerInch.PDF_TO_CSS_UNITS);\n            if (interpolate !== undefined) {\n                return interpolate;\n            } else if (scale[0] <= actualScale || scale[1] <= actualScale) {\n                return true;\n            }\n            return false;\n        }\n        const LINE_CAP_STYLES = [\n            \"butt\",\n            \"round\",\n            \"square\"\n        ];\n        const LINE_JOIN_STYLES = [\n            \"miter\",\n            \"round\",\n            \"bevel\"\n        ];\n        const NORMAL_CLIP = {};\n        const EO_CLIP = {};\n        class CanvasGraphics {\n            constructor(canvasCtx, commonObjs, objs, canvasFactory, filterFactory, { optionalContentConfig, markedContentStack = null }, annotationCanvasMap, pageColors){\n                this.ctx = canvasCtx;\n                this.current = new CanvasExtraState(this.ctx.canvas.width, this.ctx.canvas.height);\n                this.stateStack = [];\n                this.pendingClip = null;\n                this.pendingEOFill = false;\n                this.res = null;\n                this.xobjs = null;\n                this.commonObjs = commonObjs;\n                this.objs = objs;\n                this.canvasFactory = canvasFactory;\n                this.filterFactory = filterFactory;\n                this.groupStack = [];\n                this.processingType3 = null;\n                this.baseTransform = null;\n                this.baseTransformStack = [];\n                this.groupLevel = 0;\n                this.smaskStack = [];\n                this.smaskCounter = 0;\n                this.tempSMask = null;\n                this.suspendedCtx = null;\n                this.contentVisible = true;\n                this.markedContentStack = markedContentStack || [];\n                this.optionalContentConfig = optionalContentConfig;\n                this.cachedCanvases = new CachedCanvases(this.canvasFactory);\n                this.cachedPatterns = new Map();\n                this.annotationCanvasMap = annotationCanvasMap;\n                this.viewportScale = 1;\n                this.outputScaleX = 1;\n                this.outputScaleY = 1;\n                this.pageColors = pageColors;\n                this._cachedScaleForStroking = [\n                    -1,\n                    0\n                ];\n                this._cachedGetSinglePixelWidth = null;\n                this._cachedBitmapsMap = new Map();\n            }\n            getObject(data, fallback = null) {\n                if (typeof data === \"string\") {\n                    return data.startsWith(\"g_\") ? this.commonObjs.get(data) : this.objs.get(data);\n                }\n                return fallback;\n            }\n            beginDrawing({ transform, viewport, transparency = false, background = null }) {\n                const width = this.ctx.canvas.width;\n                const height = this.ctx.canvas.height;\n                const savedFillStyle = this.ctx.fillStyle;\n                this.ctx.fillStyle = background || \"#ffffff\";\n                this.ctx.fillRect(0, 0, width, height);\n                this.ctx.fillStyle = savedFillStyle;\n                if (transparency) {\n                    const transparentCanvas = this.cachedCanvases.getCanvas(\"transparent\", width, height);\n                    this.compositeCtx = this.ctx;\n                    this.transparentCanvas = transparentCanvas.canvas;\n                    this.ctx = transparentCanvas.context;\n                    this.ctx.save();\n                    this.ctx.transform(...(0, display_utils.getCurrentTransform)(this.compositeCtx));\n                }\n                this.ctx.save();\n                resetCtxToDefault(this.ctx);\n                if (transform) {\n                    this.ctx.transform(...transform);\n                    this.outputScaleX = transform[0];\n                    this.outputScaleY = transform[0];\n                }\n                this.ctx.transform(...viewport.transform);\n                this.viewportScale = viewport.scale;\n                this.baseTransform = (0, display_utils.getCurrentTransform)(this.ctx);\n            }\n            executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {\n                const argsArray = operatorList.argsArray;\n                const fnArray = operatorList.fnArray;\n                let i = executionStartIdx || 0;\n                const argsArrayLen = argsArray.length;\n                if (argsArrayLen === i) {\n                    return i;\n                }\n                const chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === \"function\";\n                const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\n                let steps = 0;\n                const commonObjs = this.commonObjs;\n                const objs = this.objs;\n                let fnId;\n                while(true){\n                    if (stepper !== undefined && i === stepper.nextBreakPoint) {\n                        stepper.breakIt(i, continueCallback);\n                        return i;\n                    }\n                    fnId = fnArray[i];\n                    if (fnId !== util.OPS.dependency) {\n                        this[fnId].apply(this, argsArray[i]);\n                    } else {\n                        for (const depObjId of argsArray[i]){\n                            const objsPool = depObjId.startsWith(\"g_\") ? commonObjs : objs;\n                            if (!objsPool.has(depObjId)) {\n                                objsPool.get(depObjId, continueCallback);\n                                return i;\n                            }\n                        }\n                    }\n                    i++;\n                    if (i === argsArrayLen) {\n                        return i;\n                    }\n                    if (chunkOperations && ++steps > EXECUTION_STEPS) {\n                        if (Date.now() > endTime) {\n                            continueCallback();\n                            return i;\n                        }\n                        steps = 0;\n                    }\n                }\n            }\n            #restoreInitialState() {\n                while(this.stateStack.length || this.inSMaskMode){\n                    this.restore();\n                }\n                this.ctx.restore();\n                if (this.transparentCanvas) {\n                    this.ctx = this.compositeCtx;\n                    this.ctx.save();\n                    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n                    this.ctx.drawImage(this.transparentCanvas, 0, 0);\n                    this.ctx.restore();\n                    this.transparentCanvas = null;\n                }\n            }\n            endDrawing() {\n                this.#restoreInitialState();\n                this.cachedCanvases.clear();\n                this.cachedPatterns.clear();\n                for (const cache of this._cachedBitmapsMap.values()){\n                    for (const canvas of cache.values()){\n                        if (typeof HTMLCanvasElement !== \"undefined\" && canvas instanceof HTMLCanvasElement) {\n                            canvas.width = canvas.height = 0;\n                        }\n                    }\n                    cache.clear();\n                }\n                this._cachedBitmapsMap.clear();\n                this.#drawFilter();\n            }\n            #drawFilter() {\n                if (this.pageColors) {\n                    const hcmFilterId = this.filterFactory.addHCMFilter(this.pageColors.foreground, this.pageColors.background);\n                    if (hcmFilterId !== \"none\") {\n                        const savedFilter = this.ctx.filter;\n                        this.ctx.filter = hcmFilterId;\n                        this.ctx.drawImage(this.ctx.canvas, 0, 0);\n                        this.ctx.filter = savedFilter;\n                    }\n                }\n            }\n            _scaleImage(img, inverseTransform) {\n                const width = img.width;\n                const height = img.height;\n                let widthScale = Math.max(Math.hypot(inverseTransform[0], inverseTransform[1]), 1);\n                let heightScale = Math.max(Math.hypot(inverseTransform[2], inverseTransform[3]), 1);\n                let paintWidth = width, paintHeight = height;\n                let tmpCanvasId = \"prescale1\";\n                let tmpCanvas, tmpCtx;\n                while(widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1){\n                    let newWidth = paintWidth, newHeight = paintHeight;\n                    if (widthScale > 2 && paintWidth > 1) {\n                        newWidth = paintWidth >= 16384 ? Math.floor(paintWidth / 2) - 1 || 1 : Math.ceil(paintWidth / 2);\n                        widthScale /= paintWidth / newWidth;\n                    }\n                    if (heightScale > 2 && paintHeight > 1) {\n                        newHeight = paintHeight >= 16384 ? Math.floor(paintHeight / 2) - 1 || 1 : Math.ceil(paintHeight) / 2;\n                        heightScale /= paintHeight / newHeight;\n                    }\n                    tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);\n                    tmpCtx = tmpCanvas.context;\n                    tmpCtx.clearRect(0, 0, newWidth, newHeight);\n                    tmpCtx.drawImage(img, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);\n                    img = tmpCanvas.canvas;\n                    paintWidth = newWidth;\n                    paintHeight = newHeight;\n                    tmpCanvasId = tmpCanvasId === \"prescale1\" ? \"prescale2\" : \"prescale1\";\n                }\n                return {\n                    img,\n                    paintWidth,\n                    paintHeight\n                };\n            }\n            _createMaskCanvas(img) {\n                const ctx = this.ctx;\n                const { width, height } = img;\n                const fillColor = this.current.fillColor;\n                const isPatternFill = this.current.patternFill;\n                const currentTransform = (0, display_utils.getCurrentTransform)(ctx);\n                let cache, cacheKey, scaled, maskCanvas;\n                if ((img.bitmap || img.data) && img.count > 1) {\n                    const mainKey = img.bitmap || img.data.buffer;\n                    cacheKey = JSON.stringify(isPatternFill ? currentTransform : [\n                        currentTransform.slice(0, 4),\n                        fillColor\n                    ]);\n                    cache = this._cachedBitmapsMap.get(mainKey);\n                    if (!cache) {\n                        cache = new Map();\n                        this._cachedBitmapsMap.set(mainKey, cache);\n                    }\n                    const cachedImage = cache.get(cacheKey);\n                    if (cachedImage && !isPatternFill) {\n                        const offsetX = Math.round(Math.min(currentTransform[0], currentTransform[2]) + currentTransform[4]);\n                        const offsetY = Math.round(Math.min(currentTransform[1], currentTransform[3]) + currentTransform[5]);\n                        return {\n                            canvas: cachedImage,\n                            offsetX,\n                            offsetY\n                        };\n                    }\n                    scaled = cachedImage;\n                }\n                if (!scaled) {\n                    maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n                    putBinaryImageMask(maskCanvas.context, img);\n                }\n                let maskToCanvas = util.Util.transform(currentTransform, [\n                    1 / width,\n                    0,\n                    0,\n                    -1 / height,\n                    0,\n                    0\n                ]);\n                maskToCanvas = util.Util.transform(maskToCanvas, [\n                    1,\n                    0,\n                    0,\n                    1,\n                    0,\n                    -height\n                ]);\n                const [minX, minY, maxX, maxY] = util.Util.getAxialAlignedBoundingBox([\n                    0,\n                    0,\n                    width,\n                    height\n                ], maskToCanvas);\n                const drawnWidth = Math.round(maxX - minX) || 1;\n                const drawnHeight = Math.round(maxY - minY) || 1;\n                const fillCanvas = this.cachedCanvases.getCanvas(\"fillCanvas\", drawnWidth, drawnHeight);\n                const fillCtx = fillCanvas.context;\n                const offsetX = minX;\n                const offsetY = minY;\n                fillCtx.translate(-offsetX, -offsetY);\n                fillCtx.transform(...maskToCanvas);\n                if (!scaled) {\n                    scaled = this._scaleImage(maskCanvas.canvas, (0, display_utils.getCurrentTransformInverse)(fillCtx));\n                    scaled = scaled.img;\n                    if (cache && isPatternFill) {\n                        cache.set(cacheKey, scaled);\n                    }\n                }\n                fillCtx.imageSmoothingEnabled = getImageSmoothingEnabled((0, display_utils.getCurrentTransform)(fillCtx), img.interpolate);\n                drawImageAtIntegerCoords(fillCtx, scaled, 0, 0, scaled.width, scaled.height, 0, 0, width, height);\n                fillCtx.globalCompositeOperation = \"source-in\";\n                const inverse = util.Util.transform((0, display_utils.getCurrentTransformInverse)(fillCtx), [\n                    1,\n                    0,\n                    0,\n                    1,\n                    -offsetX,\n                    -offsetY\n                ]);\n                fillCtx.fillStyle = isPatternFill ? fillColor.getPattern(ctx, this, inverse, PathType.FILL) : fillColor;\n                fillCtx.fillRect(0, 0, width, height);\n                if (cache && !isPatternFill) {\n                    this.cachedCanvases.delete(\"fillCanvas\");\n                    cache.set(cacheKey, fillCanvas.canvas);\n                }\n                return {\n                    canvas: fillCanvas.canvas,\n                    offsetX: Math.round(offsetX),\n                    offsetY: Math.round(offsetY)\n                };\n            }\n            setLineWidth(width) {\n                if (width !== this.current.lineWidth) {\n                    this._cachedScaleForStroking[0] = -1;\n                }\n                this.current.lineWidth = width;\n                this.ctx.lineWidth = width;\n            }\n            setLineCap(style) {\n                this.ctx.lineCap = LINE_CAP_STYLES[style];\n            }\n            setLineJoin(style) {\n                this.ctx.lineJoin = LINE_JOIN_STYLES[style];\n            }\n            setMiterLimit(limit) {\n                this.ctx.miterLimit = limit;\n            }\n            setDash(dashArray, dashPhase) {\n                const ctx = this.ctx;\n                if (ctx.setLineDash !== undefined) {\n                    ctx.setLineDash(dashArray);\n                    ctx.lineDashOffset = dashPhase;\n                }\n            }\n            setRenderingIntent(intent) {}\n            setFlatness(flatness) {}\n            setGState(states) {\n                for (const [key, value] of states){\n                    switch(key){\n                        case \"LW\":\n                            this.setLineWidth(value);\n                            break;\n                        case \"LC\":\n                            this.setLineCap(value);\n                            break;\n                        case \"LJ\":\n                            this.setLineJoin(value);\n                            break;\n                        case \"ML\":\n                            this.setMiterLimit(value);\n                            break;\n                        case \"D\":\n                            this.setDash(value[0], value[1]);\n                            break;\n                        case \"RI\":\n                            this.setRenderingIntent(value);\n                            break;\n                        case \"FL\":\n                            this.setFlatness(value);\n                            break;\n                        case \"Font\":\n                            this.setFont(value[0], value[1]);\n                            break;\n                        case \"CA\":\n                            this.current.strokeAlpha = value;\n                            break;\n                        case \"ca\":\n                            this.current.fillAlpha = value;\n                            this.ctx.globalAlpha = value;\n                            break;\n                        case \"BM\":\n                            this.ctx.globalCompositeOperation = value;\n                            break;\n                        case \"SMask\":\n                            this.current.activeSMask = value ? this.tempSMask : null;\n                            this.tempSMask = null;\n                            this.checkSMaskState();\n                            break;\n                        case \"TR\":\n                            this.ctx.filter = this.current.transferMaps = this.filterFactory.addFilter(value);\n                            break;\n                    }\n                }\n            }\n            get inSMaskMode() {\n                return !!this.suspendedCtx;\n            }\n            checkSMaskState() {\n                const inSMaskMode = this.inSMaskMode;\n                if (this.current.activeSMask && !inSMaskMode) {\n                    this.beginSMaskMode();\n                } else if (!this.current.activeSMask && inSMaskMode) {\n                    this.endSMaskMode();\n                }\n            }\n            beginSMaskMode() {\n                if (this.inSMaskMode) {\n                    throw new Error(\"beginSMaskMode called while already in smask mode\");\n                }\n                const drawnWidth = this.ctx.canvas.width;\n                const drawnHeight = this.ctx.canvas.height;\n                const cacheId = \"smaskGroupAt\" + this.groupLevel;\n                const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight);\n                this.suspendedCtx = this.ctx;\n                this.ctx = scratchCanvas.context;\n                const ctx = this.ctx;\n                ctx.setTransform(...(0, display_utils.getCurrentTransform)(this.suspendedCtx));\n                copyCtxState(this.suspendedCtx, ctx);\n                mirrorContextOperations(ctx, this.suspendedCtx);\n                this.setGState([\n                    [\n                        \"BM\",\n                        \"source-over\"\n                    ],\n                    [\n                        \"ca\",\n                        1\n                    ],\n                    [\n                        \"CA\",\n                        1\n                    ]\n                ]);\n            }\n            endSMaskMode() {\n                if (!this.inSMaskMode) {\n                    throw new Error(\"endSMaskMode called while not in smask mode\");\n                }\n                this.ctx._removeMirroring();\n                copyCtxState(this.ctx, this.suspendedCtx);\n                this.ctx = this.suspendedCtx;\n                this.suspendedCtx = null;\n            }\n            compose(dirtyBox) {\n                if (!this.current.activeSMask) {\n                    return;\n                }\n                if (!dirtyBox) {\n                    dirtyBox = [\n                        0,\n                        0,\n                        this.ctx.canvas.width,\n                        this.ctx.canvas.height\n                    ];\n                } else {\n                    dirtyBox[0] = Math.floor(dirtyBox[0]);\n                    dirtyBox[1] = Math.floor(dirtyBox[1]);\n                    dirtyBox[2] = Math.ceil(dirtyBox[2]);\n                    dirtyBox[3] = Math.ceil(dirtyBox[3]);\n                }\n                const smask = this.current.activeSMask;\n                const suspendedCtx = this.suspendedCtx;\n                composeSMask(suspendedCtx, smask, this.ctx, dirtyBox);\n                this.ctx.save();\n                this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n                this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n                this.ctx.restore();\n            }\n            save() {\n                if (this.inSMaskMode) {\n                    copyCtxState(this.ctx, this.suspendedCtx);\n                    this.suspendedCtx.save();\n                } else {\n                    this.ctx.save();\n                }\n                const old = this.current;\n                this.stateStack.push(old);\n                this.current = old.clone();\n            }\n            restore() {\n                if (this.stateStack.length === 0 && this.inSMaskMode) {\n                    this.endSMaskMode();\n                }\n                if (this.stateStack.length !== 0) {\n                    this.current = this.stateStack.pop();\n                    if (this.inSMaskMode) {\n                        this.suspendedCtx.restore();\n                        copyCtxState(this.suspendedCtx, this.ctx);\n                    } else {\n                        this.ctx.restore();\n                    }\n                    this.checkSMaskState();\n                    this.pendingClip = null;\n                    this._cachedScaleForStroking[0] = -1;\n                    this._cachedGetSinglePixelWidth = null;\n                }\n            }\n            transform(a, b, c, d, e, f) {\n                this.ctx.transform(a, b, c, d, e, f);\n                this._cachedScaleForStroking[0] = -1;\n                this._cachedGetSinglePixelWidth = null;\n            }\n            constructPath(ops, args, minMax) {\n                const ctx = this.ctx;\n                const current = this.current;\n                let x = current.x, y = current.y;\n                let startX, startY;\n                const currentTransform = (0, display_utils.getCurrentTransform)(ctx);\n                const isScalingMatrix = currentTransform[0] === 0 && currentTransform[3] === 0 || currentTransform[1] === 0 && currentTransform[2] === 0;\n                const minMaxForBezier = isScalingMatrix ? minMax.slice(0) : null;\n                for(let i = 0, j = 0, ii = ops.length; i < ii; i++){\n                    switch(ops[i] | 0){\n                        case util.OPS.rectangle:\n                            x = args[j++];\n                            y = args[j++];\n                            const width = args[j++];\n                            const height = args[j++];\n                            const xw = x + width;\n                            const yh = y + height;\n                            ctx.moveTo(x, y);\n                            if (width === 0 || height === 0) {\n                                ctx.lineTo(xw, yh);\n                            } else {\n                                ctx.lineTo(xw, y);\n                                ctx.lineTo(xw, yh);\n                                ctx.lineTo(x, yh);\n                            }\n                            if (!isScalingMatrix) {\n                                current.updateRectMinMax(currentTransform, [\n                                    x,\n                                    y,\n                                    xw,\n                                    yh\n                                ]);\n                            }\n                            ctx.closePath();\n                            break;\n                        case util.OPS.moveTo:\n                            x = args[j++];\n                            y = args[j++];\n                            ctx.moveTo(x, y);\n                            if (!isScalingMatrix) {\n                                current.updatePathMinMax(currentTransform, x, y);\n                            }\n                            break;\n                        case util.OPS.lineTo:\n                            x = args[j++];\n                            y = args[j++];\n                            ctx.lineTo(x, y);\n                            if (!isScalingMatrix) {\n                                current.updatePathMinMax(currentTransform, x, y);\n                            }\n                            break;\n                        case util.OPS.curveTo:\n                            startX = x;\n                            startY = y;\n                            x = args[j + 4];\n                            y = args[j + 5];\n                            ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);\n                            current.updateCurvePathMinMax(currentTransform, startX, startY, args[j], args[j + 1], args[j + 2], args[j + 3], x, y, minMaxForBezier);\n                            j += 6;\n                            break;\n                        case util.OPS.curveTo2:\n                            startX = x;\n                            startY = y;\n                            ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);\n                            current.updateCurvePathMinMax(currentTransform, startX, startY, x, y, args[j], args[j + 1], args[j + 2], args[j + 3], minMaxForBezier);\n                            x = args[j + 2];\n                            y = args[j + 3];\n                            j += 4;\n                            break;\n                        case util.OPS.curveTo3:\n                            startX = x;\n                            startY = y;\n                            x = args[j + 2];\n                            y = args[j + 3];\n                            ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\n                            current.updateCurvePathMinMax(currentTransform, startX, startY, args[j], args[j + 1], x, y, x, y, minMaxForBezier);\n                            j += 4;\n                            break;\n                        case util.OPS.closePath:\n                            ctx.closePath();\n                            break;\n                    }\n                }\n                if (isScalingMatrix) {\n                    current.updateScalingPathMinMax(currentTransform, minMaxForBezier);\n                }\n                current.setCurrentPoint(x, y);\n            }\n            closePath() {\n                this.ctx.closePath();\n            }\n            stroke(consumePath = true) {\n                const ctx = this.ctx;\n                const strokeColor = this.current.strokeColor;\n                ctx.globalAlpha = this.current.strokeAlpha;\n                if (this.contentVisible) {\n                    if (typeof strokeColor === \"object\" && strokeColor?.getPattern) {\n                        ctx.save();\n                        ctx.strokeStyle = strokeColor.getPattern(ctx, this, (0, display_utils.getCurrentTransformInverse)(ctx), PathType.STROKE);\n                        this.rescaleAndStroke(false);\n                        ctx.restore();\n                    } else {\n                        this.rescaleAndStroke(true);\n                    }\n                }\n                if (consumePath) {\n                    this.consumePath(this.current.getClippedPathBoundingBox());\n                }\n                ctx.globalAlpha = this.current.fillAlpha;\n            }\n            closeStroke() {\n                this.closePath();\n                this.stroke();\n            }\n            fill(consumePath = true) {\n                const ctx = this.ctx;\n                const fillColor = this.current.fillColor;\n                const isPatternFill = this.current.patternFill;\n                let needRestore = false;\n                if (isPatternFill) {\n                    ctx.save();\n                    ctx.fillStyle = fillColor.getPattern(ctx, this, (0, display_utils.getCurrentTransformInverse)(ctx), PathType.FILL);\n                    needRestore = true;\n                }\n                const intersect = this.current.getClippedPathBoundingBox();\n                if (this.contentVisible && intersect !== null) {\n                    if (this.pendingEOFill) {\n                        ctx.fill(\"evenodd\");\n                        this.pendingEOFill = false;\n                    } else {\n                        ctx.fill();\n                    }\n                }\n                if (needRestore) {\n                    ctx.restore();\n                }\n                if (consumePath) {\n                    this.consumePath(intersect);\n                }\n            }\n            eoFill() {\n                this.pendingEOFill = true;\n                this.fill();\n            }\n            fillStroke() {\n                this.fill(false);\n                this.stroke(false);\n                this.consumePath();\n            }\n            eoFillStroke() {\n                this.pendingEOFill = true;\n                this.fillStroke();\n            }\n            closeFillStroke() {\n                this.closePath();\n                this.fillStroke();\n            }\n            closeEOFillStroke() {\n                this.pendingEOFill = true;\n                this.closePath();\n                this.fillStroke();\n            }\n            endPath() {\n                this.consumePath();\n            }\n            clip() {\n                this.pendingClip = NORMAL_CLIP;\n            }\n            eoClip() {\n                this.pendingClip = EO_CLIP;\n            }\n            beginText() {\n                this.current.textMatrix = util.IDENTITY_MATRIX;\n                this.current.textMatrixScale = 1;\n                this.current.x = this.current.lineX = 0;\n                this.current.y = this.current.lineY = 0;\n            }\n            endText() {\n                const paths = this.pendingTextPaths;\n                const ctx = this.ctx;\n                if (paths === undefined) {\n                    ctx.beginPath();\n                    return;\n                }\n                ctx.save();\n                ctx.beginPath();\n                for (const path of paths){\n                    ctx.setTransform(...path.transform);\n                    ctx.translate(path.x, path.y);\n                    path.addToPath(ctx, path.fontSize);\n                }\n                ctx.restore();\n                ctx.clip();\n                ctx.beginPath();\n                delete this.pendingTextPaths;\n            }\n            setCharSpacing(spacing) {\n                this.current.charSpacing = spacing;\n            }\n            setWordSpacing(spacing) {\n                this.current.wordSpacing = spacing;\n            }\n            setHScale(scale) {\n                this.current.textHScale = scale / 100;\n            }\n            setLeading(leading) {\n                this.current.leading = -leading;\n            }\n            setFont(fontRefName, size) {\n                const fontObj = this.commonObjs.get(fontRefName);\n                const current = this.current;\n                if (!fontObj) {\n                    throw new Error(`Can't find font for ${fontRefName}`);\n                }\n                current.fontMatrix = fontObj.fontMatrix || util.FONT_IDENTITY_MATRIX;\n                if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\n                    (0, util.warn)(\"Invalid font matrix for font \" + fontRefName);\n                }\n                if (size < 0) {\n                    size = -size;\n                    current.fontDirection = -1;\n                } else {\n                    current.fontDirection = 1;\n                }\n                this.current.font = fontObj;\n                this.current.fontSize = size;\n                if (fontObj.isType3Font) {\n                    return;\n                }\n                const name = fontObj.loadedName || \"sans-serif\";\n                const typeface = fontObj.systemFontInfo?.css || `\"${name}\", ${fontObj.fallbackName}`;\n                let bold = \"normal\";\n                if (fontObj.black) {\n                    bold = \"900\";\n                } else if (fontObj.bold) {\n                    bold = \"bold\";\n                }\n                const italic = fontObj.italic ? \"italic\" : \"normal\";\n                let browserFontSize = size;\n                if (size < MIN_FONT_SIZE) {\n                    browserFontSize = MIN_FONT_SIZE;\n                } else if (size > MAX_FONT_SIZE) {\n                    browserFontSize = MAX_FONT_SIZE;\n                }\n                this.current.fontSizeScale = size / browserFontSize;\n                this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;\n            }\n            setTextRenderingMode(mode) {\n                this.current.textRenderingMode = mode;\n            }\n            setTextRise(rise) {\n                this.current.textRise = rise;\n            }\n            moveText(x, y) {\n                this.current.x = this.current.lineX += x;\n                this.current.y = this.current.lineY += y;\n            }\n            setLeadingMoveText(x, y) {\n                this.setLeading(-y);\n                this.moveText(x, y);\n            }\n            setTextMatrix(a, b, c, d, e, f) {\n                this.current.textMatrix = [\n                    a,\n                    b,\n                    c,\n                    d,\n                    e,\n                    f\n                ];\n                this.current.textMatrixScale = Math.hypot(a, b);\n                this.current.x = this.current.lineX = 0;\n                this.current.y = this.current.lineY = 0;\n            }\n            nextLine() {\n                this.moveText(0, this.current.leading);\n            }\n            paintChar(character, x, y, patternTransform) {\n                const ctx = this.ctx;\n                const current = this.current;\n                const font = current.font;\n                const textRenderingMode = current.textRenderingMode;\n                const fontSize = current.fontSize / current.fontSizeScale;\n                const fillStrokeMode = textRenderingMode & util.TextRenderingMode.FILL_STROKE_MASK;\n                const isAddToPathSet = !!(textRenderingMode & util.TextRenderingMode.ADD_TO_PATH_FLAG);\n                const patternFill = current.patternFill && !font.missingFile;\n                let addToPath;\n                if (font.disableFontFace || isAddToPathSet || patternFill) {\n                    addToPath = font.getPathGenerator(this.commonObjs, character);\n                }\n                if (font.disableFontFace || patternFill) {\n                    ctx.save();\n                    ctx.translate(x, y);\n                    ctx.beginPath();\n                    addToPath(ctx, fontSize);\n                    if (patternTransform) {\n                        ctx.setTransform(...patternTransform);\n                    }\n                    if (fillStrokeMode === util.TextRenderingMode.FILL || fillStrokeMode === util.TextRenderingMode.FILL_STROKE) {\n                        ctx.fill();\n                    }\n                    if (fillStrokeMode === util.TextRenderingMode.STROKE || fillStrokeMode === util.TextRenderingMode.FILL_STROKE) {\n                        ctx.stroke();\n                    }\n                    ctx.restore();\n                } else {\n                    if (fillStrokeMode === util.TextRenderingMode.FILL || fillStrokeMode === util.TextRenderingMode.FILL_STROKE) {\n                        ctx.fillText(character, x, y);\n                    }\n                    if (fillStrokeMode === util.TextRenderingMode.STROKE || fillStrokeMode === util.TextRenderingMode.FILL_STROKE) {\n                        ctx.strokeText(character, x, y);\n                    }\n                }\n                if (isAddToPathSet) {\n                    const paths = this.pendingTextPaths ||= [];\n                    paths.push({\n                        transform: (0, display_utils.getCurrentTransform)(ctx),\n                        x,\n                        y,\n                        fontSize,\n                        addToPath\n                    });\n                }\n            }\n            get isFontSubpixelAAEnabled() {\n                const { context: ctx } = this.cachedCanvases.getCanvas(\"isFontSubpixelAAEnabled\", 10, 10);\n                ctx.scale(1.5, 1);\n                ctx.fillText(\"I\", 0, 10);\n                const data = ctx.getImageData(0, 0, 10, 10).data;\n                let enabled = false;\n                for(let i = 3; i < data.length; i += 4){\n                    if (data[i] > 0 && data[i] < 255) {\n                        enabled = true;\n                        break;\n                    }\n                }\n                return (0, util.shadow)(this, \"isFontSubpixelAAEnabled\", enabled);\n            }\n            showText(glyphs) {\n                const current = this.current;\n                const font = current.font;\n                if (font.isType3Font) {\n                    return this.showType3Text(glyphs);\n                }\n                const fontSize = current.fontSize;\n                if (fontSize === 0) {\n                    return undefined;\n                }\n                const ctx = this.ctx;\n                const fontSizeScale = current.fontSizeScale;\n                const charSpacing = current.charSpacing;\n                const wordSpacing = current.wordSpacing;\n                const fontDirection = current.fontDirection;\n                const textHScale = current.textHScale * fontDirection;\n                const glyphsLength = glyphs.length;\n                const vertical = font.vertical;\n                const spacingDir = vertical ? 1 : -1;\n                const defaultVMetrics = font.defaultVMetrics;\n                const widthAdvanceScale = fontSize * current.fontMatrix[0];\n                const simpleFillText = current.textRenderingMode === util.TextRenderingMode.FILL && !font.disableFontFace && !current.patternFill;\n                ctx.save();\n                ctx.transform(...current.textMatrix);\n                ctx.translate(current.x, current.y + current.textRise);\n                if (fontDirection > 0) {\n                    ctx.scale(textHScale, -1);\n                } else {\n                    ctx.scale(textHScale, 1);\n                }\n                let patternTransform;\n                if (current.patternFill) {\n                    ctx.save();\n                    const pattern = current.fillColor.getPattern(ctx, this, (0, display_utils.getCurrentTransformInverse)(ctx), PathType.FILL);\n                    patternTransform = (0, display_utils.getCurrentTransform)(ctx);\n                    ctx.restore();\n                    ctx.fillStyle = pattern;\n                }\n                let lineWidth = current.lineWidth;\n                const scale = current.textMatrixScale;\n                if (scale === 0 || lineWidth === 0) {\n                    const fillStrokeMode = current.textRenderingMode & util.TextRenderingMode.FILL_STROKE_MASK;\n                    if (fillStrokeMode === util.TextRenderingMode.STROKE || fillStrokeMode === util.TextRenderingMode.FILL_STROKE) {\n                        lineWidth = this.getSinglePixelWidth();\n                    }\n                } else {\n                    lineWidth /= scale;\n                }\n                if (fontSizeScale !== 1.0) {\n                    ctx.scale(fontSizeScale, fontSizeScale);\n                    lineWidth /= fontSizeScale;\n                }\n                ctx.lineWidth = lineWidth;\n                if (font.isInvalidPDFjsFont) {\n                    const chars = [];\n                    let width = 0;\n                    for (const glyph of glyphs){\n                        chars.push(glyph.unicode);\n                        width += glyph.width;\n                    }\n                    ctx.fillText(chars.join(\"\"), 0, 0);\n                    current.x += width * widthAdvanceScale * textHScale;\n                    ctx.restore();\n                    this.compose();\n                    return undefined;\n                }\n                let x = 0, i;\n                for(i = 0; i < glyphsLength; ++i){\n                    const glyph = glyphs[i];\n                    if (typeof glyph === \"number\") {\n                        x += spacingDir * glyph * fontSize / 1000;\n                        continue;\n                    }\n                    let restoreNeeded = false;\n                    const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n                    const character = glyph.fontChar;\n                    const accent = glyph.accent;\n                    let scaledX, scaledY;\n                    let width = glyph.width;\n                    if (vertical) {\n                        const vmetric = glyph.vmetric || defaultVMetrics;\n                        const vx = -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;\n                        const vy = vmetric[2] * widthAdvanceScale;\n                        width = vmetric ? -vmetric[0] : width;\n                        scaledX = vx / fontSizeScale;\n                        scaledY = (x + vy) / fontSizeScale;\n                    } else {\n                        scaledX = x / fontSizeScale;\n                        scaledY = 0;\n                    }\n                    if (font.remeasure && width > 0) {\n                        const measuredWidth = ctx.measureText(character).width * 1000 / fontSize * fontSizeScale;\n                        if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\n                            const characterScaleX = width / measuredWidth;\n                            restoreNeeded = true;\n                            ctx.save();\n                            ctx.scale(characterScaleX, 1);\n                            scaledX /= characterScaleX;\n                        } else if (width !== measuredWidth) {\n                            scaledX += (width - measuredWidth) / 2000 * fontSize / fontSizeScale;\n                        }\n                    }\n                    if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\n                        if (simpleFillText && !accent) {\n                            ctx.fillText(character, scaledX, scaledY);\n                        } else {\n                            this.paintChar(character, scaledX, scaledY, patternTransform);\n                            if (accent) {\n                                const scaledAccentX = scaledX + fontSize * accent.offset.x / fontSizeScale;\n                                const scaledAccentY = scaledY - fontSize * accent.offset.y / fontSizeScale;\n                                this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY, patternTransform);\n                            }\n                        }\n                    }\n                    const charWidth = vertical ? width * widthAdvanceScale - spacing * fontDirection : width * widthAdvanceScale + spacing * fontDirection;\n                    x += charWidth;\n                    if (restoreNeeded) {\n                        ctx.restore();\n                    }\n                }\n                if (vertical) {\n                    current.y -= x;\n                } else {\n                    current.x += x * textHScale;\n                }\n                ctx.restore();\n                this.compose();\n                return undefined;\n            }\n            showType3Text(glyphs) {\n                const ctx = this.ctx;\n                const current = this.current;\n                const font = current.font;\n                const fontSize = current.fontSize;\n                const fontDirection = current.fontDirection;\n                const spacingDir = font.vertical ? 1 : -1;\n                const charSpacing = current.charSpacing;\n                const wordSpacing = current.wordSpacing;\n                const textHScale = current.textHScale * fontDirection;\n                const fontMatrix = current.fontMatrix || util.FONT_IDENTITY_MATRIX;\n                const glyphsLength = glyphs.length;\n                const isTextInvisible = current.textRenderingMode === util.TextRenderingMode.INVISIBLE;\n                let i, glyph, width, spacingLength;\n                if (isTextInvisible || fontSize === 0) {\n                    return;\n                }\n                this._cachedScaleForStroking[0] = -1;\n                this._cachedGetSinglePixelWidth = null;\n                ctx.save();\n                ctx.transform(...current.textMatrix);\n                ctx.translate(current.x, current.y);\n                ctx.scale(textHScale, fontDirection);\n                for(i = 0; i < glyphsLength; ++i){\n                    glyph = glyphs[i];\n                    if (typeof glyph === \"number\") {\n                        spacingLength = spacingDir * glyph * fontSize / 1000;\n                        this.ctx.translate(spacingLength, 0);\n                        current.x += spacingLength * textHScale;\n                        continue;\n                    }\n                    const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n                    const operatorList = font.charProcOperatorList[glyph.operatorListId];\n                    if (!operatorList) {\n                        (0, util.warn)(`Type3 character \"${glyph.operatorListId}\" is not available.`);\n                        continue;\n                    }\n                    if (this.contentVisible) {\n                        this.processingType3 = glyph;\n                        this.save();\n                        ctx.scale(fontSize, fontSize);\n                        ctx.transform(...fontMatrix);\n                        this.executeOperatorList(operatorList);\n                        this.restore();\n                    }\n                    const transformed = util.Util.applyTransform([\n                        glyph.width,\n                        0\n                    ], fontMatrix);\n                    width = transformed[0] * fontSize + spacing;\n                    ctx.translate(width, 0);\n                    current.x += width * textHScale;\n                }\n                ctx.restore();\n                this.processingType3 = null;\n            }\n            setCharWidth(xWidth, yWidth) {}\n            setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {\n                this.ctx.rect(llx, lly, urx - llx, ury - lly);\n                this.ctx.clip();\n                this.endPath();\n            }\n            getColorN_Pattern(IR) {\n                let pattern;\n                if (IR[0] === \"TilingPattern\") {\n                    const color = IR[1];\n                    const baseTransform = this.baseTransform || (0, display_utils.getCurrentTransform)(this.ctx);\n                    const canvasGraphicsFactory = {\n                        createCanvasGraphics: (ctx)=>{\n                            return new CanvasGraphics(ctx, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {\n                                optionalContentConfig: this.optionalContentConfig,\n                                markedContentStack: this.markedContentStack\n                            });\n                        }\n                    };\n                    pattern = new TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);\n                } else {\n                    pattern = this._getPattern(IR[1], IR[2]);\n                }\n                return pattern;\n            }\n            setStrokeColorN() {\n                this.current.strokeColor = this.getColorN_Pattern(arguments);\n            }\n            setFillColorN() {\n                this.current.fillColor = this.getColorN_Pattern(arguments);\n                this.current.patternFill = true;\n            }\n            setStrokeRGBColor(r, g, b) {\n                const color = util.Util.makeHexColor(r, g, b);\n                this.ctx.strokeStyle = color;\n                this.current.strokeColor = color;\n            }\n            setFillRGBColor(r, g, b) {\n                const color = util.Util.makeHexColor(r, g, b);\n                this.ctx.fillStyle = color;\n                this.current.fillColor = color;\n                this.current.patternFill = false;\n            }\n            _getPattern(objId, matrix = null) {\n                let pattern;\n                if (this.cachedPatterns.has(objId)) {\n                    pattern = this.cachedPatterns.get(objId);\n                } else {\n                    pattern = getShadingPattern(this.getObject(objId));\n                    this.cachedPatterns.set(objId, pattern);\n                }\n                if (matrix) {\n                    pattern.matrix = matrix;\n                }\n                return pattern;\n            }\n            shadingFill(objId) {\n                if (!this.contentVisible) {\n                    return;\n                }\n                const ctx = this.ctx;\n                this.save();\n                const pattern = this._getPattern(objId);\n                ctx.fillStyle = pattern.getPattern(ctx, this, (0, display_utils.getCurrentTransformInverse)(ctx), PathType.SHADING);\n                const inv = (0, display_utils.getCurrentTransformInverse)(ctx);\n                if (inv) {\n                    const { width, height } = ctx.canvas;\n                    const [x0, y0, x1, y1] = util.Util.getAxialAlignedBoundingBox([\n                        0,\n                        0,\n                        width,\n                        height\n                    ], inv);\n                    this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n                } else {\n                    this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n                }\n                this.compose(this.current.getClippedPathBoundingBox());\n                this.restore();\n            }\n            beginInlineImage() {\n                (0, util.unreachable)(\"Should not call beginInlineImage\");\n            }\n            beginImageData() {\n                (0, util.unreachable)(\"Should not call beginImageData\");\n            }\n            paintFormXObjectBegin(matrix, bbox) {\n                if (!this.contentVisible) {\n                    return;\n                }\n                this.save();\n                this.baseTransformStack.push(this.baseTransform);\n                if (Array.isArray(matrix) && matrix.length === 6) {\n                    this.transform(...matrix);\n                }\n                this.baseTransform = (0, display_utils.getCurrentTransform)(this.ctx);\n                if (bbox) {\n                    const width = bbox[2] - bbox[0];\n                    const height = bbox[3] - bbox[1];\n                    this.ctx.rect(bbox[0], bbox[1], width, height);\n                    this.current.updateRectMinMax((0, display_utils.getCurrentTransform)(this.ctx), bbox);\n                    this.clip();\n                    this.endPath();\n                }\n            }\n            paintFormXObjectEnd() {\n                if (!this.contentVisible) {\n                    return;\n                }\n                this.restore();\n                this.baseTransform = this.baseTransformStack.pop();\n            }\n            beginGroup(group) {\n                if (!this.contentVisible) {\n                    return;\n                }\n                this.save();\n                if (this.inSMaskMode) {\n                    this.endSMaskMode();\n                    this.current.activeSMask = null;\n                }\n                const currentCtx = this.ctx;\n                if (!group.isolated) {\n                    (0, util.info)(\"TODO: Support non-isolated groups.\");\n                }\n                if (group.knockout) {\n                    (0, util.warn)(\"Knockout groups not supported.\");\n                }\n                const currentTransform = (0, display_utils.getCurrentTransform)(currentCtx);\n                if (group.matrix) {\n                    currentCtx.transform(...group.matrix);\n                }\n                if (!group.bbox) {\n                    throw new Error(\"Bounding box is required.\");\n                }\n                let bounds = util.Util.getAxialAlignedBoundingBox(group.bbox, (0, display_utils.getCurrentTransform)(currentCtx));\n                const canvasBounds = [\n                    0,\n                    0,\n                    currentCtx.canvas.width,\n                    currentCtx.canvas.height\n                ];\n                bounds = util.Util.intersect(bounds, canvasBounds) || [\n                    0,\n                    0,\n                    0,\n                    0\n                ];\n                const offsetX = Math.floor(bounds[0]);\n                const offsetY = Math.floor(bounds[1]);\n                let drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\n                let drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\n                let scaleX = 1, scaleY = 1;\n                if (drawnWidth > MAX_GROUP_SIZE) {\n                    scaleX = drawnWidth / MAX_GROUP_SIZE;\n                    drawnWidth = MAX_GROUP_SIZE;\n                }\n                if (drawnHeight > MAX_GROUP_SIZE) {\n                    scaleY = drawnHeight / MAX_GROUP_SIZE;\n                    drawnHeight = MAX_GROUP_SIZE;\n                }\n                this.current.startNewPathAndClipBox([\n                    0,\n                    0,\n                    drawnWidth,\n                    drawnHeight\n                ]);\n                let cacheId = \"groupAt\" + this.groupLevel;\n                if (group.smask) {\n                    cacheId += \"_smask_\" + this.smaskCounter++ % 2;\n                }\n                const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight);\n                const groupCtx = scratchCanvas.context;\n                groupCtx.scale(1 / scaleX, 1 / scaleY);\n                groupCtx.translate(-offsetX, -offsetY);\n                groupCtx.transform(...currentTransform);\n                if (group.smask) {\n                    this.smaskStack.push({\n                        canvas: scratchCanvas.canvas,\n                        context: groupCtx,\n                        offsetX,\n                        offsetY,\n                        scaleX,\n                        scaleY,\n                        subtype: group.smask.subtype,\n                        backdrop: group.smask.backdrop,\n                        transferMap: group.smask.transferMap || null,\n                        startTransformInverse: null\n                    });\n                } else {\n                    currentCtx.setTransform(1, 0, 0, 1, 0, 0);\n                    currentCtx.translate(offsetX, offsetY);\n                    currentCtx.scale(scaleX, scaleY);\n                    currentCtx.save();\n                }\n                copyCtxState(currentCtx, groupCtx);\n                this.ctx = groupCtx;\n                this.setGState([\n                    [\n                        \"BM\",\n                        \"source-over\"\n                    ],\n                    [\n                        \"ca\",\n                        1\n                    ],\n                    [\n                        \"CA\",\n                        1\n                    ]\n                ]);\n                this.groupStack.push(currentCtx);\n                this.groupLevel++;\n            }\n            endGroup(group) {\n                if (!this.contentVisible) {\n                    return;\n                }\n                this.groupLevel--;\n                const groupCtx = this.ctx;\n                const ctx = this.groupStack.pop();\n                this.ctx = ctx;\n                this.ctx.imageSmoothingEnabled = false;\n                if (group.smask) {\n                    this.tempSMask = this.smaskStack.pop();\n                    this.restore();\n                } else {\n                    this.ctx.restore();\n                    const currentMtx = (0, display_utils.getCurrentTransform)(this.ctx);\n                    this.restore();\n                    this.ctx.save();\n                    this.ctx.setTransform(...currentMtx);\n                    const dirtyBox = util.Util.getAxialAlignedBoundingBox([\n                        0,\n                        0,\n                        groupCtx.canvas.width,\n                        groupCtx.canvas.height\n                    ], currentMtx);\n                    this.ctx.drawImage(groupCtx.canvas, 0, 0);\n                    this.ctx.restore();\n                    this.compose(dirtyBox);\n                }\n            }\n            beginAnnotation(id, rect, transform, matrix, hasOwnCanvas) {\n                this.#restoreInitialState();\n                resetCtxToDefault(this.ctx);\n                this.ctx.save();\n                this.save();\n                if (this.baseTransform) {\n                    this.ctx.setTransform(...this.baseTransform);\n                }\n                if (Array.isArray(rect) && rect.length === 4) {\n                    const width = rect[2] - rect[0];\n                    const height = rect[3] - rect[1];\n                    if (hasOwnCanvas && this.annotationCanvasMap) {\n                        transform = transform.slice();\n                        transform[4] -= rect[0];\n                        transform[5] -= rect[1];\n                        rect = rect.slice();\n                        rect[0] = rect[1] = 0;\n                        rect[2] = width;\n                        rect[3] = height;\n                        const [scaleX, scaleY] = util.Util.singularValueDecompose2dScale((0, display_utils.getCurrentTransform)(this.ctx));\n                        const { viewportScale } = this;\n                        const canvasWidth = Math.ceil(width * this.outputScaleX * viewportScale);\n                        const canvasHeight = Math.ceil(height * this.outputScaleY * viewportScale);\n                        this.annotationCanvas = this.canvasFactory.create(canvasWidth, canvasHeight);\n                        const { canvas, context } = this.annotationCanvas;\n                        this.annotationCanvasMap.set(id, canvas);\n                        this.annotationCanvas.savedCtx = this.ctx;\n                        this.ctx = context;\n                        this.ctx.save();\n                        this.ctx.setTransform(scaleX, 0, 0, -scaleY, 0, height * scaleY);\n                        resetCtxToDefault(this.ctx);\n                    } else {\n                        resetCtxToDefault(this.ctx);\n                        this.ctx.rect(rect[0], rect[1], width, height);\n                        this.ctx.clip();\n                        this.endPath();\n                    }\n                }\n                this.current = new CanvasExtraState(this.ctx.canvas.width, this.ctx.canvas.height);\n                this.transform(...transform);\n                this.transform(...matrix);\n            }\n            endAnnotation() {\n                if (this.annotationCanvas) {\n                    this.ctx.restore();\n                    this.#drawFilter();\n                    this.ctx = this.annotationCanvas.savedCtx;\n                    delete this.annotationCanvas.savedCtx;\n                    delete this.annotationCanvas;\n                }\n            }\n            paintImageMaskXObject(img) {\n                if (!this.contentVisible) {\n                    return;\n                }\n                const count = img.count;\n                img = this.getObject(img.data, img);\n                img.count = count;\n                const ctx = this.ctx;\n                const glyph = this.processingType3;\n                if (glyph) {\n                    if (glyph.compiled === undefined) {\n                        glyph.compiled = compileType3Glyph(img);\n                    }\n                    if (glyph.compiled) {\n                        glyph.compiled(ctx);\n                        return;\n                    }\n                }\n                const mask = this._createMaskCanvas(img);\n                const maskCanvas = mask.canvas;\n                ctx.save();\n                ctx.setTransform(1, 0, 0, 1, 0, 0);\n                ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);\n                ctx.restore();\n                this.compose();\n            }\n            paintImageMaskXObjectRepeat(img, scaleX, skewX = 0, skewY = 0, scaleY, positions) {\n                if (!this.contentVisible) {\n                    return;\n                }\n                img = this.getObject(img.data, img);\n                const ctx = this.ctx;\n                ctx.save();\n                const currentTransform = (0, display_utils.getCurrentTransform)(ctx);\n                ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);\n                const mask = this._createMaskCanvas(img);\n                ctx.setTransform(1, 0, 0, 1, mask.offsetX - currentTransform[4], mask.offsetY - currentTransform[5]);\n                for(let i = 0, ii = positions.length; i < ii; i += 2){\n                    const trans = util.Util.transform(currentTransform, [\n                        scaleX,\n                        skewX,\n                        skewY,\n                        scaleY,\n                        positions[i],\n                        positions[i + 1]\n                    ]);\n                    const [x, y] = util.Util.applyTransform([\n                        0,\n                        0\n                    ], trans);\n                    ctx.drawImage(mask.canvas, x, y);\n                }\n                ctx.restore();\n                this.compose();\n            }\n            paintImageMaskXObjectGroup(images) {\n                if (!this.contentVisible) {\n                    return;\n                }\n                const ctx = this.ctx;\n                const fillColor = this.current.fillColor;\n                const isPatternFill = this.current.patternFill;\n                for (const image of images){\n                    const { data, width, height, transform } = image;\n                    const maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n                    const maskCtx = maskCanvas.context;\n                    maskCtx.save();\n                    const img = this.getObject(data, image);\n                    putBinaryImageMask(maskCtx, img);\n                    maskCtx.globalCompositeOperation = \"source-in\";\n                    maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this, (0, display_utils.getCurrentTransformInverse)(ctx), PathType.FILL) : fillColor;\n                    maskCtx.fillRect(0, 0, width, height);\n                    maskCtx.restore();\n                    ctx.save();\n                    ctx.transform(...transform);\n                    ctx.scale(1, -1);\n                    drawImageAtIntegerCoords(ctx, maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n                    ctx.restore();\n                }\n                this.compose();\n            }\n            paintImageXObject(objId) {\n                if (!this.contentVisible) {\n                    return;\n                }\n                const imgData = this.getObject(objId);\n                if (!imgData) {\n                    (0, util.warn)(\"Dependent image isn't ready yet\");\n                    return;\n                }\n                this.paintInlineImageXObject(imgData);\n            }\n            paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {\n                if (!this.contentVisible) {\n                    return;\n                }\n                const imgData = this.getObject(objId);\n                if (!imgData) {\n                    (0, util.warn)(\"Dependent image isn't ready yet\");\n                    return;\n                }\n                const width = imgData.width;\n                const height = imgData.height;\n                const map = [];\n                for(let i = 0, ii = positions.length; i < ii; i += 2){\n                    map.push({\n                        transform: [\n                            scaleX,\n                            0,\n                            0,\n                            scaleY,\n                            positions[i],\n                            positions[i + 1]\n                        ],\n                        x: 0,\n                        y: 0,\n                        w: width,\n                        h: height\n                    });\n                }\n                this.paintInlineImageXObjectGroup(imgData, map);\n            }\n            applyTransferMapsToCanvas(ctx) {\n                if (this.current.transferMaps !== \"none\") {\n                    ctx.filter = this.current.transferMaps;\n                    ctx.drawImage(ctx.canvas, 0, 0);\n                    ctx.filter = \"none\";\n                }\n                return ctx.canvas;\n            }\n            applyTransferMapsToBitmap(imgData) {\n                if (this.current.transferMaps === \"none\") {\n                    return imgData.bitmap;\n                }\n                const { bitmap, width, height } = imgData;\n                const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", width, height);\n                const tmpCtx = tmpCanvas.context;\n                tmpCtx.filter = this.current.transferMaps;\n                tmpCtx.drawImage(bitmap, 0, 0);\n                tmpCtx.filter = \"none\";\n                return tmpCanvas.canvas;\n            }\n            paintInlineImageXObject(imgData) {\n                if (!this.contentVisible) {\n                    return;\n                }\n                const width = imgData.width;\n                const height = imgData.height;\n                const ctx = this.ctx;\n                this.save();\n                if (!util.isNodeJS) {\n                    const { filter } = ctx;\n                    if (filter !== \"none\" && filter !== \"\") {\n                        ctx.filter = \"none\";\n                    }\n                }\n                ctx.scale(1 / width, -1 / height);\n                let imgToPaint;\n                if (imgData.bitmap) {\n                    imgToPaint = this.applyTransferMapsToBitmap(imgData);\n                } else if (typeof HTMLElement === \"function\" && imgData instanceof HTMLElement || !imgData.data) {\n                    imgToPaint = imgData;\n                } else {\n                    const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", width, height);\n                    const tmpCtx = tmpCanvas.context;\n                    putBinaryImageData(tmpCtx, imgData);\n                    imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);\n                }\n                const scaled = this._scaleImage(imgToPaint, (0, display_utils.getCurrentTransformInverse)(ctx));\n                ctx.imageSmoothingEnabled = getImageSmoothingEnabled((0, display_utils.getCurrentTransform)(ctx), imgData.interpolate);\n                drawImageAtIntegerCoords(ctx, scaled.img, 0, 0, scaled.paintWidth, scaled.paintHeight, 0, -height, width, height);\n                this.compose();\n                this.restore();\n            }\n            paintInlineImageXObjectGroup(imgData, map) {\n                if (!this.contentVisible) {\n                    return;\n                }\n                const ctx = this.ctx;\n                let imgToPaint;\n                if (imgData.bitmap) {\n                    imgToPaint = imgData.bitmap;\n                } else {\n                    const w = imgData.width;\n                    const h = imgData.height;\n                    const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", w, h);\n                    const tmpCtx = tmpCanvas.context;\n                    putBinaryImageData(tmpCtx, imgData);\n                    imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);\n                }\n                for (const entry of map){\n                    ctx.save();\n                    ctx.transform(...entry.transform);\n                    ctx.scale(1, -1);\n                    drawImageAtIntegerCoords(ctx, imgToPaint, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);\n                    ctx.restore();\n                }\n                this.compose();\n            }\n            paintSolidColorImageMask() {\n                if (!this.contentVisible) {\n                    return;\n                }\n                this.ctx.fillRect(0, 0, 1, 1);\n                this.compose();\n            }\n            markPoint(tag) {}\n            markPointProps(tag, properties) {}\n            beginMarkedContent(tag) {\n                this.markedContentStack.push({\n                    visible: true\n                });\n            }\n            beginMarkedContentProps(tag, properties) {\n                if (tag === \"OC\") {\n                    this.markedContentStack.push({\n                        visible: this.optionalContentConfig.isVisible(properties)\n                    });\n                } else {\n                    this.markedContentStack.push({\n                        visible: true\n                    });\n                }\n                this.contentVisible = this.isContentVisible();\n            }\n            endMarkedContent() {\n                this.markedContentStack.pop();\n                this.contentVisible = this.isContentVisible();\n            }\n            beginCompat() {}\n            endCompat() {}\n            consumePath(clipBox) {\n                const isEmpty = this.current.isEmptyClip();\n                if (this.pendingClip) {\n                    this.current.updateClipFromPath();\n                }\n                if (!this.pendingClip) {\n                    this.compose(clipBox);\n                }\n                const ctx = this.ctx;\n                if (this.pendingClip) {\n                    if (!isEmpty) {\n                        if (this.pendingClip === EO_CLIP) {\n                            ctx.clip(\"evenodd\");\n                        } else {\n                            ctx.clip();\n                        }\n                    }\n                    this.pendingClip = null;\n                }\n                this.current.startNewPathAndClipBox(this.current.clipBox);\n                ctx.beginPath();\n            }\n            getSinglePixelWidth() {\n                if (!this._cachedGetSinglePixelWidth) {\n                    const m = (0, display_utils.getCurrentTransform)(this.ctx);\n                    if (m[1] === 0 && m[2] === 0) {\n                        this._cachedGetSinglePixelWidth = 1 / Math.min(Math.abs(m[0]), Math.abs(m[3]));\n                    } else {\n                        const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);\n                        const normX = Math.hypot(m[0], m[2]);\n                        const normY = Math.hypot(m[1], m[3]);\n                        this._cachedGetSinglePixelWidth = Math.max(normX, normY) / absDet;\n                    }\n                }\n                return this._cachedGetSinglePixelWidth;\n            }\n            getScaleForStroking() {\n                if (this._cachedScaleForStroking[0] === -1) {\n                    const { lineWidth } = this.current;\n                    const { a, b, c, d } = this.ctx.getTransform();\n                    let scaleX, scaleY;\n                    if (b === 0 && c === 0) {\n                        const normX = Math.abs(a);\n                        const normY = Math.abs(d);\n                        if (normX === normY) {\n                            if (lineWidth === 0) {\n                                scaleX = scaleY = 1 / normX;\n                            } else {\n                                const scaledLineWidth = normX * lineWidth;\n                                scaleX = scaleY = scaledLineWidth < 1 ? 1 / scaledLineWidth : 1;\n                            }\n                        } else if (lineWidth === 0) {\n                            scaleX = 1 / normX;\n                            scaleY = 1 / normY;\n                        } else {\n                            const scaledXLineWidth = normX * lineWidth;\n                            const scaledYLineWidth = normY * lineWidth;\n                            scaleX = scaledXLineWidth < 1 ? 1 / scaledXLineWidth : 1;\n                            scaleY = scaledYLineWidth < 1 ? 1 / scaledYLineWidth : 1;\n                        }\n                    } else {\n                        const absDet = Math.abs(a * d - b * c);\n                        const normX = Math.hypot(a, b);\n                        const normY = Math.hypot(c, d);\n                        if (lineWidth === 0) {\n                            scaleX = normY / absDet;\n                            scaleY = normX / absDet;\n                        } else {\n                            const baseArea = lineWidth * absDet;\n                            scaleX = normY > baseArea ? normY / baseArea : 1;\n                            scaleY = normX > baseArea ? normX / baseArea : 1;\n                        }\n                    }\n                    this._cachedScaleForStroking[0] = scaleX;\n                    this._cachedScaleForStroking[1] = scaleY;\n                }\n                return this._cachedScaleForStroking;\n            }\n            rescaleAndStroke(saveRestore) {\n                const { ctx } = this;\n                const { lineWidth } = this.current;\n                const [scaleX, scaleY] = this.getScaleForStroking();\n                ctx.lineWidth = lineWidth || 1;\n                if (scaleX === 1 && scaleY === 1) {\n                    ctx.stroke();\n                    return;\n                }\n                const dashes = ctx.getLineDash();\n                if (saveRestore) {\n                    ctx.save();\n                }\n                ctx.scale(scaleX, scaleY);\n                if (dashes.length > 0) {\n                    const scale = Math.max(scaleX, scaleY);\n                    ctx.setLineDash(dashes.map((x)=>x / scale));\n                    ctx.lineDashOffset /= scale;\n                }\n                ctx.stroke();\n                if (saveRestore) {\n                    ctx.restore();\n                }\n            }\n            isContentVisible() {\n                for(let i = this.markedContentStack.length - 1; i >= 0; i--){\n                    if (!this.markedContentStack[i].visible) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        for(const op in util.OPS){\n            if (CanvasGraphics.prototype[op] !== undefined) {\n                CanvasGraphics.prototype[util.OPS[op]] = CanvasGraphics.prototype[op];\n            }\n        }\n    /***/ },\n    /***/ 473: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_362539__)=>{\n        /* harmony export */ __nested_webpack_require_362539__.d(__nested_webpack_exports__, {\n            /* harmony export */ DOMCMapReaderFactory: ()=>/* binding */ DOMCMapReaderFactory,\n            /* harmony export */ DOMCanvasFactory: ()=>/* binding */ DOMCanvasFactory,\n            /* harmony export */ DOMFilterFactory: ()=>/* binding */ DOMFilterFactory,\n            /* harmony export */ DOMSVGFactory: ()=>/* binding */ DOMSVGFactory,\n            /* harmony export */ DOMStandardFontDataFactory: ()=>/* binding */ DOMStandardFontDataFactory,\n            /* harmony export */ PDFDateString: ()=>/* binding */ PDFDateString,\n            /* harmony export */ PageViewport: ()=>/* binding */ PageViewport,\n            /* harmony export */ PixelsPerInch: ()=>/* binding */ PixelsPerInch,\n            /* harmony export */ RenderingCancelledException: ()=>/* binding */ RenderingCancelledException,\n            /* harmony export */ StatTimer: ()=>/* binding */ StatTimer,\n            /* harmony export */ fetchData: ()=>/* binding */ fetchData,\n            /* harmony export */ getColorValues: ()=>/* binding */ getColorValues,\n            /* harmony export */ getCurrentTransform: ()=>/* binding */ getCurrentTransform,\n            /* harmony export */ getCurrentTransformInverse: ()=>/* binding */ getCurrentTransformInverse,\n            /* harmony export */ getFilenameFromUrl: ()=>/* binding */ getFilenameFromUrl,\n            /* harmony export */ getPdfFilenameFromUrl: ()=>/* binding */ getPdfFilenameFromUrl,\n            /* harmony export */ getRGB: ()=>/* binding */ getRGB,\n            /* harmony export */ getXfaPageViewport: ()=>/* binding */ getXfaPageViewport,\n            /* harmony export */ isDataScheme: ()=>/* binding */ isDataScheme,\n            /* harmony export */ isPdfFile: ()=>/* binding */ isPdfFile,\n            /* harmony export */ isValidFetchUrl: ()=>/* binding */ isValidFetchUrl,\n            /* harmony export */ noContextMenu: ()=>/* binding */ noContextMenu,\n            /* harmony export */ setLayerDimensions: ()=>/* binding */ setLayerDimensions\n        });\n        /* unused harmony export deprecated */ /* harmony import */ var _base_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_362539__(822);\n        /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_362539__(266);\n        const SVG_NS = \"http://www.w3.org/2000/svg\";\n        class PixelsPerInch {\n            static{\n                this.CSS = 96.0;\n            }\n            static{\n                this.PDF = 72.0;\n            }\n            static{\n                this.PDF_TO_CSS_UNITS = this.CSS / this.PDF;\n            }\n        }\n        class DOMFilterFactory extends _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseFilterFactory {\n            #_cache;\n            #_defs;\n            #docId;\n            #document;\n            #hcmFilter;\n            #hcmKey;\n            #hcmUrl;\n            #hcmHighlightFilter;\n            #hcmHighlightKey;\n            #hcmHighlightUrl;\n            #id;\n            constructor({ docId, ownerDocument = globalThis.document } = {}){\n                super();\n                this.#id = 0;\n                this.#docId = docId;\n                this.#document = ownerDocument;\n            }\n            get #cache() {\n                return this.#_cache ||= new Map();\n            }\n            get #defs() {\n                if (!this.#_defs) {\n                    const div = this.#document.createElement(\"div\");\n                    const { style } = div;\n                    style.visibility = \"hidden\";\n                    style.contain = \"strict\";\n                    style.width = style.height = 0;\n                    style.position = \"absolute\";\n                    style.top = style.left = 0;\n                    style.zIndex = -1;\n                    const svg = this.#document.createElementNS(SVG_NS, \"svg\");\n                    svg.setAttribute(\"width\", 0);\n                    svg.setAttribute(\"height\", 0);\n                    this.#_defs = this.#document.createElementNS(SVG_NS, \"defs\");\n                    div.append(svg);\n                    svg.append(this.#_defs);\n                    this.#document.body.append(div);\n                }\n                return this.#_defs;\n            }\n            addFilter(maps) {\n                if (!maps) {\n                    return \"none\";\n                }\n                let value = this.#cache.get(maps);\n                if (value) {\n                    return value;\n                }\n                let tableR, tableG, tableB, key;\n                if (maps.length === 1) {\n                    const mapR = maps[0];\n                    const buffer = new Array(256);\n                    for(let i = 0; i < 256; i++){\n                        buffer[i] = mapR[i] / 255;\n                    }\n                    key = tableR = tableG = tableB = buffer.join(\",\");\n                } else {\n                    const [mapR, mapG, mapB] = maps;\n                    const bufferR = new Array(256);\n                    const bufferG = new Array(256);\n                    const bufferB = new Array(256);\n                    for(let i = 0; i < 256; i++){\n                        bufferR[i] = mapR[i] / 255;\n                        bufferG[i] = mapG[i] / 255;\n                        bufferB[i] = mapB[i] / 255;\n                    }\n                    tableR = bufferR.join(\",\");\n                    tableG = bufferG.join(\",\");\n                    tableB = bufferB.join(\",\");\n                    key = `${tableR}${tableG}${tableB}`;\n                }\n                value = this.#cache.get(key);\n                if (value) {\n                    this.#cache.set(maps, value);\n                    return value;\n                }\n                const id = `g_${this.#docId}_transfer_map_${this.#id++}`;\n                const url = `url(#${id})`;\n                this.#cache.set(maps, url);\n                this.#cache.set(key, url);\n                const filter = this.#createFilter(id);\n                this.#addTransferMapConversion(tableR, tableG, tableB, filter);\n                return url;\n            }\n            addHCMFilter(fgColor, bgColor) {\n                const key = `${fgColor}-${bgColor}`;\n                if (this.#hcmKey === key) {\n                    return this.#hcmUrl;\n                }\n                this.#hcmKey = key;\n                this.#hcmUrl = \"none\";\n                this.#hcmFilter?.remove();\n                if (!fgColor || !bgColor) {\n                    return this.#hcmUrl;\n                }\n                const fgRGB = this.#getRGB(fgColor);\n                fgColor = _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.Util.makeHexColor(...fgRGB);\n                const bgRGB = this.#getRGB(bgColor);\n                bgColor = _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.Util.makeHexColor(...bgRGB);\n                this.#defs.style.color = \"\";\n                if (fgColor === \"#000000\" && bgColor === \"#ffffff\" || fgColor === bgColor) {\n                    return this.#hcmUrl;\n                }\n                const map = new Array(256);\n                for(let i = 0; i <= 255; i++){\n                    const x = i / 255;\n                    map[i] = x <= 0.03928 ? x / 12.92 : ((x + 0.055) / 1.055) ** 2.4;\n                }\n                const table = map.join(\",\");\n                const id = `g_${this.#docId}_hcm_filter`;\n                const filter = this.#hcmHighlightFilter = this.#createFilter(id);\n                this.#addTransferMapConversion(table, table, table, filter);\n                this.#addGrayConversion(filter);\n                const getSteps = (c, n)=>{\n                    const start = fgRGB[c] / 255;\n                    const end = bgRGB[c] / 255;\n                    const arr = new Array(n + 1);\n                    for(let i = 0; i <= n; i++){\n                        arr[i] = start + i / n * (end - start);\n                    }\n                    return arr.join(\",\");\n                };\n                this.#addTransferMapConversion(getSteps(0, 5), getSteps(1, 5), getSteps(2, 5), filter);\n                this.#hcmUrl = `url(#${id})`;\n                return this.#hcmUrl;\n            }\n            addHighlightHCMFilter(fgColor, bgColor, newFgColor, newBgColor) {\n                const key = `${fgColor}-${bgColor}-${newFgColor}-${newBgColor}`;\n                if (this.#hcmHighlightKey === key) {\n                    return this.#hcmHighlightUrl;\n                }\n                this.#hcmHighlightKey = key;\n                this.#hcmHighlightUrl = \"none\";\n                this.#hcmHighlightFilter?.remove();\n                if (!fgColor || !bgColor) {\n                    return this.#hcmHighlightUrl;\n                }\n                const [fgRGB, bgRGB] = [\n                    fgColor,\n                    bgColor\n                ].map(this.#getRGB.bind(this));\n                let fgGray = Math.round(0.2126 * fgRGB[0] + 0.7152 * fgRGB[1] + 0.0722 * fgRGB[2]);\n                let bgGray = Math.round(0.2126 * bgRGB[0] + 0.7152 * bgRGB[1] + 0.0722 * bgRGB[2]);\n                let [newFgRGB, newBgRGB] = [\n                    newFgColor,\n                    newBgColor\n                ].map(this.#getRGB.bind(this));\n                if (bgGray < fgGray) {\n                    [fgGray, bgGray, newFgRGB, newBgRGB] = [\n                        bgGray,\n                        fgGray,\n                        newBgRGB,\n                        newFgRGB\n                    ];\n                }\n                this.#defs.style.color = \"\";\n                const getSteps = (fg, bg, n)=>{\n                    const arr = new Array(256);\n                    const step = (bgGray - fgGray) / n;\n                    const newStart = fg / 255;\n                    const newStep = (bg - fg) / (255 * n);\n                    let prev = 0;\n                    for(let i = 0; i <= n; i++){\n                        const k = Math.round(fgGray + i * step);\n                        const value = newStart + i * newStep;\n                        for(let j = prev; j <= k; j++){\n                            arr[j] = value;\n                        }\n                        prev = k + 1;\n                    }\n                    for(let i = prev; i < 256; i++){\n                        arr[i] = arr[prev - 1];\n                    }\n                    return arr.join(\",\");\n                };\n                const id = `g_${this.#docId}_hcm_highlight_filter`;\n                const filter = this.#hcmHighlightFilter = this.#createFilter(id);\n                this.#addGrayConversion(filter);\n                this.#addTransferMapConversion(getSteps(newFgRGB[0], newBgRGB[0], 5), getSteps(newFgRGB[1], newBgRGB[1], 5), getSteps(newFgRGB[2], newBgRGB[2], 5), filter);\n                this.#hcmHighlightUrl = `url(#${id})`;\n                return this.#hcmHighlightUrl;\n            }\n            destroy(keepHCM = false) {\n                if (keepHCM && (this.#hcmUrl || this.#hcmHighlightUrl)) {\n                    return;\n                }\n                if (this.#_defs) {\n                    this.#_defs.parentNode.parentNode.remove();\n                    this.#_defs = null;\n                }\n                if (this.#_cache) {\n                    this.#_cache.clear();\n                    this.#_cache = null;\n                }\n                this.#id = 0;\n            }\n            #addGrayConversion(filter) {\n                const feColorMatrix = this.#document.createElementNS(SVG_NS, \"feColorMatrix\");\n                feColorMatrix.setAttribute(\"type\", \"matrix\");\n                feColorMatrix.setAttribute(\"values\", \"0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0\");\n                filter.append(feColorMatrix);\n            }\n            #createFilter(id) {\n                const filter = this.#document.createElementNS(SVG_NS, \"filter\");\n                filter.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n                filter.setAttribute(\"id\", id);\n                this.#defs.append(filter);\n                return filter;\n            }\n            #appendFeFunc(feComponentTransfer, func, table) {\n                const feFunc = this.#document.createElementNS(SVG_NS, func);\n                feFunc.setAttribute(\"type\", \"discrete\");\n                feFunc.setAttribute(\"tableValues\", table);\n                feComponentTransfer.append(feFunc);\n            }\n            #addTransferMapConversion(rTable, gTable, bTable, filter) {\n                const feComponentTransfer = this.#document.createElementNS(SVG_NS, \"feComponentTransfer\");\n                filter.append(feComponentTransfer);\n                this.#appendFeFunc(feComponentTransfer, \"feFuncR\", rTable);\n                this.#appendFeFunc(feComponentTransfer, \"feFuncG\", gTable);\n                this.#appendFeFunc(feComponentTransfer, \"feFuncB\", bTable);\n            }\n            #getRGB(color) {\n                this.#defs.style.color = color;\n                return getRGB(getComputedStyle(this.#defs).getPropertyValue(\"color\"));\n            }\n        }\n        class DOMCanvasFactory extends _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseCanvasFactory {\n            constructor({ ownerDocument = globalThis.document } = {}){\n                super();\n                this._document = ownerDocument;\n            }\n            _createCanvas(width, height) {\n                const canvas = this._document.createElement(\"canvas\");\n                canvas.width = width;\n                canvas.height = height;\n                return canvas;\n            }\n        }\n        async function fetchData(url, type = \"text\") {\n            if (isValidFetchUrl(url, document.baseURI)) {\n                const response = await fetch(url);\n                if (!response.ok) {\n                    throw new Error(response.statusText);\n                }\n                switch(type){\n                    case \"arraybuffer\":\n                        return response.arrayBuffer();\n                    case \"blob\":\n                        return response.blob();\n                    case \"json\":\n                        return response.json();\n                }\n                return response.text();\n            }\n            return new Promise((resolve, reject)=>{\n                const request = new XMLHttpRequest();\n                request.open(\"GET\", url, true);\n                request.responseType = type;\n                request.onreadystatechange = ()=>{\n                    if (request.readyState !== XMLHttpRequest.DONE) {\n                        return;\n                    }\n                    if (request.status === 200 || request.status === 0) {\n                        let data;\n                        switch(type){\n                            case \"arraybuffer\":\n                            case \"blob\":\n                            case \"json\":\n                                data = request.response;\n                                break;\n                            default:\n                                data = request.responseText;\n                                break;\n                        }\n                        if (data) {\n                            resolve(data);\n                            return;\n                        }\n                    }\n                    reject(new Error(request.statusText));\n                };\n                request.send(null);\n            });\n        }\n        class DOMCMapReaderFactory extends _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseCMapReaderFactory {\n            _fetchData(url, compressionType) {\n                return fetchData(url, this.isCompressed ? \"arraybuffer\" : \"text\").then((data)=>{\n                    return {\n                        cMapData: data instanceof ArrayBuffer ? new Uint8Array(data) : (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.stringToBytes)(data),\n                        compressionType\n                    };\n                });\n            }\n        }\n        class DOMStandardFontDataFactory extends _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseStandardFontDataFactory {\n            _fetchData(url) {\n                return fetchData(url, \"arraybuffer\").then((data)=>{\n                    return new Uint8Array(data);\n                });\n            }\n        }\n        class DOMSVGFactory extends _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseSVGFactory {\n            _createSVG(type) {\n                return document.createElementNS(SVG_NS, type);\n            }\n        }\n        class PageViewport {\n            constructor({ viewBox, scale, rotation, offsetX = 0, offsetY = 0, dontFlip = false }){\n                this.viewBox = viewBox;\n                this.scale = scale;\n                this.rotation = rotation;\n                this.offsetX = offsetX;\n                this.offsetY = offsetY;\n                const centerX = (viewBox[2] + viewBox[0]) / 2;\n                const centerY = (viewBox[3] + viewBox[1]) / 2;\n                let rotateA, rotateB, rotateC, rotateD;\n                rotation %= 360;\n                if (rotation < 0) {\n                    rotation += 360;\n                }\n                switch(rotation){\n                    case 180:\n                        rotateA = -1;\n                        rotateB = 0;\n                        rotateC = 0;\n                        rotateD = 1;\n                        break;\n                    case 90:\n                        rotateA = 0;\n                        rotateB = 1;\n                        rotateC = 1;\n                        rotateD = 0;\n                        break;\n                    case 270:\n                        rotateA = 0;\n                        rotateB = -1;\n                        rotateC = -1;\n                        rotateD = 0;\n                        break;\n                    case 0:\n                        rotateA = 1;\n                        rotateB = 0;\n                        rotateC = 0;\n                        rotateD = -1;\n                        break;\n                    default:\n                        throw new Error(\"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\");\n                }\n                if (dontFlip) {\n                    rotateC = -rotateC;\n                    rotateD = -rotateD;\n                }\n                let offsetCanvasX, offsetCanvasY;\n                let width, height;\n                if (rotateA === 0) {\n                    offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n                    offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n                    width = (viewBox[3] - viewBox[1]) * scale;\n                    height = (viewBox[2] - viewBox[0]) * scale;\n                } else {\n                    offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n                    offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n                    width = (viewBox[2] - viewBox[0]) * scale;\n                    height = (viewBox[3] - viewBox[1]) * scale;\n                }\n                this.transform = [\n                    rotateA * scale,\n                    rotateB * scale,\n                    rotateC * scale,\n                    rotateD * scale,\n                    offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY,\n                    offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY\n                ];\n                this.width = width;\n                this.height = height;\n            }\n            get rawDims() {\n                const { viewBox } = this;\n                return (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.shadow)(this, \"rawDims\", {\n                    pageWidth: viewBox[2] - viewBox[0],\n                    pageHeight: viewBox[3] - viewBox[1],\n                    pageX: viewBox[0],\n                    pageY: viewBox[1]\n                });\n            }\n            clone({ scale = this.scale, rotation = this.rotation, offsetX = this.offsetX, offsetY = this.offsetY, dontFlip = false } = {}) {\n                return new PageViewport({\n                    viewBox: this.viewBox.slice(),\n                    scale,\n                    rotation,\n                    offsetX,\n                    offsetY,\n                    dontFlip\n                });\n            }\n            convertToViewportPoint(x, y) {\n                return _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.Util.applyTransform([\n                    x,\n                    y\n                ], this.transform);\n            }\n            convertToViewportRectangle(rect) {\n                const topLeft = _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.Util.applyTransform([\n                    rect[0],\n                    rect[1]\n                ], this.transform);\n                const bottomRight = _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.Util.applyTransform([\n                    rect[2],\n                    rect[3]\n                ], this.transform);\n                return [\n                    topLeft[0],\n                    topLeft[1],\n                    bottomRight[0],\n                    bottomRight[1]\n                ];\n            }\n            convertToPdfPoint(x, y) {\n                return _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.Util.applyInverseTransform([\n                    x,\n                    y\n                ], this.transform);\n            }\n        }\n        class RenderingCancelledException extends _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.BaseException {\n            constructor(msg, extraDelay = 0){\n                super(msg, \"RenderingCancelledException\");\n                this.extraDelay = extraDelay;\n            }\n        }\n        function isDataScheme(url) {\n            const ii = url.length;\n            let i = 0;\n            while(i < ii && url[i].trim() === \"\"){\n                i++;\n            }\n            return url.substring(i, i + 5).toLowerCase() === \"data:\";\n        }\n        function isPdfFile(filename) {\n            return typeof filename === \"string\" && /\\.pdf$/i.test(filename);\n        }\n        function getFilenameFromUrl(url, onlyStripPath = false) {\n            if (!onlyStripPath) {\n                [url] = url.split(/[#?]/, 1);\n            }\n            return url.substring(url.lastIndexOf(\"/\") + 1);\n        }\n        function getPdfFilenameFromUrl(url, defaultFilename = \"document.pdf\") {\n            if (typeof url !== \"string\") {\n                return defaultFilename;\n            }\n            if (isDataScheme(url)) {\n                (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.warn)('getPdfFilenameFromUrl: ignore \"data:\"-URL for performance reasons.');\n                return defaultFilename;\n            }\n            const reURI = /^(?:(?:[^:]+:)?\\/\\/[^/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;\n            const reFilename = /[^/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;\n            const splitURI = reURI.exec(url);\n            let suggestedFilename = reFilename.exec(splitURI[1]) || reFilename.exec(splitURI[2]) || reFilename.exec(splitURI[3]);\n            if (suggestedFilename) {\n                suggestedFilename = suggestedFilename[0];\n                if (suggestedFilename.includes(\"%\")) {\n                    try {\n                        suggestedFilename = reFilename.exec(decodeURIComponent(suggestedFilename))[0];\n                    } catch  {}\n                }\n            }\n            return suggestedFilename || defaultFilename;\n        }\n        class StatTimer {\n            time(name) {\n                if (name in this.started) {\n                    (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.warn)(`Timer is already running for ${name}`);\n                }\n                this.started[name] = Date.now();\n            }\n            timeEnd(name) {\n                if (!(name in this.started)) {\n                    (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.warn)(`Timer has not been started for ${name}`);\n                }\n                this.times.push({\n                    name,\n                    start: this.started[name],\n                    end: Date.now()\n                });\n                delete this.started[name];\n            }\n            toString() {\n                const outBuf = [];\n                let longest = 0;\n                for (const { name } of this.times){\n                    longest = Math.max(name.length, longest);\n                }\n                for (const { name, start, end } of this.times){\n                    outBuf.push(`${name.padEnd(longest)} ${end - start}ms\\n`);\n                }\n                return outBuf.join(\"\");\n            }\n            constructor(){\n                this.started = Object.create(null);\n                this.times = [];\n            }\n        }\n        function isValidFetchUrl(url, baseUrl) {\n            try {\n                const { protocol } = baseUrl ? new URL(url, baseUrl) : new URL(url);\n                return protocol === \"http:\" || protocol === \"https:\";\n            } catch  {\n                return false;\n            }\n        }\n        function noContextMenu(e) {\n            e.preventDefault();\n        }\n        function deprecated(details) {\n            console.log(\"Deprecated API usage: \" + details);\n        }\n        let pdfDateStringRegex;\n        class PDFDateString {\n            static toDateObject(input) {\n                if (!input || typeof input !== \"string\") {\n                    return null;\n                }\n                pdfDateStringRegex ||= new RegExp(\"^D:\" + \"(\\\\d{4})\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"([Z|+|-])?\" + \"(\\\\d{2})?\" + \"'?\" + \"(\\\\d{2})?\" + \"'?\");\n                const matches = pdfDateStringRegex.exec(input);\n                if (!matches) {\n                    return null;\n                }\n                const year = parseInt(matches[1], 10);\n                let month = parseInt(matches[2], 10);\n                month = month >= 1 && month <= 12 ? month - 1 : 0;\n                let day = parseInt(matches[3], 10);\n                day = day >= 1 && day <= 31 ? day : 1;\n                let hour = parseInt(matches[4], 10);\n                hour = hour >= 0 && hour <= 23 ? hour : 0;\n                let minute = parseInt(matches[5], 10);\n                minute = minute >= 0 && minute <= 59 ? minute : 0;\n                let second = parseInt(matches[6], 10);\n                second = second >= 0 && second <= 59 ? second : 0;\n                const universalTimeRelation = matches[7] || \"Z\";\n                let offsetHour = parseInt(matches[8], 10);\n                offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\n                let offsetMinute = parseInt(matches[9], 10) || 0;\n                offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\n                if (universalTimeRelation === \"-\") {\n                    hour += offsetHour;\n                    minute += offsetMinute;\n                } else if (universalTimeRelation === \"+\") {\n                    hour -= offsetHour;\n                    minute -= offsetMinute;\n                }\n                return new Date(Date.UTC(year, month, day, hour, minute, second));\n            }\n        }\n        function getXfaPageViewport(xfaPage, { scale = 1, rotation = 0 }) {\n            const { width, height } = xfaPage.attributes.style;\n            const viewBox = [\n                0,\n                0,\n                parseInt(width),\n                parseInt(height)\n            ];\n            return new PageViewport({\n                viewBox,\n                scale,\n                rotation\n            });\n        }\n        function getRGB(color) {\n            if (color.startsWith(\"#\")) {\n                const colorRGB = parseInt(color.slice(1), 16);\n                return [\n                    (colorRGB & 0xff0000) >> 16,\n                    (colorRGB & 0x00ff00) >> 8,\n                    colorRGB & 0x0000ff\n                ];\n            }\n            if (color.startsWith(\"rgb(\")) {\n                return color.slice(4, -1).split(\",\").map((x)=>parseInt(x));\n            }\n            if (color.startsWith(\"rgba(\")) {\n                return color.slice(5, -1).split(\",\").map((x)=>parseInt(x)).slice(0, 3);\n            }\n            (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.warn)(`Not a valid color format: \"${color}\"`);\n            return [\n                0,\n                0,\n                0\n            ];\n        }\n        function getColorValues(colors) {\n            const span = document.createElement(\"span\");\n            span.style.visibility = \"hidden\";\n            document.body.append(span);\n            for (const name of colors.keys()){\n                span.style.color = name;\n                const computedColor = window.getComputedStyle(span).color;\n                colors.set(name, getRGB(computedColor));\n            }\n            span.remove();\n        }\n        function getCurrentTransform(ctx) {\n            const { a, b, c, d, e, f } = ctx.getTransform();\n            return [\n                a,\n                b,\n                c,\n                d,\n                e,\n                f\n            ];\n        }\n        function getCurrentTransformInverse(ctx) {\n            const { a, b, c, d, e, f } = ctx.getTransform().invertSelf();\n            return [\n                a,\n                b,\n                c,\n                d,\n                e,\n                f\n            ];\n        }\n        function setLayerDimensions(div, viewport, mustFlip = false, mustRotate = true) {\n            if (viewport instanceof PageViewport) {\n                const { pageWidth, pageHeight } = viewport.rawDims;\n                const { style } = div;\n                const useRound = _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.FeatureTest.isCSSRoundSupported;\n                const w = `var(--scale-factor) * ${pageWidth}px`, h = `var(--scale-factor) * ${pageHeight}px`;\n                const widthStr = useRound ? `round(${w}, 1px)` : `calc(${w})`, heightStr = useRound ? `round(${h}, 1px)` : `calc(${h})`;\n                if (!mustFlip || viewport.rotation % 180 === 0) {\n                    style.width = widthStr;\n                    style.height = heightStr;\n                } else {\n                    style.width = heightStr;\n                    style.height = widthStr;\n                }\n            }\n            if (mustRotate) {\n                div.setAttribute(\"data-main-rotation\", viewport.rotation);\n            }\n        }\n    /***/ },\n    /***/ 423: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_393175__)=>{\n        /* harmony export */ __nested_webpack_require_393175__.d(__nested_webpack_exports__, {\n            /* harmony export */ DrawLayer: ()=>/* binding */ DrawLayer\n        });\n        /* harmony import */ var _display_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_393175__(473);\n        /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_393175__(266);\n        class DrawLayer {\n            #parent;\n            #id;\n            #mapping;\n            constructor({ pageIndex }){\n                this.#parent = null;\n                this.#id = 0;\n                this.#mapping = new Map();\n                this.pageIndex = pageIndex;\n            }\n            setParent(parent) {\n                if (!this.#parent) {\n                    this.#parent = parent;\n                    return;\n                }\n                if (this.#parent !== parent) {\n                    if (this.#mapping.size > 0) {\n                        for (const root of this.#mapping.values()){\n                            root.remove();\n                            parent.append(root);\n                        }\n                    }\n                    this.#parent = parent;\n                }\n            }\n            static get _svgFactory() {\n                return (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.shadow)(this, \"_svgFactory\", new _display_utils_js__WEBPACK_IMPORTED_MODULE_0__.DOMSVGFactory());\n            }\n            static #setBox(element, { x, y, width, height }) {\n                const { style } = element;\n                style.top = `${100 * y}%`;\n                style.left = `${100 * x}%`;\n                style.width = `${100 * width}%`;\n                style.height = `${100 * height}%`;\n            }\n            #createSVG(box) {\n                const svg = DrawLayer._svgFactory.create(1, 1, true);\n                this.#parent.append(svg);\n                DrawLayer.#setBox(svg, box);\n                return svg;\n            }\n            highlight({ outlines, box }, color, opacity) {\n                const id = this.#id++;\n                const root = this.#createSVG(box);\n                root.classList.add(\"highlight\");\n                const defs = DrawLayer._svgFactory.createElement(\"defs\");\n                root.append(defs);\n                const path = DrawLayer._svgFactory.createElement(\"path\");\n                defs.append(path);\n                const pathId = `path_p${this.pageIndex}_${id}`;\n                path.setAttribute(\"id\", pathId);\n                path.setAttribute(\"d\", DrawLayer.#extractPathFromHighlightOutlines(outlines));\n                const clipPath = DrawLayer._svgFactory.createElement(\"clipPath\");\n                defs.append(clipPath);\n                const clipPathId = `clip_${pathId}`;\n                clipPath.setAttribute(\"id\", clipPathId);\n                clipPath.setAttribute(\"clipPathUnits\", \"objectBoundingBox\");\n                const clipPathUse = DrawLayer._svgFactory.createElement(\"use\");\n                clipPath.append(clipPathUse);\n                clipPathUse.setAttribute(\"href\", `#${pathId}`);\n                clipPathUse.classList.add(\"clip\");\n                const use = DrawLayer._svgFactory.createElement(\"use\");\n                root.append(use);\n                root.setAttribute(\"fill\", color);\n                root.setAttribute(\"fill-opacity\", opacity);\n                use.setAttribute(\"href\", `#${pathId}`);\n                this.#mapping.set(id, root);\n                return {\n                    id,\n                    clipPathId: `url(#${clipPathId})`\n                };\n            }\n            highlightOutline({ outlines, box }) {\n                const id = this.#id++;\n                const root = this.#createSVG(box);\n                root.classList.add(\"highlightOutline\");\n                const defs = DrawLayer._svgFactory.createElement(\"defs\");\n                root.append(defs);\n                const path = DrawLayer._svgFactory.createElement(\"path\");\n                defs.append(path);\n                const pathId = `path_p${this.pageIndex}_${id}`;\n                path.setAttribute(\"id\", pathId);\n                path.setAttribute(\"d\", DrawLayer.#extractPathFromHighlightOutlines(outlines));\n                path.setAttribute(\"vector-effect\", \"non-scaling-stroke\");\n                const use1 = DrawLayer._svgFactory.createElement(\"use\");\n                root.append(use1);\n                use1.setAttribute(\"href\", `#${pathId}`);\n                const use2 = use1.cloneNode();\n                root.append(use2);\n                use1.classList.add(\"mainOutline\");\n                use2.classList.add(\"secondaryOutline\");\n                this.#mapping.set(id, root);\n                return id;\n            }\n            static #extractPathFromHighlightOutlines(polygons) {\n                const buffer = [];\n                for (const polygon of polygons){\n                    let [prevX, prevY] = polygon;\n                    buffer.push(`M${prevX} ${prevY}`);\n                    for(let i = 2; i < polygon.length; i += 2){\n                        const x = polygon[i];\n                        const y = polygon[i + 1];\n                        if (x === prevX) {\n                            buffer.push(`V${y}`);\n                            prevY = y;\n                        } else if (y === prevY) {\n                            buffer.push(`H${x}`);\n                            prevX = x;\n                        }\n                    }\n                    buffer.push(\"Z\");\n                }\n                return buffer.join(\" \");\n            }\n            updateBox(id, box) {\n                DrawLayer.#setBox(this.#mapping.get(id), box);\n            }\n            rotate(id, angle) {\n                this.#mapping.get(id).setAttribute(\"data-main-rotation\", angle);\n            }\n            changeColor(id, color) {\n                this.#mapping.get(id).setAttribute(\"fill\", color);\n            }\n            changeOpacity(id, opacity) {\n                this.#mapping.get(id).setAttribute(\"fill-opacity\", opacity);\n            }\n            addClass(id, className) {\n                this.#mapping.get(id).classList.add(className);\n            }\n            removeClass(id, className) {\n                this.#mapping.get(id).classList.remove(className);\n            }\n            remove(id) {\n                if (this.#parent === null) {\n                    return;\n                }\n                this.#mapping.get(id).remove();\n                this.#mapping.delete(id);\n            }\n            destroy() {\n                this.#parent = null;\n                for (const root of this.#mapping.values()){\n                    root.remove();\n                }\n                this.#mapping.clear();\n            }\n        }\n    /***/ },\n    /***/ 629: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_400043__)=>{\n        // EXPORTS\n        __nested_webpack_require_400043__.d(__nested_webpack_exports__, {\n            AnnotationEditorLayer: ()=>/* binding */ AnnotationEditorLayer\n        });\n        // EXTERNAL MODULE: ./src/shared/util.js\n        var util = __nested_webpack_require_400043__(266);\n        // EXTERNAL MODULE: ./src/display/editor/editor.js + 2 modules\n        var editor_editor = __nested_webpack_require_400043__(115);\n        // EXTERNAL MODULE: ./src/display/editor/tools.js\n        var tools = __nested_webpack_require_400043__(812);\n        // EXTERNAL MODULE: ./src/display/annotation_layer.js + 1 modules\n        var annotation_layer = __nested_webpack_require_400043__(640);\n        ; // CONCATENATED MODULE: ./src/display/editor/freetext.js\n        class FreeTextEditor extends editor_editor.AnnotationEditor {\n            #boundEditorDivBlur;\n            #boundEditorDivFocus;\n            #boundEditorDivInput;\n            #boundEditorDivKeydown;\n            #color;\n            #content;\n            #editorDivId;\n            #fontSize;\n            #initialData;\n            static{\n                this._freeTextDefaultContent = \"\";\n            }\n            static{\n                this._internalPadding = 0;\n            }\n            static{\n                this._defaultColor = null;\n            }\n            static{\n                this._defaultFontSize = 10;\n            }\n            static get _keyboardManager() {\n                const proto = FreeTextEditor.prototype;\n                const arrowChecker = (self)=>self.isEmpty();\n                const small = tools.AnnotationEditorUIManager.TRANSLATE_SMALL;\n                const big = tools.AnnotationEditorUIManager.TRANSLATE_BIG;\n                return (0, util.shadow)(this, \"_keyboardManager\", new tools.KeyboardManager([\n                    [\n                        [\n                            \"ctrl+s\",\n                            \"mac+meta+s\",\n                            \"ctrl+p\",\n                            \"mac+meta+p\"\n                        ],\n                        proto.commitOrRemove,\n                        {\n                            bubbles: true\n                        }\n                    ],\n                    [\n                        [\n                            \"ctrl+Enter\",\n                            \"mac+meta+Enter\",\n                            \"Escape\",\n                            \"mac+Escape\"\n                        ],\n                        proto.commitOrRemove\n                    ],\n                    [\n                        [\n                            \"ArrowLeft\",\n                            \"mac+ArrowLeft\"\n                        ],\n                        proto._translateEmpty,\n                        {\n                            args: [\n                                -small,\n                                0\n                            ],\n                            checker: arrowChecker\n                        }\n                    ],\n                    [\n                        [\n                            \"ctrl+ArrowLeft\",\n                            \"mac+shift+ArrowLeft\"\n                        ],\n                        proto._translateEmpty,\n                        {\n                            args: [\n                                -big,\n                                0\n                            ],\n                            checker: arrowChecker\n                        }\n                    ],\n                    [\n                        [\n                            \"ArrowRight\",\n                            \"mac+ArrowRight\"\n                        ],\n                        proto._translateEmpty,\n                        {\n                            args: [\n                                small,\n                                0\n                            ],\n                            checker: arrowChecker\n                        }\n                    ],\n                    [\n                        [\n                            \"ctrl+ArrowRight\",\n                            \"mac+shift+ArrowRight\"\n                        ],\n                        proto._translateEmpty,\n                        {\n                            args: [\n                                big,\n                                0\n                            ],\n                            checker: arrowChecker\n                        }\n                    ],\n                    [\n                        [\n                            \"ArrowUp\",\n                            \"mac+ArrowUp\"\n                        ],\n                        proto._translateEmpty,\n                        {\n                            args: [\n                                0,\n                                -small\n                            ],\n                            checker: arrowChecker\n                        }\n                    ],\n                    [\n                        [\n                            \"ctrl+ArrowUp\",\n                            \"mac+shift+ArrowUp\"\n                        ],\n                        proto._translateEmpty,\n                        {\n                            args: [\n                                0,\n                                -big\n                            ],\n                            checker: arrowChecker\n                        }\n                    ],\n                    [\n                        [\n                            \"ArrowDown\",\n                            \"mac+ArrowDown\"\n                        ],\n                        proto._translateEmpty,\n                        {\n                            args: [\n                                0,\n                                small\n                            ],\n                            checker: arrowChecker\n                        }\n                    ],\n                    [\n                        [\n                            \"ctrl+ArrowDown\",\n                            \"mac+shift+ArrowDown\"\n                        ],\n                        proto._translateEmpty,\n                        {\n                            args: [\n                                0,\n                                big\n                            ],\n                            checker: arrowChecker\n                        }\n                    ]\n                ]));\n            }\n            static{\n                this._type = \"freetext\";\n            }\n            static{\n                this._editorType = util.AnnotationEditorType.FREETEXT;\n            }\n            constructor(params){\n                super({\n                    ...params,\n                    name: \"freeTextEditor\"\n                });\n                this.#boundEditorDivBlur = this.editorDivBlur.bind(this);\n                this.#boundEditorDivFocus = this.editorDivFocus.bind(this);\n                this.#boundEditorDivInput = this.editorDivInput.bind(this);\n                this.#boundEditorDivKeydown = this.editorDivKeydown.bind(this);\n                this.#content = \"\";\n                this.#editorDivId = `${this.id}-editor`;\n                this.#initialData = null;\n                this.#color = params.color || FreeTextEditor._defaultColor || editor_editor.AnnotationEditor._defaultLineColor;\n                this.#fontSize = params.fontSize || FreeTextEditor._defaultFontSize;\n            }\n            static initialize(l10n) {\n                editor_editor.AnnotationEditor.initialize(l10n, {\n                    strings: [\n                        \"pdfjs-free-text-default-content\"\n                    ]\n                });\n                const style = getComputedStyle(document.documentElement);\n                this._internalPadding = parseFloat(style.getPropertyValue(\"--freetext-padding\"));\n            }\n            static updateDefaultParams(type, value) {\n                switch(type){\n                    case util.AnnotationEditorParamsType.FREETEXT_SIZE:\n                        FreeTextEditor._defaultFontSize = value;\n                        break;\n                    case util.AnnotationEditorParamsType.FREETEXT_COLOR:\n                        FreeTextEditor._defaultColor = value;\n                        break;\n                }\n            }\n            updateParams(type, value) {\n                switch(type){\n                    case util.AnnotationEditorParamsType.FREETEXT_SIZE:\n                        this.#updateFontSize(value);\n                        break;\n                    case util.AnnotationEditorParamsType.FREETEXT_COLOR:\n                        this.#updateColor(value);\n                        break;\n                }\n            }\n            static get defaultPropertiesToUpdate() {\n                return [\n                    [\n                        util.AnnotationEditorParamsType.FREETEXT_SIZE,\n                        FreeTextEditor._defaultFontSize\n                    ],\n                    [\n                        util.AnnotationEditorParamsType.FREETEXT_COLOR,\n                        FreeTextEditor._defaultColor || editor_editor.AnnotationEditor._defaultLineColor\n                    ]\n                ];\n            }\n            get propertiesToUpdate() {\n                return [\n                    [\n                        util.AnnotationEditorParamsType.FREETEXT_SIZE,\n                        this.#fontSize\n                    ],\n                    [\n                        util.AnnotationEditorParamsType.FREETEXT_COLOR,\n                        this.#color\n                    ]\n                ];\n            }\n            #updateFontSize(fontSize) {\n                const setFontsize = (size)=>{\n                    this.editorDiv.style.fontSize = `calc(${size}px * var(--scale-factor))`;\n                    this.translate(0, -(size - this.#fontSize) * this.parentScale);\n                    this.#fontSize = size;\n                    this.#setEditorDimensions();\n                };\n                const savedFontsize = this.#fontSize;\n                this.addCommands({\n                    cmd: ()=>{\n                        setFontsize(fontSize);\n                    },\n                    undo: ()=>{\n                        setFontsize(savedFontsize);\n                    },\n                    mustExec: true,\n                    type: util.AnnotationEditorParamsType.FREETEXT_SIZE,\n                    overwriteIfSameType: true,\n                    keepUndo: true\n                });\n            }\n            #updateColor(color) {\n                const savedColor = this.#color;\n                this.addCommands({\n                    cmd: ()=>{\n                        this.#color = this.editorDiv.style.color = color;\n                    },\n                    undo: ()=>{\n                        this.#color = this.editorDiv.style.color = savedColor;\n                    },\n                    mustExec: true,\n                    type: util.AnnotationEditorParamsType.FREETEXT_COLOR,\n                    overwriteIfSameType: true,\n                    keepUndo: true\n                });\n            }\n            _translateEmpty(x, y) {\n                this._uiManager.translateSelectedEditors(x, y, true);\n            }\n            getInitialTranslation() {\n                const scale = this.parentScale;\n                return [\n                    -FreeTextEditor._internalPadding * scale,\n                    -(FreeTextEditor._internalPadding + this.#fontSize) * scale\n                ];\n            }\n            rebuild() {\n                if (!this.parent) {\n                    return;\n                }\n                super.rebuild();\n                if (this.div === null) {\n                    return;\n                }\n                if (!this.isAttachedToDOM) {\n                    this.parent.add(this);\n                }\n            }\n            enableEditMode() {\n                if (this.isInEditMode()) {\n                    return;\n                }\n                this.parent.setEditingState(false);\n                this.parent.updateToolbar(util.AnnotationEditorType.FREETEXT);\n                super.enableEditMode();\n                this.overlayDiv.classList.remove(\"enabled\");\n                this.editorDiv.contentEditable = true;\n                this._isDraggable = false;\n                this.div.removeAttribute(\"aria-activedescendant\");\n                this.editorDiv.addEventListener(\"keydown\", this.#boundEditorDivKeydown);\n                this.editorDiv.addEventListener(\"focus\", this.#boundEditorDivFocus);\n                this.editorDiv.addEventListener(\"blur\", this.#boundEditorDivBlur);\n                this.editorDiv.addEventListener(\"input\", this.#boundEditorDivInput);\n            }\n            disableEditMode() {\n                if (!this.isInEditMode()) {\n                    return;\n                }\n                this.parent.setEditingState(true);\n                super.disableEditMode();\n                this.overlayDiv.classList.add(\"enabled\");\n                this.editorDiv.contentEditable = false;\n                this.div.setAttribute(\"aria-activedescendant\", this.#editorDivId);\n                this._isDraggable = true;\n                this.editorDiv.removeEventListener(\"keydown\", this.#boundEditorDivKeydown);\n                this.editorDiv.removeEventListener(\"focus\", this.#boundEditorDivFocus);\n                this.editorDiv.removeEventListener(\"blur\", this.#boundEditorDivBlur);\n                this.editorDiv.removeEventListener(\"input\", this.#boundEditorDivInput);\n                this.div.focus({\n                    preventScroll: true\n                });\n                this.isEditing = false;\n                this.parent.div.classList.add(\"freetextEditing\");\n            }\n            focusin(event) {\n                if (!this._focusEventsAllowed) {\n                    return;\n                }\n                super.focusin(event);\n                if (event.target !== this.editorDiv) {\n                    this.editorDiv.focus();\n                }\n            }\n            onceAdded() {\n                if (this.width) {\n                    this.#cheatInitialRect();\n                    return;\n                }\n                this.enableEditMode();\n                this.editorDiv.focus();\n                if (this._initialOptions?.isCentered) {\n                    this.center();\n                }\n                this._initialOptions = null;\n            }\n            isEmpty() {\n                return !this.editorDiv || this.editorDiv.innerText.trim() === \"\";\n            }\n            remove() {\n                this.isEditing = false;\n                if (this.parent) {\n                    this.parent.setEditingState(true);\n                    this.parent.div.classList.add(\"freetextEditing\");\n                }\n                super.remove();\n            }\n            #extractText() {\n                const divs = this.editorDiv.getElementsByTagName(\"div\");\n                if (divs.length === 0) {\n                    return this.editorDiv.innerText;\n                }\n                const buffer = [];\n                for (const div of divs){\n                    buffer.push(div.innerText.replace(/\\r\\n?|\\n/, \"\"));\n                }\n                return buffer.join(\"\\n\");\n            }\n            #setEditorDimensions() {\n                const [parentWidth, parentHeight] = this.parentDimensions;\n                let rect;\n                if (this.isAttachedToDOM) {\n                    rect = this.div.getBoundingClientRect();\n                } else {\n                    const { currentLayer, div } = this;\n                    const savedDisplay = div.style.display;\n                    div.style.display = \"hidden\";\n                    currentLayer.div.append(this.div);\n                    rect = div.getBoundingClientRect();\n                    div.remove();\n                    div.style.display = savedDisplay;\n                }\n                if (this.rotation % 180 === this.parentRotation % 180) {\n                    this.width = rect.width / parentWidth;\n                    this.height = rect.height / parentHeight;\n                } else {\n                    this.width = rect.height / parentWidth;\n                    this.height = rect.width / parentHeight;\n                }\n                this.fixAndSetPosition();\n            }\n            commit() {\n                if (!this.isInEditMode()) {\n                    return;\n                }\n                super.commit();\n                this.disableEditMode();\n                const savedText = this.#content;\n                const newText = this.#content = this.#extractText().trimEnd();\n                if (savedText === newText) {\n                    return;\n                }\n                const setText = (text)=>{\n                    this.#content = text;\n                    if (!text) {\n                        this.remove();\n                        return;\n                    }\n                    this.#setContent();\n                    this._uiManager.rebuild(this);\n                    this.#setEditorDimensions();\n                };\n                this.addCommands({\n                    cmd: ()=>{\n                        setText(newText);\n                    },\n                    undo: ()=>{\n                        setText(savedText);\n                    },\n                    mustExec: false\n                });\n                this.#setEditorDimensions();\n            }\n            shouldGetKeyboardEvents() {\n                return this.isInEditMode();\n            }\n            enterInEditMode() {\n                this.enableEditMode();\n                this.editorDiv.focus();\n            }\n            dblclick(event) {\n                this.enterInEditMode();\n            }\n            keydown(event) {\n                if (event.target === this.div && event.key === \"Enter\") {\n                    this.enterInEditMode();\n                    event.preventDefault();\n                }\n            }\n            editorDivKeydown(event) {\n                FreeTextEditor._keyboardManager.exec(this, event);\n            }\n            editorDivFocus(event) {\n                this.isEditing = true;\n            }\n            editorDivBlur(event) {\n                this.isEditing = false;\n            }\n            editorDivInput(event) {\n                this.parent.div.classList.toggle(\"freetextEditing\", this.isEmpty());\n            }\n            disableEditing() {\n                this.editorDiv.setAttribute(\"role\", \"comment\");\n                this.editorDiv.removeAttribute(\"aria-multiline\");\n            }\n            enableEditing() {\n                this.editorDiv.setAttribute(\"role\", \"textbox\");\n                this.editorDiv.setAttribute(\"aria-multiline\", true);\n            }\n            render() {\n                if (this.div) {\n                    return this.div;\n                }\n                let baseX, baseY;\n                if (this.width) {\n                    baseX = this.x;\n                    baseY = this.y;\n                }\n                super.render();\n                this.editorDiv = document.createElement(\"div\");\n                this.editorDiv.className = \"internal\";\n                this.editorDiv.setAttribute(\"id\", this.#editorDivId);\n                this.editorDiv.setAttribute(\"data-l10n-id\", \"pdfjs-free-text\");\n                this.enableEditing();\n                editor_editor.AnnotationEditor._l10nPromise.get(\"pdfjs-free-text-default-content\").then((msg)=>this.editorDiv?.setAttribute(\"default-content\", msg));\n                this.editorDiv.contentEditable = true;\n                const { style } = this.editorDiv;\n                style.fontSize = `calc(${this.#fontSize}px * var(--scale-factor))`;\n                style.color = this.#color;\n                this.div.append(this.editorDiv);\n                this.overlayDiv = document.createElement(\"div\");\n                this.overlayDiv.classList.add(\"overlay\", \"enabled\");\n                this.div.append(this.overlayDiv);\n                (0, tools.bindEvents)(this, this.div, [\n                    \"dblclick\",\n                    \"keydown\"\n                ]);\n                if (this.width) {\n                    const [parentWidth, parentHeight] = this.parentDimensions;\n                    if (this.annotationElementId) {\n                        const { position } = this.#initialData;\n                        let [tx, ty] = this.getInitialTranslation();\n                        [tx, ty] = this.pageTranslationToScreen(tx, ty);\n                        const [pageWidth, pageHeight] = this.pageDimensions;\n                        const [pageX, pageY] = this.pageTranslation;\n                        let posX, posY;\n                        switch(this.rotation){\n                            case 0:\n                                posX = baseX + (position[0] - pageX) / pageWidth;\n                                posY = baseY + this.height - (position[1] - pageY) / pageHeight;\n                                break;\n                            case 90:\n                                posX = baseX + (position[0] - pageX) / pageWidth;\n                                posY = baseY - (position[1] - pageY) / pageHeight;\n                                [tx, ty] = [\n                                    ty,\n                                    -tx\n                                ];\n                                break;\n                            case 180:\n                                posX = baseX - this.width + (position[0] - pageX) / pageWidth;\n                                posY = baseY - (position[1] - pageY) / pageHeight;\n                                [tx, ty] = [\n                                    -tx,\n                                    -ty\n                                ];\n                                break;\n                            case 270:\n                                posX = baseX + (position[0] - pageX - this.height * pageHeight) / pageWidth;\n                                posY = baseY + (position[1] - pageY - this.width * pageWidth) / pageHeight;\n                                [tx, ty] = [\n                                    -ty,\n                                    tx\n                                ];\n                                break;\n                        }\n                        this.setAt(posX * parentWidth, posY * parentHeight, tx, ty);\n                    } else {\n                        this.setAt(baseX * parentWidth, baseY * parentHeight, this.width * parentWidth, this.height * parentHeight);\n                    }\n                    this.#setContent();\n                    this._isDraggable = true;\n                    this.editorDiv.contentEditable = false;\n                } else {\n                    this._isDraggable = false;\n                    this.editorDiv.contentEditable = true;\n                }\n                return this.div;\n            }\n            #setContent() {\n                this.editorDiv.replaceChildren();\n                if (!this.#content) {\n                    return;\n                }\n                for (const line of this.#content.split(\"\\n\")){\n                    const div = document.createElement(\"div\");\n                    div.append(line ? document.createTextNode(line) : document.createElement(\"br\"));\n                    this.editorDiv.append(div);\n                }\n            }\n            get contentDiv() {\n                return this.editorDiv;\n            }\n            static deserialize(data, parent, uiManager) {\n                let initialData = null;\n                if (data instanceof annotation_layer.FreeTextAnnotationElement) {\n                    const { data: { defaultAppearanceData: { fontSize, fontColor }, rect, rotation, id }, textContent, textPosition, parent: { page: { pageNumber } } } = data;\n                    if (!textContent || textContent.length === 0) {\n                        return null;\n                    }\n                    initialData = data = {\n                        annotationType: util.AnnotationEditorType.FREETEXT,\n                        color: Array.from(fontColor),\n                        fontSize,\n                        value: textContent.join(\"\\n\"),\n                        position: textPosition,\n                        pageIndex: pageNumber - 1,\n                        rect,\n                        rotation,\n                        id,\n                        deleted: false\n                    };\n                }\n                const editor = super.deserialize(data, parent, uiManager);\n                editor.#fontSize = data.fontSize;\n                editor.#color = util.Util.makeHexColor(...data.color);\n                editor.#content = data.value;\n                editor.annotationElementId = data.id || null;\n                editor.#initialData = initialData;\n                return editor;\n            }\n            serialize(isForCopying = false) {\n                if (this.isEmpty()) {\n                    return null;\n                }\n                if (this.deleted) {\n                    return {\n                        pageIndex: this.pageIndex,\n                        id: this.annotationElementId,\n                        deleted: true\n                    };\n                }\n                const padding = FreeTextEditor._internalPadding * this.parentScale;\n                const rect = this.getRect(padding, padding);\n                const color = editor_editor.AnnotationEditor._colorManager.convert(this.isAttachedToDOM ? getComputedStyle(this.editorDiv).color : this.#color);\n                const serialized = {\n                    annotationType: util.AnnotationEditorType.FREETEXT,\n                    color,\n                    fontSize: this.#fontSize,\n                    value: this.#content,\n                    pageIndex: this.pageIndex,\n                    rect,\n                    rotation: this.rotation,\n                    structTreeParentId: this._structTreeParentId\n                };\n                if (isForCopying) {\n                    return serialized;\n                }\n                if (this.annotationElementId && !this.#hasElementChanged(serialized)) {\n                    return null;\n                }\n                serialized.id = this.annotationElementId;\n                return serialized;\n            }\n            #hasElementChanged(serialized) {\n                const { value, fontSize, color, rect, pageIndex } = this.#initialData;\n                return serialized.value !== value || serialized.fontSize !== fontSize || serialized.rect.some((x, i)=>Math.abs(x - rect[i]) >= 1) || serialized.color.some((c, i)=>c !== color[i]) || serialized.pageIndex !== pageIndex;\n            }\n            #cheatInitialRect(delayed = false) {\n                if (!this.annotationElementId) {\n                    return;\n                }\n                this.#setEditorDimensions();\n                if (!delayed && (this.width === 0 || this.height === 0)) {\n                    setTimeout(()=>this.#cheatInitialRect(true), 0);\n                    return;\n                }\n                const padding = FreeTextEditor._internalPadding * this.parentScale;\n                this.#initialData.rect = this.getRect(padding, padding);\n            }\n        }\n        // EXTERNAL MODULE: ./src/display/editor/color_picker.js\n        var color_picker = __nested_webpack_require_400043__(97);\n        // EXTERNAL MODULE: ./src/display/editor/outliner.js\n        var editor_outliner = __nested_webpack_require_400043__(405);\n        ; // CONCATENATED MODULE: ./src/display/editor/highlight.js\n        class HighlightEditor extends editor_editor.AnnotationEditor {\n            #boxes;\n            #clipPathId;\n            #colorPicker;\n            #focusOutlines;\n            #highlightDiv;\n            #highlightOutlines;\n            #id;\n            #lastPoint;\n            #opacity;\n            #outlineId;\n            static{\n                this._defaultColor = null;\n            }\n            static{\n                this._defaultOpacity = 1;\n            }\n            static{\n                this._type = \"highlight\";\n            }\n            static{\n                this._editorType = util.AnnotationEditorType.HIGHLIGHT;\n            }\n            constructor(params){\n                super({\n                    ...params,\n                    name: \"highlightEditor\"\n                });\n                this.#clipPathId = null;\n                this.#colorPicker = null;\n                this.#focusOutlines = null;\n                this.#highlightDiv = null;\n                this.#highlightOutlines = null;\n                this.#id = null;\n                this.#lastPoint = null;\n                this.#outlineId = null;\n                HighlightEditor._defaultColor ||= this._uiManager.highlightColors?.values().next().value || \"#fff066\";\n                this.color = params.color || HighlightEditor._defaultColor;\n                this.#opacity = params.opacity || HighlightEditor._defaultOpacity;\n                this.#boxes = params.boxes || null;\n                this._isDraggable = false;\n                this.#createOutlines();\n                this.#addToDrawLayer();\n                this.rotate(this.rotation);\n            }\n            #createOutlines() {\n                const outliner = new editor_outliner.Outliner(this.#boxes, 0.001);\n                this.#highlightOutlines = outliner.getOutlines();\n                ({ x: this.x, y: this.y, width: this.width, height: this.height } = this.#highlightOutlines.box);\n                const outlinerForOutline = new editor_outliner.Outliner(this.#boxes, 0.0025, 0.001, this._uiManager.direction === \"ltr\");\n                this.#focusOutlines = outlinerForOutline.getOutlines();\n                const { lastPoint } = this.#focusOutlines.box;\n                this.#lastPoint = [\n                    (lastPoint[0] - this.x) / this.width,\n                    (lastPoint[1] - this.y) / this.height\n                ];\n            }\n            static initialize(l10n) {\n                editor_editor.AnnotationEditor.initialize(l10n);\n            }\n            static updateDefaultParams(type, value) {\n                switch(type){\n                    case util.AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR:\n                        HighlightEditor._defaultColor = value;\n                        break;\n                }\n            }\n            get toolbarPosition() {\n                return this.#lastPoint;\n            }\n            updateParams(type, value) {\n                switch(type){\n                    case util.AnnotationEditorParamsType.HIGHLIGHT_COLOR:\n                        this.#updateColor(value);\n                        break;\n                }\n            }\n            static get defaultPropertiesToUpdate() {\n                return [\n                    [\n                        util.AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR,\n                        HighlightEditor._defaultColor\n                    ]\n                ];\n            }\n            get propertiesToUpdate() {\n                return [\n                    [\n                        util.AnnotationEditorParamsType.HIGHLIGHT_COLOR,\n                        this.color || HighlightEditor._defaultColor\n                    ]\n                ];\n            }\n            #updateColor(color) {\n                const savedColor = this.color;\n                this.addCommands({\n                    cmd: ()=>{\n                        this.color = color;\n                        this.parent.drawLayer.changeColor(this.#id, color);\n                        this.#colorPicker?.updateColor(color);\n                    },\n                    undo: ()=>{\n                        this.color = savedColor;\n                        this.parent.drawLayer.changeColor(this.#id, savedColor);\n                        this.#colorPicker?.updateColor(savedColor);\n                    },\n                    mustExec: true,\n                    type: util.AnnotationEditorParamsType.HIGHLIGHT_COLOR,\n                    overwriteIfSameType: true,\n                    keepUndo: true\n                });\n            }\n            async addEditToolbar() {\n                const toolbar = await super.addEditToolbar();\n                if (!toolbar) {\n                    return null;\n                }\n                if (this._uiManager.highlightColors) {\n                    this.#colorPicker = new color_picker.ColorPicker({\n                        editor: this\n                    });\n                    toolbar.addColorPicker(this.#colorPicker);\n                }\n                return toolbar;\n            }\n            disableEditing() {\n                super.disableEditing();\n                this.div.classList.toggle(\"disabled\", true);\n            }\n            enableEditing() {\n                super.enableEditing();\n                this.div.classList.toggle(\"disabled\", false);\n            }\n            fixAndSetPosition() {\n                return super.fixAndSetPosition(0);\n            }\n            getRect(tx, ty) {\n                return super.getRect(tx, ty, 0);\n            }\n            onceAdded() {\n                this.parent.addUndoableEditor(this);\n                this.div.focus();\n            }\n            remove() {\n                super.remove();\n                this.#cleanDrawLayer();\n            }\n            rebuild() {\n                if (!this.parent) {\n                    return;\n                }\n                super.rebuild();\n                if (this.div === null) {\n                    return;\n                }\n                this.#addToDrawLayer();\n                if (!this.isAttachedToDOM) {\n                    this.parent.add(this);\n                }\n            }\n            setParent(parent) {\n                let mustBeSelected = false;\n                if (this.parent && !parent) {\n                    this.#cleanDrawLayer();\n                } else if (parent) {\n                    this.#addToDrawLayer(parent);\n                    mustBeSelected = !this.parent && this.div?.classList.contains(\"selectedEditor\");\n                }\n                super.setParent(parent);\n                if (mustBeSelected) {\n                    this.select();\n                }\n            }\n            #cleanDrawLayer() {\n                if (this.#id === null || !this.parent) {\n                    return;\n                }\n                this.parent.drawLayer.remove(this.#id);\n                this.#id = null;\n                this.parent.drawLayer.remove(this.#outlineId);\n                this.#outlineId = null;\n            }\n            #addToDrawLayer(parent = this.parent) {\n                if (this.#id !== null) {\n                    return;\n                }\n                ({ id: this.#id, clipPathId: this.#clipPathId } = parent.drawLayer.highlight(this.#highlightOutlines, this.color, this.#opacity));\n                if (this.#highlightDiv) {\n                    this.#highlightDiv.style.clipPath = this.#clipPathId;\n                }\n                this.#outlineId = parent.drawLayer.highlightOutline(this.#focusOutlines);\n            }\n            static #rotateBbox({ x, y, width, height }, angle) {\n                switch(angle){\n                    case 90:\n                        return {\n                            x: 1 - y - height,\n                            y: x,\n                            width: height,\n                            height: width\n                        };\n                    case 180:\n                        return {\n                            x: 1 - x - width,\n                            y: 1 - y - height,\n                            width,\n                            height\n                        };\n                    case 270:\n                        return {\n                            x: y,\n                            y: 1 - x - width,\n                            width: height,\n                            height: width\n                        };\n                }\n                return {\n                    x,\n                    y,\n                    width,\n                    height\n                };\n            }\n            rotate(angle) {\n                const { drawLayer } = this.parent;\n                drawLayer.rotate(this.#id, angle);\n                drawLayer.rotate(this.#outlineId, angle);\n                drawLayer.updateBox(this.#id, HighlightEditor.#rotateBbox(this, angle));\n                drawLayer.updateBox(this.#outlineId, HighlightEditor.#rotateBbox(this.#focusOutlines.box, angle));\n            }\n            render() {\n                if (this.div) {\n                    return this.div;\n                }\n                const div = super.render();\n                const highlightDiv = this.#highlightDiv = document.createElement(\"div\");\n                div.append(highlightDiv);\n                highlightDiv.className = \"internal\";\n                highlightDiv.style.clipPath = this.#clipPathId;\n                const [parentWidth, parentHeight] = this.parentDimensions;\n                this.setDims(this.width * parentWidth, this.height * parentHeight);\n                (0, tools.bindEvents)(this, this.#highlightDiv, [\n                    \"pointerover\",\n                    \"pointerleave\"\n                ]);\n                this.enableEditing();\n                return div;\n            }\n            pointerover() {\n                this.parent.drawLayer.addClass(this.#outlineId, \"hovered\");\n            }\n            pointerleave() {\n                this.parent.drawLayer.removeClass(this.#outlineId, \"hovered\");\n            }\n            select() {\n                super.select();\n                this.parent?.drawLayer.removeClass(this.#outlineId, \"hovered\");\n                this.parent?.drawLayer.addClass(this.#outlineId, \"selected\");\n            }\n            unselect() {\n                super.unselect();\n                this.parent?.drawLayer.removeClass(this.#outlineId, \"selected\");\n            }\n            #serializeBoxes() {\n                const [pageWidth, pageHeight] = this.pageDimensions;\n                const boxes = this.#boxes;\n                const quadPoints = new Array(boxes.length * 8);\n                let i = 0;\n                for (const { x, y, width, height } of boxes){\n                    const sx = x * pageWidth;\n                    const sy = (1 - y - height) * pageHeight;\n                    quadPoints[i] = quadPoints[i + 4] = sx;\n                    quadPoints[i + 1] = quadPoints[i + 3] = sy;\n                    quadPoints[i + 2] = quadPoints[i + 6] = sx + width * pageWidth;\n                    quadPoints[i + 5] = quadPoints[i + 7] = sy + height * pageHeight;\n                    i += 8;\n                }\n                return quadPoints;\n            }\n            #serializeOutlines() {\n                const [pageWidth, pageHeight] = this.pageDimensions;\n                const width = this.width * pageWidth;\n                const height = this.height * pageHeight;\n                const tx = this.x * pageWidth;\n                const ty = (1 - this.y - this.height) * pageHeight;\n                const outlines = [];\n                for (const outline of this.#highlightOutlines.outlines){\n                    const points = new Array(outline.length);\n                    for(let i = 0; i < outline.length; i += 2){\n                        points[i] = tx + outline[i] * width;\n                        points[i + 1] = ty + (1 - outline[i + 1]) * height;\n                    }\n                    outlines.push(points);\n                }\n                return outlines;\n            }\n            static deserialize(data, parent, uiManager) {\n                const editor = super.deserialize(data, parent, uiManager);\n                const { rect, color, quadPoints } = data;\n                editor.color = util.Util.makeHexColor(...color);\n                editor.#opacity = data.opacity;\n                const [pageWidth, pageHeight] = editor.pageDimensions;\n                editor.width = (rect[2] - rect[0]) / pageWidth;\n                editor.height = (rect[3] - rect[1]) / pageHeight;\n                const boxes = editor.#boxes = [];\n                for(let i = 0; i < quadPoints.length; i += 8){\n                    boxes.push({\n                        x: quadPoints[4] / pageWidth,\n                        y: 1 - quadPoints[i + 5] / pageHeight,\n                        width: (quadPoints[i + 2] - quadPoints[i]) / pageWidth,\n                        height: (quadPoints[i + 5] - quadPoints[i + 1]) / pageHeight\n                    });\n                }\n                editor.#createOutlines();\n                return editor;\n            }\n            serialize(isForCopying = false) {\n                if (this.isEmpty() || isForCopying) {\n                    return null;\n                }\n                const rect = this.getRect(0, 0);\n                const color = editor_editor.AnnotationEditor._colorManager.convert(this.color);\n                return {\n                    annotationType: util.AnnotationEditorType.HIGHLIGHT,\n                    color,\n                    opacity: this.#opacity,\n                    quadPoints: this.#serializeBoxes(),\n                    outlines: this.#serializeOutlines(),\n                    pageIndex: this.pageIndex,\n                    rect,\n                    rotation: 0,\n                    structTreeParentId: this._structTreeParentId\n                };\n            }\n            static canCreateNewEmptyEditor() {\n                return false;\n            }\n        }\n        // EXTERNAL MODULE: ./src/display/display_utils.js\n        var display_utils = __nested_webpack_require_400043__(473);\n        ; // CONCATENATED MODULE: ./src/display/editor/ink.js\n        class InkEditor extends editor_editor.AnnotationEditor {\n            #baseHeight;\n            #baseWidth;\n            #boundCanvasPointermove;\n            #boundCanvasPointerleave;\n            #boundCanvasPointerup;\n            #boundCanvasPointerdown;\n            #canvasContextMenuTimeoutId;\n            #currentPath2D;\n            #disableEditing;\n            #hasSomethingToDraw;\n            #isCanvasInitialized;\n            #observer;\n            #realWidth;\n            #realHeight;\n            #requestFrameCallback;\n            static{\n                this._defaultColor = null;\n            }\n            static{\n                this._defaultOpacity = 1;\n            }\n            static{\n                this._defaultThickness = 1;\n            }\n            static{\n                this._type = \"ink\";\n            }\n            static{\n                this._editorType = util.AnnotationEditorType.INK;\n            }\n            constructor(params){\n                super({\n                    ...params,\n                    name: \"inkEditor\"\n                });\n                this.#baseHeight = 0;\n                this.#baseWidth = 0;\n                this.#boundCanvasPointermove = this.canvasPointermove.bind(this);\n                this.#boundCanvasPointerleave = this.canvasPointerleave.bind(this);\n                this.#boundCanvasPointerup = this.canvasPointerup.bind(this);\n                this.#boundCanvasPointerdown = this.canvasPointerdown.bind(this);\n                this.#canvasContextMenuTimeoutId = null;\n                this.#currentPath2D = new Path2D();\n                this.#disableEditing = false;\n                this.#hasSomethingToDraw = false;\n                this.#isCanvasInitialized = false;\n                this.#observer = null;\n                this.#realWidth = 0;\n                this.#realHeight = 0;\n                this.#requestFrameCallback = null;\n                this.color = params.color || null;\n                this.thickness = params.thickness || null;\n                this.opacity = params.opacity || null;\n                this.paths = [];\n                this.bezierPath2D = [];\n                this.allRawPaths = [];\n                this.currentPath = [];\n                this.scaleFactor = 1;\n                this.translationX = this.translationY = 0;\n                this.x = 0;\n                this.y = 0;\n                this._willKeepAspectRatio = true;\n            }\n            static initialize(l10n) {\n                editor_editor.AnnotationEditor.initialize(l10n);\n            }\n            static updateDefaultParams(type, value) {\n                switch(type){\n                    case util.AnnotationEditorParamsType.INK_THICKNESS:\n                        InkEditor._defaultThickness = value;\n                        break;\n                    case util.AnnotationEditorParamsType.INK_COLOR:\n                        InkEditor._defaultColor = value;\n                        break;\n                    case util.AnnotationEditorParamsType.INK_OPACITY:\n                        InkEditor._defaultOpacity = value / 100;\n                        break;\n                }\n            }\n            updateParams(type, value) {\n                switch(type){\n                    case util.AnnotationEditorParamsType.INK_THICKNESS:\n                        this.#updateThickness(value);\n                        break;\n                    case util.AnnotationEditorParamsType.INK_COLOR:\n                        this.#updateColor(value);\n                        break;\n                    case util.AnnotationEditorParamsType.INK_OPACITY:\n                        this.#updateOpacity(value);\n                        break;\n                }\n            }\n            static get defaultPropertiesToUpdate() {\n                return [\n                    [\n                        util.AnnotationEditorParamsType.INK_THICKNESS,\n                        InkEditor._defaultThickness\n                    ],\n                    [\n                        util.AnnotationEditorParamsType.INK_COLOR,\n                        InkEditor._defaultColor || editor_editor.AnnotationEditor._defaultLineColor\n                    ],\n                    [\n                        util.AnnotationEditorParamsType.INK_OPACITY,\n                        Math.round(InkEditor._defaultOpacity * 100)\n                    ]\n                ];\n            }\n            get propertiesToUpdate() {\n                return [\n                    [\n                        util.AnnotationEditorParamsType.INK_THICKNESS,\n                        this.thickness || InkEditor._defaultThickness\n                    ],\n                    [\n                        util.AnnotationEditorParamsType.INK_COLOR,\n                        this.color || InkEditor._defaultColor || editor_editor.AnnotationEditor._defaultLineColor\n                    ],\n                    [\n                        util.AnnotationEditorParamsType.INK_OPACITY,\n                        Math.round(100 * (this.opacity ?? InkEditor._defaultOpacity))\n                    ]\n                ];\n            }\n            #updateThickness(thickness) {\n                const savedThickness = this.thickness;\n                this.addCommands({\n                    cmd: ()=>{\n                        this.thickness = thickness;\n                        this.#fitToContent();\n                    },\n                    undo: ()=>{\n                        this.thickness = savedThickness;\n                        this.#fitToContent();\n                    },\n                    mustExec: true,\n                    type: util.AnnotationEditorParamsType.INK_THICKNESS,\n                    overwriteIfSameType: true,\n                    keepUndo: true\n                });\n            }\n            #updateColor(color) {\n                const savedColor = this.color;\n                this.addCommands({\n                    cmd: ()=>{\n                        this.color = color;\n                        this.#redraw();\n                    },\n                    undo: ()=>{\n                        this.color = savedColor;\n                        this.#redraw();\n                    },\n                    mustExec: true,\n                    type: util.AnnotationEditorParamsType.INK_COLOR,\n                    overwriteIfSameType: true,\n                    keepUndo: true\n                });\n            }\n            #updateOpacity(opacity) {\n                opacity /= 100;\n                const savedOpacity = this.opacity;\n                this.addCommands({\n                    cmd: ()=>{\n                        this.opacity = opacity;\n                        this.#redraw();\n                    },\n                    undo: ()=>{\n                        this.opacity = savedOpacity;\n                        this.#redraw();\n                    },\n                    mustExec: true,\n                    type: util.AnnotationEditorParamsType.INK_OPACITY,\n                    overwriteIfSameType: true,\n                    keepUndo: true\n                });\n            }\n            rebuild() {\n                if (!this.parent) {\n                    return;\n                }\n                super.rebuild();\n                if (this.div === null) {\n                    return;\n                }\n                if (!this.canvas) {\n                    this.#createCanvas();\n                    this.#createObserver();\n                }\n                if (!this.isAttachedToDOM) {\n                    this.parent.add(this);\n                    this.#setCanvasDims();\n                }\n                this.#fitToContent();\n            }\n            remove() {\n                if (this.canvas === null) {\n                    return;\n                }\n                if (!this.isEmpty()) {\n                    this.commit();\n                }\n                this.canvas.width = this.canvas.height = 0;\n                this.canvas.remove();\n                this.canvas = null;\n                if (this.#canvasContextMenuTimeoutId) {\n                    clearTimeout(this.#canvasContextMenuTimeoutId);\n                    this.#canvasContextMenuTimeoutId = null;\n                }\n                this.#observer.disconnect();\n                this.#observer = null;\n                super.remove();\n            }\n            setParent(parent) {\n                if (!this.parent && parent) {\n                    this._uiManager.removeShouldRescale(this);\n                } else if (this.parent && parent === null) {\n                    this._uiManager.addShouldRescale(this);\n                }\n                super.setParent(parent);\n            }\n            onScaleChanging() {\n                const [parentWidth, parentHeight] = this.parentDimensions;\n                const width = this.width * parentWidth;\n                const height = this.height * parentHeight;\n                this.setDimensions(width, height);\n            }\n            enableEditMode() {\n                if (this.#disableEditing || this.canvas === null) {\n                    return;\n                }\n                super.enableEditMode();\n                this._isDraggable = false;\n                this.canvas.addEventListener(\"pointerdown\", this.#boundCanvasPointerdown);\n            }\n            disableEditMode() {\n                if (!this.isInEditMode() || this.canvas === null) {\n                    return;\n                }\n                super.disableEditMode();\n                this._isDraggable = !this.isEmpty();\n                this.div.classList.remove(\"editing\");\n                this.canvas.removeEventListener(\"pointerdown\", this.#boundCanvasPointerdown);\n            }\n            onceAdded() {\n                this._isDraggable = !this.isEmpty();\n            }\n            isEmpty() {\n                return this.paths.length === 0 || this.paths.length === 1 && this.paths[0].length === 0;\n            }\n            #getInitialBBox() {\n                const { parentRotation, parentDimensions: [width, height] } = this;\n                switch(parentRotation){\n                    case 90:\n                        return [\n                            0,\n                            height,\n                            height,\n                            width\n                        ];\n                    case 180:\n                        return [\n                            width,\n                            height,\n                            width,\n                            height\n                        ];\n                    case 270:\n                        return [\n                            width,\n                            0,\n                            height,\n                            width\n                        ];\n                    default:\n                        return [\n                            0,\n                            0,\n                            width,\n                            height\n                        ];\n                }\n            }\n            #setStroke() {\n                const { ctx, color, opacity, thickness, parentScale, scaleFactor } = this;\n                ctx.lineWidth = thickness * parentScale / scaleFactor;\n                ctx.lineCap = \"round\";\n                ctx.lineJoin = \"round\";\n                ctx.miterLimit = 10;\n                ctx.strokeStyle = `${color}${(0, tools.opacityToHex)(opacity)}`;\n            }\n            #startDrawing(x, y) {\n                this.canvas.addEventListener(\"contextmenu\", display_utils.noContextMenu);\n                this.canvas.addEventListener(\"pointerleave\", this.#boundCanvasPointerleave);\n                this.canvas.addEventListener(\"pointermove\", this.#boundCanvasPointermove);\n                this.canvas.addEventListener(\"pointerup\", this.#boundCanvasPointerup);\n                this.canvas.removeEventListener(\"pointerdown\", this.#boundCanvasPointerdown);\n                this.isEditing = true;\n                if (!this.#isCanvasInitialized) {\n                    this.#isCanvasInitialized = true;\n                    this.#setCanvasDims();\n                    this.thickness ||= InkEditor._defaultThickness;\n                    this.color ||= InkEditor._defaultColor || editor_editor.AnnotationEditor._defaultLineColor;\n                    this.opacity ??= InkEditor._defaultOpacity;\n                }\n                this.currentPath.push([\n                    x,\n                    y\n                ]);\n                this.#hasSomethingToDraw = false;\n                this.#setStroke();\n                this.#requestFrameCallback = ()=>{\n                    this.#drawPoints();\n                    if (this.#requestFrameCallback) {\n                        window.requestAnimationFrame(this.#requestFrameCallback);\n                    }\n                };\n                window.requestAnimationFrame(this.#requestFrameCallback);\n            }\n            #draw(x, y) {\n                const [lastX, lastY] = this.currentPath.at(-1);\n                if (this.currentPath.length > 1 && x === lastX && y === lastY) {\n                    return;\n                }\n                const currentPath = this.currentPath;\n                let path2D = this.#currentPath2D;\n                currentPath.push([\n                    x,\n                    y\n                ]);\n                this.#hasSomethingToDraw = true;\n                if (currentPath.length <= 2) {\n                    path2D.moveTo(...currentPath[0]);\n                    path2D.lineTo(x, y);\n                    return;\n                }\n                if (currentPath.length === 3) {\n                    this.#currentPath2D = path2D = new Path2D();\n                    path2D.moveTo(...currentPath[0]);\n                }\n                this.#makeBezierCurve(path2D, ...currentPath.at(-3), ...currentPath.at(-2), x, y);\n            }\n            #endPath() {\n                if (this.currentPath.length === 0) {\n                    return;\n                }\n                const lastPoint = this.currentPath.at(-1);\n                this.#currentPath2D.lineTo(...lastPoint);\n            }\n            #stopDrawing(x, y) {\n                this.#requestFrameCallback = null;\n                x = Math.min(Math.max(x, 0), this.canvas.width);\n                y = Math.min(Math.max(y, 0), this.canvas.height);\n                this.#draw(x, y);\n                this.#endPath();\n                let bezier;\n                if (this.currentPath.length !== 1) {\n                    bezier = this.#generateBezierPoints();\n                } else {\n                    const xy = [\n                        x,\n                        y\n                    ];\n                    bezier = [\n                        [\n                            xy,\n                            xy.slice(),\n                            xy.slice(),\n                            xy\n                        ]\n                    ];\n                }\n                const path2D = this.#currentPath2D;\n                const currentPath = this.currentPath;\n                this.currentPath = [];\n                this.#currentPath2D = new Path2D();\n                const cmd = ()=>{\n                    this.allRawPaths.push(currentPath);\n                    this.paths.push(bezier);\n                    this.bezierPath2D.push(path2D);\n                    this.rebuild();\n                };\n                const undo = ()=>{\n                    this.allRawPaths.pop();\n                    this.paths.pop();\n                    this.bezierPath2D.pop();\n                    if (this.paths.length === 0) {\n                        this.remove();\n                    } else {\n                        if (!this.canvas) {\n                            this.#createCanvas();\n                            this.#createObserver();\n                        }\n                        this.#fitToContent();\n                    }\n                };\n                this.addCommands({\n                    cmd,\n                    undo,\n                    mustExec: true\n                });\n            }\n            #drawPoints() {\n                if (!this.#hasSomethingToDraw) {\n                    return;\n                }\n                this.#hasSomethingToDraw = false;\n                const thickness = Math.ceil(this.thickness * this.parentScale);\n                const lastPoints = this.currentPath.slice(-3);\n                const x = lastPoints.map((xy)=>xy[0]);\n                const y = lastPoints.map((xy)=>xy[1]);\n                const xMin = Math.min(...x) - thickness;\n                const xMax = Math.max(...x) + thickness;\n                const yMin = Math.min(...y) - thickness;\n                const yMax = Math.max(...y) + thickness;\n                const { ctx } = this;\n                ctx.save();\n                ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n                for (const path of this.bezierPath2D){\n                    ctx.stroke(path);\n                }\n                ctx.stroke(this.#currentPath2D);\n                ctx.restore();\n            }\n            #makeBezierCurve(path2D, x0, y0, x1, y1, x2, y2) {\n                const prevX = (x0 + x1) / 2;\n                const prevY = (y0 + y1) / 2;\n                const x3 = (x1 + x2) / 2;\n                const y3 = (y1 + y2) / 2;\n                path2D.bezierCurveTo(prevX + 2 * (x1 - prevX) / 3, prevY + 2 * (y1 - prevY) / 3, x3 + 2 * (x1 - x3) / 3, y3 + 2 * (y1 - y3) / 3, x3, y3);\n            }\n            #generateBezierPoints() {\n                const path = this.currentPath;\n                if (path.length <= 2) {\n                    return [\n                        [\n                            path[0],\n                            path[0],\n                            path.at(-1),\n                            path.at(-1)\n                        ]\n                    ];\n                }\n                const bezierPoints = [];\n                let i;\n                let [x0, y0] = path[0];\n                for(i = 1; i < path.length - 2; i++){\n                    const [x1, y1] = path[i];\n                    const [x2, y2] = path[i + 1];\n                    const x3 = (x1 + x2) / 2;\n                    const y3 = (y1 + y2) / 2;\n                    const control1 = [\n                        x0 + 2 * (x1 - x0) / 3,\n                        y0 + 2 * (y1 - y0) / 3\n                    ];\n                    const control2 = [\n                        x3 + 2 * (x1 - x3) / 3,\n                        y3 + 2 * (y1 - y3) / 3\n                    ];\n                    bezierPoints.push([\n                        [\n                            x0,\n                            y0\n                        ],\n                        control1,\n                        control2,\n                        [\n                            x3,\n                            y3\n                        ]\n                    ]);\n                    [x0, y0] = [\n                        x3,\n                        y3\n                    ];\n                }\n                const [x1, y1] = path[i];\n                const [x2, y2] = path[i + 1];\n                const control1 = [\n                    x0 + 2 * (x1 - x0) / 3,\n                    y0 + 2 * (y1 - y0) / 3\n                ];\n                const control2 = [\n                    x2 + 2 * (x1 - x2) / 3,\n                    y2 + 2 * (y1 - y2) / 3\n                ];\n                bezierPoints.push([\n                    [\n                        x0,\n                        y0\n                    ],\n                    control1,\n                    control2,\n                    [\n                        x2,\n                        y2\n                    ]\n                ]);\n                return bezierPoints;\n            }\n            #redraw() {\n                if (this.isEmpty()) {\n                    this.#updateTransform();\n                    return;\n                }\n                this.#setStroke();\n                const { canvas, ctx } = this;\n                ctx.setTransform(1, 0, 0, 1, 0, 0);\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\n                this.#updateTransform();\n                for (const path of this.bezierPath2D){\n                    ctx.stroke(path);\n                }\n            }\n            commit() {\n                if (this.#disableEditing) {\n                    return;\n                }\n                super.commit();\n                this.isEditing = false;\n                this.disableEditMode();\n                this.setInForeground();\n                this.#disableEditing = true;\n                this.div.classList.add(\"disabled\");\n                this.#fitToContent(true);\n                this.select();\n                this.parent.addInkEditorIfNeeded(true);\n                this.moveInDOM();\n                this.div.focus({\n                    preventScroll: true\n                });\n            }\n            focusin(event) {\n                if (!this._focusEventsAllowed) {\n                    return;\n                }\n                super.focusin(event);\n                this.enableEditMode();\n            }\n            canvasPointerdown(event) {\n                if (event.button !== 0 || !this.isInEditMode() || this.#disableEditing) {\n                    return;\n                }\n                this.setInForeground();\n                event.preventDefault();\n                if (!this.div.contains(document.activeElement)) {\n                    this.div.focus({\n                        preventScroll: true\n                    });\n                }\n                this.#startDrawing(event.offsetX, event.offsetY);\n            }\n            canvasPointermove(event) {\n                event.preventDefault();\n                this.#draw(event.offsetX, event.offsetY);\n            }\n            canvasPointerup(event) {\n                event.preventDefault();\n                this.#endDrawing(event);\n            }\n            canvasPointerleave(event) {\n                this.#endDrawing(event);\n            }\n            #endDrawing(event) {\n                this.canvas.removeEventListener(\"pointerleave\", this.#boundCanvasPointerleave);\n                this.canvas.removeEventListener(\"pointermove\", this.#boundCanvasPointermove);\n                this.canvas.removeEventListener(\"pointerup\", this.#boundCanvasPointerup);\n                this.canvas.addEventListener(\"pointerdown\", this.#boundCanvasPointerdown);\n                if (this.#canvasContextMenuTimeoutId) {\n                    clearTimeout(this.#canvasContextMenuTimeoutId);\n                }\n                this.#canvasContextMenuTimeoutId = setTimeout(()=>{\n                    this.#canvasContextMenuTimeoutId = null;\n                    this.canvas.removeEventListener(\"contextmenu\", display_utils.noContextMenu);\n                }, 10);\n                this.#stopDrawing(event.offsetX, event.offsetY);\n                this.addToAnnotationStorage();\n                this.setInBackground();\n            }\n            #createCanvas() {\n                this.canvas = document.createElement(\"canvas\");\n                this.canvas.width = this.canvas.height = 0;\n                this.canvas.className = \"inkEditorCanvas\";\n                this.canvas.setAttribute(\"data-l10n-id\", \"pdfjs-ink-canvas\");\n                this.div.append(this.canvas);\n                this.ctx = this.canvas.getContext(\"2d\");\n            }\n            #createObserver() {\n                this.#observer = new ResizeObserver((entries)=>{\n                    const rect = entries[0].contentRect;\n                    if (rect.width && rect.height) {\n                        this.setDimensions(rect.width, rect.height);\n                    }\n                });\n                this.#observer.observe(this.div);\n            }\n            get isResizable() {\n                return !this.isEmpty() && this.#disableEditing;\n            }\n            render() {\n                if (this.div) {\n                    return this.div;\n                }\n                let baseX, baseY;\n                if (this.width) {\n                    baseX = this.x;\n                    baseY = this.y;\n                }\n                super.render();\n                this.div.setAttribute(\"data-l10n-id\", \"pdfjs-ink\");\n                const [x, y, w, h] = this.#getInitialBBox();\n                this.setAt(x, y, 0, 0);\n                this.setDims(w, h);\n                this.#createCanvas();\n                if (this.width) {\n                    const [parentWidth, parentHeight] = this.parentDimensions;\n                    this.setAspectRatio(this.width * parentWidth, this.height * parentHeight);\n                    this.setAt(baseX * parentWidth, baseY * parentHeight, this.width * parentWidth, this.height * parentHeight);\n                    this.#isCanvasInitialized = true;\n                    this.#setCanvasDims();\n                    this.setDims(this.width * parentWidth, this.height * parentHeight);\n                    this.#redraw();\n                    this.div.classList.add(\"disabled\");\n                } else {\n                    this.div.classList.add(\"editing\");\n                    this.enableEditMode();\n                }\n                this.#createObserver();\n                return this.div;\n            }\n            #setCanvasDims() {\n                if (!this.#isCanvasInitialized) {\n                    return;\n                }\n                const [parentWidth, parentHeight] = this.parentDimensions;\n                this.canvas.width = Math.ceil(this.width * parentWidth);\n                this.canvas.height = Math.ceil(this.height * parentHeight);\n                this.#updateTransform();\n            }\n            setDimensions(width, height) {\n                const roundedWidth = Math.round(width);\n                const roundedHeight = Math.round(height);\n                if (this.#realWidth === roundedWidth && this.#realHeight === roundedHeight) {\n                    return;\n                }\n                this.#realWidth = roundedWidth;\n                this.#realHeight = roundedHeight;\n                this.canvas.style.visibility = \"hidden\";\n                const [parentWidth, parentHeight] = this.parentDimensions;\n                this.width = width / parentWidth;\n                this.height = height / parentHeight;\n                this.fixAndSetPosition();\n                if (this.#disableEditing) {\n                    this.#setScaleFactor(width, height);\n                }\n                this.#setCanvasDims();\n                this.#redraw();\n                this.canvas.style.visibility = \"visible\";\n                this.fixDims();\n            }\n            #setScaleFactor(width, height) {\n                const padding = this.#getPadding();\n                const scaleFactorW = (width - padding) / this.#baseWidth;\n                const scaleFactorH = (height - padding) / this.#baseHeight;\n                this.scaleFactor = Math.min(scaleFactorW, scaleFactorH);\n            }\n            #updateTransform() {\n                const padding = this.#getPadding() / 2;\n                this.ctx.setTransform(this.scaleFactor, 0, 0, this.scaleFactor, this.translationX * this.scaleFactor + padding, this.translationY * this.scaleFactor + padding);\n            }\n            static #buildPath2D(bezier) {\n                const path2D = new Path2D();\n                for(let i = 0, ii = bezier.length; i < ii; i++){\n                    const [first, control1, control2, second] = bezier[i];\n                    if (i === 0) {\n                        path2D.moveTo(...first);\n                    }\n                    path2D.bezierCurveTo(control1[0], control1[1], control2[0], control2[1], second[0], second[1]);\n                }\n                return path2D;\n            }\n            static #toPDFCoordinates(points, rect, rotation) {\n                const [blX, blY, trX, trY] = rect;\n                switch(rotation){\n                    case 0:\n                        for(let i = 0, ii = points.length; i < ii; i += 2){\n                            points[i] += blX;\n                            points[i + 1] = trY - points[i + 1];\n                        }\n                        break;\n                    case 90:\n                        for(let i = 0, ii = points.length; i < ii; i += 2){\n                            const x = points[i];\n                            points[i] = points[i + 1] + blX;\n                            points[i + 1] = x + blY;\n                        }\n                        break;\n                    case 180:\n                        for(let i = 0, ii = points.length; i < ii; i += 2){\n                            points[i] = trX - points[i];\n                            points[i + 1] += blY;\n                        }\n                        break;\n                    case 270:\n                        for(let i = 0, ii = points.length; i < ii; i += 2){\n                            const x = points[i];\n                            points[i] = trX - points[i + 1];\n                            points[i + 1] = trY - x;\n                        }\n                        break;\n                    default:\n                        throw new Error(\"Invalid rotation\");\n                }\n                return points;\n            }\n            static #fromPDFCoordinates(points, rect, rotation) {\n                const [blX, blY, trX, trY] = rect;\n                switch(rotation){\n                    case 0:\n                        for(let i = 0, ii = points.length; i < ii; i += 2){\n                            points[i] -= blX;\n                            points[i + 1] = trY - points[i + 1];\n                        }\n                        break;\n                    case 90:\n                        for(let i = 0, ii = points.length; i < ii; i += 2){\n                            const x = points[i];\n                            points[i] = points[i + 1] - blY;\n                            points[i + 1] = x - blX;\n                        }\n                        break;\n                    case 180:\n                        for(let i = 0, ii = points.length; i < ii; i += 2){\n                            points[i] = trX - points[i];\n                            points[i + 1] -= blY;\n                        }\n                        break;\n                    case 270:\n                        for(let i = 0, ii = points.length; i < ii; i += 2){\n                            const x = points[i];\n                            points[i] = trY - points[i + 1];\n                            points[i + 1] = trX - x;\n                        }\n                        break;\n                    default:\n                        throw new Error(\"Invalid rotation\");\n                }\n                return points;\n            }\n            #serializePaths(s, tx, ty, rect) {\n                const paths = [];\n                const padding = this.thickness / 2;\n                const shiftX = s * tx + padding;\n                const shiftY = s * ty + padding;\n                for (const bezier of this.paths){\n                    const buffer = [];\n                    const points = [];\n                    for(let j = 0, jj = bezier.length; j < jj; j++){\n                        const [first, control1, control2, second] = bezier[j];\n                        const p10 = s * first[0] + shiftX;\n                        const p11 = s * first[1] + shiftY;\n                        const p20 = s * control1[0] + shiftX;\n                        const p21 = s * control1[1] + shiftY;\n                        const p30 = s * control2[0] + shiftX;\n                        const p31 = s * control2[1] + shiftY;\n                        const p40 = s * second[0] + shiftX;\n                        const p41 = s * second[1] + shiftY;\n                        if (j === 0) {\n                            buffer.push(p10, p11);\n                            points.push(p10, p11);\n                        }\n                        buffer.push(p20, p21, p30, p31, p40, p41);\n                        points.push(p20, p21);\n                        if (j === jj - 1) {\n                            points.push(p40, p41);\n                        }\n                    }\n                    paths.push({\n                        bezier: InkEditor.#toPDFCoordinates(buffer, rect, this.rotation),\n                        points: InkEditor.#toPDFCoordinates(points, rect, this.rotation)\n                    });\n                }\n                return paths;\n            }\n            #getBbox() {\n                let xMin = Infinity;\n                let xMax = -Infinity;\n                let yMin = Infinity;\n                let yMax = -Infinity;\n                for (const path of this.paths){\n                    for (const [first, control1, control2, second] of path){\n                        const bbox = util.Util.bezierBoundingBox(...first, ...control1, ...control2, ...second);\n                        xMin = Math.min(xMin, bbox[0]);\n                        yMin = Math.min(yMin, bbox[1]);\n                        xMax = Math.max(xMax, bbox[2]);\n                        yMax = Math.max(yMax, bbox[3]);\n                    }\n                }\n                return [\n                    xMin,\n                    yMin,\n                    xMax,\n                    yMax\n                ];\n            }\n            #getPadding() {\n                return this.#disableEditing ? Math.ceil(this.thickness * this.parentScale) : 0;\n            }\n            #fitToContent(firstTime = false) {\n                if (this.isEmpty()) {\n                    return;\n                }\n                if (!this.#disableEditing) {\n                    this.#redraw();\n                    return;\n                }\n                const bbox = this.#getBbox();\n                const padding = this.#getPadding();\n                this.#baseWidth = Math.max(editor_editor.AnnotationEditor.MIN_SIZE, bbox[2] - bbox[0]);\n                this.#baseHeight = Math.max(editor_editor.AnnotationEditor.MIN_SIZE, bbox[3] - bbox[1]);\n                const width = Math.ceil(padding + this.#baseWidth * this.scaleFactor);\n                const height = Math.ceil(padding + this.#baseHeight * this.scaleFactor);\n                const [parentWidth, parentHeight] = this.parentDimensions;\n                this.width = width / parentWidth;\n                this.height = height / parentHeight;\n                this.setAspectRatio(width, height);\n                const prevTranslationX = this.translationX;\n                const prevTranslationY = this.translationY;\n                this.translationX = -bbox[0];\n                this.translationY = -bbox[1];\n                this.#setCanvasDims();\n                this.#redraw();\n                this.#realWidth = width;\n                this.#realHeight = height;\n                this.setDims(width, height);\n                const unscaledPadding = firstTime ? padding / this.scaleFactor / 2 : 0;\n                this.translate(prevTranslationX - this.translationX - unscaledPadding, prevTranslationY - this.translationY - unscaledPadding);\n            }\n            static deserialize(data, parent, uiManager) {\n                if (data instanceof annotation_layer.InkAnnotationElement) {\n                    return null;\n                }\n                const editor = super.deserialize(data, parent, uiManager);\n                editor.thickness = data.thickness;\n                editor.color = util.Util.makeHexColor(...data.color);\n                editor.opacity = data.opacity;\n                const [pageWidth, pageHeight] = editor.pageDimensions;\n                const width = editor.width * pageWidth;\n                const height = editor.height * pageHeight;\n                const scaleFactor = editor.parentScale;\n                const padding = data.thickness / 2;\n                editor.#disableEditing = true;\n                editor.#realWidth = Math.round(width);\n                editor.#realHeight = Math.round(height);\n                const { paths, rect, rotation } = data;\n                for (let { bezier } of paths){\n                    bezier = InkEditor.#fromPDFCoordinates(bezier, rect, rotation);\n                    const path = [];\n                    editor.paths.push(path);\n                    let p0 = scaleFactor * (bezier[0] - padding);\n                    let p1 = scaleFactor * (bezier[1] - padding);\n                    for(let i = 2, ii = bezier.length; i < ii; i += 6){\n                        const p10 = scaleFactor * (bezier[i] - padding);\n                        const p11 = scaleFactor * (bezier[i + 1] - padding);\n                        const p20 = scaleFactor * (bezier[i + 2] - padding);\n                        const p21 = scaleFactor * (bezier[i + 3] - padding);\n                        const p30 = scaleFactor * (bezier[i + 4] - padding);\n                        const p31 = scaleFactor * (bezier[i + 5] - padding);\n                        path.push([\n                            [\n                                p0,\n                                p1\n                            ],\n                            [\n                                p10,\n                                p11\n                            ],\n                            [\n                                p20,\n                                p21\n                            ],\n                            [\n                                p30,\n                                p31\n                            ]\n                        ]);\n                        p0 = p30;\n                        p1 = p31;\n                    }\n                    const path2D = this.#buildPath2D(path);\n                    editor.bezierPath2D.push(path2D);\n                }\n                const bbox = editor.#getBbox();\n                editor.#baseWidth = Math.max(editor_editor.AnnotationEditor.MIN_SIZE, bbox[2] - bbox[0]);\n                editor.#baseHeight = Math.max(editor_editor.AnnotationEditor.MIN_SIZE, bbox[3] - bbox[1]);\n                editor.#setScaleFactor(width, height);\n                return editor;\n            }\n            serialize() {\n                if (this.isEmpty()) {\n                    return null;\n                }\n                const rect = this.getRect(0, 0);\n                const color = editor_editor.AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);\n                return {\n                    annotationType: util.AnnotationEditorType.INK,\n                    color,\n                    thickness: this.thickness,\n                    opacity: this.opacity,\n                    paths: this.#serializePaths(this.scaleFactor / this.parentScale, this.translationX, this.translationY, rect),\n                    pageIndex: this.pageIndex,\n                    rect,\n                    rotation: this.rotation,\n                    structTreeParentId: this._structTreeParentId\n                };\n            }\n        }\n        ; // CONCATENATED MODULE: ./src/display/editor/stamp.js\n        class StampEditor extends editor_editor.AnnotationEditor {\n            #bitmap;\n            #bitmapId;\n            #bitmapPromise;\n            #bitmapUrl;\n            #bitmapFile;\n            #bitmapFileName;\n            #canvas;\n            #observer;\n            #resizeTimeoutId;\n            #isSvg;\n            #hasBeenAddedInUndoStack;\n            static{\n                this._type = \"stamp\";\n            }\n            static{\n                this._editorType = util.AnnotationEditorType.STAMP;\n            }\n            constructor(params){\n                super({\n                    ...params,\n                    name: \"stampEditor\"\n                });\n                this.#bitmap = null;\n                this.#bitmapId = null;\n                this.#bitmapPromise = null;\n                this.#bitmapUrl = null;\n                this.#bitmapFile = null;\n                this.#bitmapFileName = \"\";\n                this.#canvas = null;\n                this.#observer = null;\n                this.#resizeTimeoutId = null;\n                this.#isSvg = false;\n                this.#hasBeenAddedInUndoStack = false;\n                this.#bitmapUrl = params.bitmapUrl;\n                this.#bitmapFile = params.bitmapFile;\n            }\n            static initialize(l10n) {\n                editor_editor.AnnotationEditor.initialize(l10n);\n            }\n            static get supportedTypes() {\n                const types = [\n                    \"apng\",\n                    \"avif\",\n                    \"bmp\",\n                    \"gif\",\n                    \"jpeg\",\n                    \"png\",\n                    \"svg+xml\",\n                    \"webp\",\n                    \"x-icon\"\n                ];\n                return (0, util.shadow)(this, \"supportedTypes\", types.map((type)=>`image/${type}`));\n            }\n            static get supportedTypesStr() {\n                return (0, util.shadow)(this, \"supportedTypesStr\", this.supportedTypes.join(\",\"));\n            }\n            static isHandlingMimeForPasting(mime) {\n                return this.supportedTypes.includes(mime);\n            }\n            static paste(item, parent) {\n                parent.pasteEditor(util.AnnotationEditorType.STAMP, {\n                    bitmapFile: item.getAsFile()\n                });\n            }\n            #getBitmapFetched(data, fromId = false) {\n                if (!data) {\n                    this.remove();\n                    return;\n                }\n                this.#bitmap = data.bitmap;\n                if (!fromId) {\n                    this.#bitmapId = data.id;\n                    this.#isSvg = data.isSvg;\n                }\n                if (data.file) {\n                    this.#bitmapFileName = data.file.name;\n                }\n                this.#createCanvas();\n            }\n            #getBitmapDone() {\n                this.#bitmapPromise = null;\n                this._uiManager.enableWaiting(false);\n                if (this.#canvas) {\n                    this.div.focus();\n                }\n            }\n            #getBitmap() {\n                if (this.#bitmapId) {\n                    this._uiManager.enableWaiting(true);\n                    this._uiManager.imageManager.getFromId(this.#bitmapId).then((data)=>this.#getBitmapFetched(data, true)).finally(()=>this.#getBitmapDone());\n                    return;\n                }\n                if (this.#bitmapUrl) {\n                    const url = this.#bitmapUrl;\n                    this.#bitmapUrl = null;\n                    this._uiManager.enableWaiting(true);\n                    this.#bitmapPromise = this._uiManager.imageManager.getFromUrl(url).then((data)=>this.#getBitmapFetched(data)).finally(()=>this.#getBitmapDone());\n                    return;\n                }\n                if (this.#bitmapFile) {\n                    const file = this.#bitmapFile;\n                    this.#bitmapFile = null;\n                    this._uiManager.enableWaiting(true);\n                    this.#bitmapPromise = this._uiManager.imageManager.getFromFile(file).then((data)=>this.#getBitmapFetched(data)).finally(()=>this.#getBitmapDone());\n                    return;\n                }\n                const input = document.createElement(\"input\");\n                input.type = \"file\";\n                input.accept = StampEditor.supportedTypesStr;\n                this.#bitmapPromise = new Promise((resolve)=>{\n                    input.addEventListener(\"change\", async ()=>{\n                        if (!input.files || input.files.length === 0) {\n                            this.remove();\n                        } else {\n                            this._uiManager.enableWaiting(true);\n                            const data = await this._uiManager.imageManager.getFromFile(input.files[0]);\n                            this.#getBitmapFetched(data);\n                        }\n                        resolve();\n                    });\n                    input.addEventListener(\"cancel\", ()=>{\n                        this.remove();\n                        resolve();\n                    });\n                }).finally(()=>this.#getBitmapDone());\n                input.click();\n            }\n            remove() {\n                if (this.#bitmapId) {\n                    this.#bitmap = null;\n                    this._uiManager.imageManager.deleteId(this.#bitmapId);\n                    this.#canvas?.remove();\n                    this.#canvas = null;\n                    this.#observer?.disconnect();\n                    this.#observer = null;\n                    if (this.#resizeTimeoutId) {\n                        clearTimeout(this.#resizeTimeoutId);\n                        this.#resizeTimeoutId = null;\n                    }\n                }\n                super.remove();\n            }\n            rebuild() {\n                if (!this.parent) {\n                    if (this.#bitmapId) {\n                        this.#getBitmap();\n                    }\n                    return;\n                }\n                super.rebuild();\n                if (this.div === null) {\n                    return;\n                }\n                if (this.#bitmapId) {\n                    this.#getBitmap();\n                }\n                if (!this.isAttachedToDOM) {\n                    this.parent.add(this);\n                }\n            }\n            onceAdded() {\n                this._isDraggable = true;\n                this.div.focus();\n            }\n            isEmpty() {\n                return !(this.#bitmapPromise || this.#bitmap || this.#bitmapUrl || this.#bitmapFile);\n            }\n            get isResizable() {\n                return true;\n            }\n            render() {\n                if (this.div) {\n                    return this.div;\n                }\n                let baseX, baseY;\n                if (this.width) {\n                    baseX = this.x;\n                    baseY = this.y;\n                }\n                super.render();\n                this.div.hidden = true;\n                if (this.#bitmap) {\n                    this.#createCanvas();\n                } else {\n                    this.#getBitmap();\n                }\n                if (this.width) {\n                    const [parentWidth, parentHeight] = this.parentDimensions;\n                    this.setAt(baseX * parentWidth, baseY * parentHeight, this.width * parentWidth, this.height * parentHeight);\n                }\n                return this.div;\n            }\n            #createCanvas() {\n                const { div } = this;\n                let { width, height } = this.#bitmap;\n                const [pageWidth, pageHeight] = this.pageDimensions;\n                const MAX_RATIO = 0.75;\n                if (this.width) {\n                    width = this.width * pageWidth;\n                    height = this.height * pageHeight;\n                } else if (width > MAX_RATIO * pageWidth || height > MAX_RATIO * pageHeight) {\n                    const factor = Math.min(MAX_RATIO * pageWidth / width, MAX_RATIO * pageHeight / height);\n                    width *= factor;\n                    height *= factor;\n                }\n                const [parentWidth, parentHeight] = this.parentDimensions;\n                this.setDims(width * parentWidth / pageWidth, height * parentHeight / pageHeight);\n                this._uiManager.enableWaiting(false);\n                const canvas = this.#canvas = document.createElement(\"canvas\");\n                div.append(canvas);\n                div.hidden = false;\n                this.#drawBitmap(width, height);\n                this.#createObserver();\n                if (!this.#hasBeenAddedInUndoStack) {\n                    this.parent.addUndoableEditor(this);\n                    this.#hasBeenAddedInUndoStack = true;\n                }\n                this._uiManager._eventBus.dispatch(\"reporttelemetry\", {\n                    source: this,\n                    details: {\n                        type: \"editing\",\n                        subtype: this.editorType,\n                        data: {\n                            action: \"inserted_image\"\n                        }\n                    }\n                });\n                this.addAltTextButton();\n                if (this.#bitmapFileName) {\n                    canvas.setAttribute(\"aria-label\", this.#bitmapFileName);\n                }\n            }\n            #setDimensions(width, height) {\n                const [parentWidth, parentHeight] = this.parentDimensions;\n                this.width = width / parentWidth;\n                this.height = height / parentHeight;\n                this.setDims(width, height);\n                if (this._initialOptions?.isCentered) {\n                    this.center();\n                } else {\n                    this.fixAndSetPosition();\n                }\n                this._initialOptions = null;\n                if (this.#resizeTimeoutId !== null) {\n                    clearTimeout(this.#resizeTimeoutId);\n                }\n                const TIME_TO_WAIT = 200;\n                this.#resizeTimeoutId = setTimeout(()=>{\n                    this.#resizeTimeoutId = null;\n                    this.#drawBitmap(width, height);\n                }, TIME_TO_WAIT);\n            }\n            #scaleBitmap(width, height) {\n                const { width: bitmapWidth, height: bitmapHeight } = this.#bitmap;\n                let newWidth = bitmapWidth;\n                let newHeight = bitmapHeight;\n                let bitmap = this.#bitmap;\n                while(newWidth > 2 * width || newHeight > 2 * height){\n                    const prevWidth = newWidth;\n                    const prevHeight = newHeight;\n                    if (newWidth > 2 * width) {\n                        newWidth = newWidth >= 16384 ? Math.floor(newWidth / 2) - 1 : Math.ceil(newWidth / 2);\n                    }\n                    if (newHeight > 2 * height) {\n                        newHeight = newHeight >= 16384 ? Math.floor(newHeight / 2) - 1 : Math.ceil(newHeight / 2);\n                    }\n                    const offscreen = new OffscreenCanvas(newWidth, newHeight);\n                    const ctx = offscreen.getContext(\"2d\");\n                    ctx.drawImage(bitmap, 0, 0, prevWidth, prevHeight, 0, 0, newWidth, newHeight);\n                    bitmap = offscreen.transferToImageBitmap();\n                }\n                return bitmap;\n            }\n            #drawBitmap(width, height) {\n                width = Math.ceil(width);\n                height = Math.ceil(height);\n                const canvas = this.#canvas;\n                if (!canvas || canvas.width === width && canvas.height === height) {\n                    return;\n                }\n                canvas.width = width;\n                canvas.height = height;\n                const bitmap = this.#isSvg ? this.#bitmap : this.#scaleBitmap(width, height);\n                const ctx = canvas.getContext(\"2d\");\n                ctx.filter = this._uiManager.hcmFilter;\n                ctx.drawImage(bitmap, 0, 0, bitmap.width, bitmap.height, 0, 0, width, height);\n            }\n            getImageForAltText() {\n                return this.#canvas;\n            }\n            #serializeBitmap(toUrl) {\n                if (toUrl) {\n                    if (this.#isSvg) {\n                        const url = this._uiManager.imageManager.getSvgUrl(this.#bitmapId);\n                        if (url) {\n                            return url;\n                        }\n                    }\n                    const canvas = document.createElement(\"canvas\");\n                    ({ width: canvas.width, height: canvas.height } = this.#bitmap);\n                    const ctx = canvas.getContext(\"2d\");\n                    ctx.drawImage(this.#bitmap, 0, 0);\n                    return canvas.toDataURL();\n                }\n                if (this.#isSvg) {\n                    const [pageWidth, pageHeight] = this.pageDimensions;\n                    const width = Math.round(this.width * pageWidth * display_utils.PixelsPerInch.PDF_TO_CSS_UNITS);\n                    const height = Math.round(this.height * pageHeight * display_utils.PixelsPerInch.PDF_TO_CSS_UNITS);\n                    const offscreen = new OffscreenCanvas(width, height);\n                    const ctx = offscreen.getContext(\"2d\");\n                    ctx.drawImage(this.#bitmap, 0, 0, this.#bitmap.width, this.#bitmap.height, 0, 0, width, height);\n                    return offscreen.transferToImageBitmap();\n                }\n                return structuredClone(this.#bitmap);\n            }\n            #createObserver() {\n                this.#observer = new ResizeObserver((entries)=>{\n                    const rect = entries[0].contentRect;\n                    if (rect.width && rect.height) {\n                        this.#setDimensions(rect.width, rect.height);\n                    }\n                });\n                this.#observer.observe(this.div);\n            }\n            static deserialize(data, parent, uiManager) {\n                if (data instanceof annotation_layer.StampAnnotationElement) {\n                    return null;\n                }\n                const editor = super.deserialize(data, parent, uiManager);\n                const { rect, bitmapUrl, bitmapId, isSvg, accessibilityData } = data;\n                if (bitmapId && uiManager.imageManager.isValidId(bitmapId)) {\n                    editor.#bitmapId = bitmapId;\n                } else {\n                    editor.#bitmapUrl = bitmapUrl;\n                }\n                editor.#isSvg = isSvg;\n                const [parentWidth, parentHeight] = editor.pageDimensions;\n                editor.width = (rect[2] - rect[0]) / parentWidth;\n                editor.height = (rect[3] - rect[1]) / parentHeight;\n                if (accessibilityData) {\n                    editor.altTextData = accessibilityData;\n                }\n                return editor;\n            }\n            serialize(isForCopying = false, context = null) {\n                if (this.isEmpty()) {\n                    return null;\n                }\n                const serialized = {\n                    annotationType: util.AnnotationEditorType.STAMP,\n                    bitmapId: this.#bitmapId,\n                    pageIndex: this.pageIndex,\n                    rect: this.getRect(0, 0),\n                    rotation: this.rotation,\n                    isSvg: this.#isSvg,\n                    structTreeParentId: this._structTreeParentId\n                };\n                if (isForCopying) {\n                    serialized.bitmapUrl = this.#serializeBitmap(true);\n                    serialized.accessibilityData = this.altTextData;\n                    return serialized;\n                }\n                const { decorative, altText } = this.altTextData;\n                if (!decorative && altText) {\n                    serialized.accessibilityData = {\n                        type: \"Figure\",\n                        alt: altText\n                    };\n                }\n                if (context === null) {\n                    return serialized;\n                }\n                context.stamps ||= new Map();\n                const area = this.#isSvg ? (serialized.rect[2] - serialized.rect[0]) * (serialized.rect[3] - serialized.rect[1]) : null;\n                if (!context.stamps.has(this.#bitmapId)) {\n                    context.stamps.set(this.#bitmapId, {\n                        area,\n                        serialized\n                    });\n                    serialized.bitmap = this.#serializeBitmap(false);\n                } else if (this.#isSvg) {\n                    const prevData = context.stamps.get(this.#bitmapId);\n                    if (area > prevData.area) {\n                        prevData.area = area;\n                        prevData.serialized.bitmap.close();\n                        prevData.serialized.bitmap = this.#serializeBitmap(false);\n                    }\n                }\n                return serialized;\n            }\n        }\n        ; // CONCATENATED MODULE: ./src/display/editor/annotation_editor_layer.js\n        class AnnotationEditorLayer {\n            #accessibilityManager;\n            #allowClick;\n            #annotationLayer;\n            #boundPointerup;\n            #boundPointerUpAfterSelection;\n            #boundPointerdown;\n            #editorFocusTimeoutId;\n            #boundSelectionStart;\n            #editors;\n            #hadPointerDown;\n            #isCleaningUp;\n            #isDisabling;\n            #textLayer;\n            #uiManager;\n            static{\n                this._initialized = false;\n            }\n            static #editorTypes = new Map([\n                FreeTextEditor,\n                InkEditor,\n                StampEditor,\n                HighlightEditor\n            ].map((type)=>[\n                    type._editorType,\n                    type\n                ]));\n            constructor({ uiManager, pageIndex, div, accessibilityManager, annotationLayer, drawLayer, textLayer, viewport, l10n }){\n                this.#allowClick = false;\n                this.#annotationLayer = null;\n                this.#boundPointerup = this.pointerup.bind(this);\n                this.#boundPointerUpAfterSelection = this.pointerUpAfterSelection.bind(this);\n                this.#boundPointerdown = this.pointerdown.bind(this);\n                this.#editorFocusTimeoutId = null;\n                this.#boundSelectionStart = this.selectionStart.bind(this);\n                this.#editors = new Map();\n                this.#hadPointerDown = false;\n                this.#isCleaningUp = false;\n                this.#isDisabling = false;\n                this.#textLayer = null;\n                const editorTypes = [\n                    ...AnnotationEditorLayer.#editorTypes.values()\n                ];\n                if (!AnnotationEditorLayer._initialized) {\n                    AnnotationEditorLayer._initialized = true;\n                    for (const editorType of editorTypes){\n                        editorType.initialize(l10n);\n                    }\n                }\n                uiManager.registerEditorTypes(editorTypes);\n                this.#uiManager = uiManager;\n                this.pageIndex = pageIndex;\n                this.div = div;\n                this.#accessibilityManager = accessibilityManager;\n                this.#annotationLayer = annotationLayer;\n                this.viewport = viewport;\n                this.#textLayer = textLayer;\n                this.drawLayer = drawLayer;\n                this.#uiManager.addLayer(this);\n            }\n            get isEmpty() {\n                return this.#editors.size === 0;\n            }\n            updateToolbar(mode) {\n                this.#uiManager.updateToolbar(mode);\n            }\n            updateMode(mode = this.#uiManager.getMode()) {\n                this.#cleanup();\n                switch(mode){\n                    case util.AnnotationEditorType.NONE:\n                        this.disableTextSelection();\n                        this.togglePointerEvents(false);\n                        this.disableClick();\n                        break;\n                    case util.AnnotationEditorType.INK:\n                        this.addInkEditorIfNeeded(false);\n                        this.disableTextSelection();\n                        this.togglePointerEvents(true);\n                        this.disableClick();\n                        break;\n                    case util.AnnotationEditorType.HIGHLIGHT:\n                        this.enableTextSelection();\n                        this.togglePointerEvents(false);\n                        this.disableClick();\n                        break;\n                    default:\n                        this.disableTextSelection();\n                        this.togglePointerEvents(true);\n                        this.enableClick();\n                }\n                if (mode !== util.AnnotationEditorType.NONE) {\n                    const { classList } = this.div;\n                    for (const editorType of AnnotationEditorLayer.#editorTypes.values()){\n                        classList.toggle(`${editorType._type}Editing`, mode === editorType._editorType);\n                    }\n                    this.div.hidden = false;\n                }\n            }\n            addInkEditorIfNeeded(isCommitting) {\n                if (this.#uiManager.getMode() !== util.AnnotationEditorType.INK) {\n                    return;\n                }\n                if (!isCommitting) {\n                    for (const editor of this.#editors.values()){\n                        if (editor.isEmpty()) {\n                            editor.setInBackground();\n                            return;\n                        }\n                    }\n                }\n                const editor = this.#createAndAddNewEditor({\n                    offsetX: 0,\n                    offsetY: 0\n                }, false);\n                editor.setInBackground();\n            }\n            setEditingState(isEditing) {\n                this.#uiManager.setEditingState(isEditing);\n            }\n            addCommands(params) {\n                this.#uiManager.addCommands(params);\n            }\n            togglePointerEvents(enabled = false) {\n                this.div.classList.toggle(\"disabled\", !enabled);\n            }\n            enable() {\n                this.togglePointerEvents(true);\n                const annotationElementIds = new Set();\n                for (const editor of this.#editors.values()){\n                    editor.enableEditing();\n                    if (editor.annotationElementId) {\n                        annotationElementIds.add(editor.annotationElementId);\n                    }\n                }\n                if (!this.#annotationLayer) {\n                    return;\n                }\n                const editables = this.#annotationLayer.getEditableAnnotations();\n                for (const editable of editables){\n                    editable.hide();\n                    if (this.#uiManager.isDeletedAnnotationElement(editable.data.id)) {\n                        continue;\n                    }\n                    if (annotationElementIds.has(editable.data.id)) {\n                        continue;\n                    }\n                    const editor = this.deserialize(editable);\n                    if (!editor) {\n                        continue;\n                    }\n                    this.addOrRebuild(editor);\n                    editor.enableEditing();\n                }\n            }\n            disable() {\n                this.#isDisabling = true;\n                this.togglePointerEvents(false);\n                const hiddenAnnotationIds = new Set();\n                for (const editor of this.#editors.values()){\n                    editor.disableEditing();\n                    if (!editor.annotationElementId || editor.serialize() !== null) {\n                        hiddenAnnotationIds.add(editor.annotationElementId);\n                        continue;\n                    }\n                    this.getEditableAnnotation(editor.annotationElementId)?.show();\n                    editor.remove();\n                }\n                if (this.#annotationLayer) {\n                    const editables = this.#annotationLayer.getEditableAnnotations();\n                    for (const editable of editables){\n                        const { id } = editable.data;\n                        if (hiddenAnnotationIds.has(id) || this.#uiManager.isDeletedAnnotationElement(id)) {\n                            continue;\n                        }\n                        editable.show();\n                    }\n                }\n                this.#cleanup();\n                if (this.isEmpty) {\n                    this.div.hidden = true;\n                }\n                const { classList } = this.div;\n                for (const editorType of AnnotationEditorLayer.#editorTypes.values()){\n                    classList.remove(`${editorType._type}Editing`);\n                }\n                this.disableTextSelection();\n                this.#isDisabling = false;\n            }\n            getEditableAnnotation(id) {\n                return this.#annotationLayer?.getEditableAnnotation(id) || null;\n            }\n            setActiveEditor(editor) {\n                const currentActive = this.#uiManager.getActive();\n                if (currentActive === editor) {\n                    return;\n                }\n                this.#uiManager.setActiveEditor(editor);\n            }\n            enableTextSelection() {\n                if (this.#textLayer?.div) {\n                    document.addEventListener(\"selectstart\", this.#boundSelectionStart);\n                }\n            }\n            disableTextSelection() {\n                if (this.#textLayer?.div) {\n                    document.removeEventListener(\"selectstart\", this.#boundSelectionStart);\n                }\n            }\n            enableClick() {\n                this.div.addEventListener(\"pointerdown\", this.#boundPointerdown);\n                this.div.addEventListener(\"pointerup\", this.#boundPointerup);\n            }\n            disableClick() {\n                this.div.removeEventListener(\"pointerdown\", this.#boundPointerdown);\n                this.div.removeEventListener(\"pointerup\", this.#boundPointerup);\n            }\n            attach(editor) {\n                this.#editors.set(editor.id, editor);\n                const { annotationElementId } = editor;\n                if (annotationElementId && this.#uiManager.isDeletedAnnotationElement(annotationElementId)) {\n                    this.#uiManager.removeDeletedAnnotationElement(editor);\n                }\n            }\n            detach(editor) {\n                this.#editors.delete(editor.id);\n                this.#accessibilityManager?.removePointerInTextLayer(editor.contentDiv);\n                if (!this.#isDisabling && editor.annotationElementId) {\n                    this.#uiManager.addDeletedAnnotationElement(editor);\n                }\n            }\n            remove(editor) {\n                this.detach(editor);\n                this.#uiManager.removeEditor(editor);\n                editor.div.remove();\n                editor.isAttachedToDOM = false;\n                if (!this.#isCleaningUp) {\n                    this.addInkEditorIfNeeded(false);\n                }\n            }\n            changeParent(editor) {\n                if (editor.parent === this) {\n                    return;\n                }\n                if (editor.annotationElementId) {\n                    this.#uiManager.addDeletedAnnotationElement(editor.annotationElementId);\n                    editor_editor.AnnotationEditor.deleteAnnotationElement(editor);\n                    editor.annotationElementId = null;\n                }\n                this.attach(editor);\n                editor.parent?.detach(editor);\n                editor.setParent(this);\n                if (editor.div && editor.isAttachedToDOM) {\n                    editor.div.remove();\n                    this.div.append(editor.div);\n                }\n            }\n            add(editor) {\n                this.changeParent(editor);\n                this.#uiManager.addEditor(editor);\n                this.attach(editor);\n                if (!editor.isAttachedToDOM) {\n                    const div = editor.render();\n                    this.div.append(div);\n                    editor.isAttachedToDOM = true;\n                }\n                editor.fixAndSetPosition();\n                editor.onceAdded();\n                this.#uiManager.addToAnnotationStorage(editor);\n            }\n            moveEditorInDOM(editor) {\n                if (!editor.isAttachedToDOM) {\n                    return;\n                }\n                const { activeElement } = document;\n                if (editor.div.contains(activeElement) && !this.#editorFocusTimeoutId) {\n                    editor._focusEventsAllowed = false;\n                    this.#editorFocusTimeoutId = setTimeout(()=>{\n                        this.#editorFocusTimeoutId = null;\n                        if (!editor.div.contains(document.activeElement)) {\n                            editor.div.addEventListener(\"focusin\", ()=>{\n                                editor._focusEventsAllowed = true;\n                            }, {\n                                once: true\n                            });\n                            activeElement.focus();\n                        } else {\n                            editor._focusEventsAllowed = true;\n                        }\n                    }, 0);\n                }\n                editor._structTreeParentId = this.#accessibilityManager?.moveElementInDOM(this.div, editor.div, editor.contentDiv, true);\n            }\n            addOrRebuild(editor) {\n                if (editor.needsToBeRebuilt()) {\n                    editor.parent ||= this;\n                    editor.rebuild();\n                } else {\n                    this.add(editor);\n                }\n            }\n            addUndoableEditor(editor) {\n                const cmd = ()=>editor._uiManager.rebuild(editor);\n                const undo = ()=>{\n                    editor.remove();\n                };\n                this.addCommands({\n                    cmd,\n                    undo,\n                    mustExec: false\n                });\n            }\n            getNextId() {\n                return this.#uiManager.getId();\n            }\n            get #currentEditorType() {\n                return AnnotationEditorLayer.#editorTypes.get(this.#uiManager.getMode());\n            }\n            #createNewEditor(params) {\n                const editorType = this.#currentEditorType;\n                return editorType ? new editorType.prototype.constructor(params) : null;\n            }\n            canCreateNewEmptyEditor() {\n                return this.#currentEditorType?.canCreateNewEmptyEditor();\n            }\n            pasteEditor(mode, params) {\n                this.#uiManager.updateToolbar(mode);\n                this.#uiManager.updateMode(mode);\n                const { offsetX, offsetY } = this.#getCenterPoint();\n                const id = this.getNextId();\n                const editor = this.#createNewEditor({\n                    parent: this,\n                    id,\n                    x: offsetX,\n                    y: offsetY,\n                    uiManager: this.#uiManager,\n                    isCentered: true,\n                    ...params\n                });\n                if (editor) {\n                    this.add(editor);\n                }\n            }\n            deserialize(data) {\n                return AnnotationEditorLayer.#editorTypes.get(data.annotationType ?? data.annotationEditorType)?.deserialize(data, this, this.#uiManager) || null;\n            }\n            #createAndAddNewEditor(event, isCentered, data = {}) {\n                const id = this.getNextId();\n                const editor = this.#createNewEditor({\n                    parent: this,\n                    id,\n                    x: event.offsetX,\n                    y: event.offsetY,\n                    uiManager: this.#uiManager,\n                    isCentered,\n                    ...data\n                });\n                if (editor) {\n                    this.add(editor);\n                }\n                return editor;\n            }\n            #getCenterPoint() {\n                const { x, y, width, height } = this.div.getBoundingClientRect();\n                const tlX = Math.max(0, x);\n                const tlY = Math.max(0, y);\n                const brX = Math.min(window.innerWidth, x + width);\n                const brY = Math.min(window.innerHeight, y + height);\n                const centerX = (tlX + brX) / 2 - x;\n                const centerY = (tlY + brY) / 2 - y;\n                const [offsetX, offsetY] = this.viewport.rotation % 180 === 0 ? [\n                    centerX,\n                    centerY\n                ] : [\n                    centerY,\n                    centerX\n                ];\n                return {\n                    offsetX,\n                    offsetY\n                };\n            }\n            addNewEditor() {\n                this.#createAndAddNewEditor(this.#getCenterPoint(), true);\n            }\n            setSelected(editor) {\n                this.#uiManager.setSelected(editor);\n            }\n            toggleSelected(editor) {\n                this.#uiManager.toggleSelected(editor);\n            }\n            isSelected(editor) {\n                return this.#uiManager.isSelected(editor);\n            }\n            unselect(editor) {\n                this.#uiManager.unselect(editor);\n            }\n            selectionStart(_event) {\n                this.#textLayer?.div.addEventListener(\"pointerup\", this.#boundPointerUpAfterSelection, {\n                    once: true\n                });\n            }\n            pointerUpAfterSelection(event) {\n                const selection = document.getSelection();\n                if (selection.rangeCount === 0) {\n                    return;\n                }\n                const range = selection.getRangeAt(0);\n                if (range.collapsed) {\n                    return;\n                }\n                if (!this.#textLayer?.div.contains(range.commonAncestorContainer)) {\n                    return;\n                }\n                const { x: layerX, y: layerY, width: parentWidth, height: parentHeight } = this.#textLayer.div.getBoundingClientRect();\n                const bboxes = range.getClientRects();\n                let rotator;\n                switch(this.viewport.rotation){\n                    case 90:\n                        rotator = (x, y, w, h)=>({\n                                x: (y - layerY) / parentHeight,\n                                y: 1 - (x + w - layerX) / parentWidth,\n                                width: h / parentHeight,\n                                height: w / parentWidth\n                            });\n                        break;\n                    case 180:\n                        rotator = (x, y, w, h)=>({\n                                x: 1 - (x + w - layerX) / parentWidth,\n                                y: 1 - (y + h - layerY) / parentHeight,\n                                width: w / parentWidth,\n                                height: h / parentHeight\n                            });\n                        break;\n                    case 270:\n                        rotator = (x, y, w, h)=>({\n                                x: 1 - (y + h - layerY) / parentHeight,\n                                y: (x - layerX) / parentWidth,\n                                width: h / parentHeight,\n                                height: w / parentWidth\n                            });\n                        break;\n                    default:\n                        rotator = (x, y, w, h)=>({\n                                x: (x - layerX) / parentWidth,\n                                y: (y - layerY) / parentHeight,\n                                width: w / parentWidth,\n                                height: h / parentHeight\n                            });\n                        break;\n                }\n                const boxes = [];\n                for (const { x, y, width, height } of bboxes){\n                    if (width === 0 || height === 0) {\n                        continue;\n                    }\n                    boxes.push(rotator(x, y, width, height));\n                }\n                if (boxes.length !== 0) {\n                    this.#createAndAddNewEditor(event, false, {\n                        boxes\n                    });\n                }\n                selection.empty();\n            }\n            pointerup(event) {\n                const { isMac } = util.FeatureTest.platform;\n                if (event.button !== 0 || event.ctrlKey && isMac) {\n                    return;\n                }\n                if (event.target !== this.div) {\n                    return;\n                }\n                if (!this.#hadPointerDown) {\n                    return;\n                }\n                this.#hadPointerDown = false;\n                if (!this.#allowClick) {\n                    this.#allowClick = true;\n                    return;\n                }\n                if (this.#uiManager.getMode() === util.AnnotationEditorType.STAMP) {\n                    this.#uiManager.unselectAll();\n                    return;\n                }\n                this.#createAndAddNewEditor(event, false);\n            }\n            pointerdown(event) {\n                if (this.#uiManager.getMode() === util.AnnotationEditorType.HIGHLIGHT) {\n                    this.enableTextSelection();\n                }\n                if (this.#hadPointerDown) {\n                    this.#hadPointerDown = false;\n                    return;\n                }\n                const { isMac } = util.FeatureTest.platform;\n                if (event.button !== 0 || event.ctrlKey && isMac) {\n                    return;\n                }\n                if (event.target !== this.div) {\n                    return;\n                }\n                this.#hadPointerDown = true;\n                const editor = this.#uiManager.getActive();\n                this.#allowClick = !editor || editor.isEmpty();\n            }\n            findNewParent(editor, x, y) {\n                const layer = this.#uiManager.findParent(x, y);\n                if (layer === null || layer === this) {\n                    return false;\n                }\n                layer.changeParent(editor);\n                return true;\n            }\n            destroy() {\n                if (this.#uiManager.getActive()?.parent === this) {\n                    this.#uiManager.commitOrRemove();\n                    this.#uiManager.setActiveEditor(null);\n                }\n                if (this.#editorFocusTimeoutId) {\n                    clearTimeout(this.#editorFocusTimeoutId);\n                    this.#editorFocusTimeoutId = null;\n                }\n                for (const editor of this.#editors.values()){\n                    this.#accessibilityManager?.removePointerInTextLayer(editor.contentDiv);\n                    editor.setParent(null);\n                    editor.isAttachedToDOM = false;\n                    editor.div.remove();\n                }\n                this.div = null;\n                this.#editors.clear();\n                this.#uiManager.removeLayer(this);\n            }\n            #cleanup() {\n                this.#isCleaningUp = true;\n                for (const editor of this.#editors.values()){\n                    if (editor.isEmpty()) {\n                        editor.remove();\n                    }\n                }\n                this.#isCleaningUp = false;\n            }\n            render({ viewport }) {\n                this.viewport = viewport;\n                (0, display_utils.setLayerDimensions)(this.div, viewport);\n                for (const editor of this.#uiManager.getEditors(this.pageIndex)){\n                    this.add(editor);\n                }\n                this.updateMode();\n            }\n            update({ viewport }) {\n                this.#uiManager.commitOrRemove();\n                const oldRotation = this.viewport.rotation;\n                const rotation = viewport.rotation;\n                this.viewport = viewport;\n                (0, display_utils.setLayerDimensions)(this.div, {\n                    rotation\n                });\n                if (oldRotation !== rotation) {\n                    for (const editor of this.#editors.values()){\n                        editor.rotate(rotation);\n                    }\n                }\n                this.updateMode();\n            }\n            get pageDimensions() {\n                const { pageWidth, pageHeight } = this.viewport.rawDims;\n                return [\n                    pageWidth,\n                    pageHeight\n                ];\n            }\n        }\n    /***/ },\n    /***/ 97: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_521775__)=>{\n        /* harmony export */ __nested_webpack_require_521775__.d(__nested_webpack_exports__, {\n            /* harmony export */ ColorPicker: ()=>/* binding */ ColorPicker\n        });\n        /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_521775__(266);\n        /* harmony import */ var _tools_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_521775__(812);\n        /* harmony import */ var _display_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_521775__(473);\n        class ColorPicker {\n            #boundKeyDown;\n            #button;\n            #buttonSwatch;\n            #defaultColor;\n            #dropdown;\n            #dropdownWasFromKeyboard;\n            #isMainColorPicker;\n            #eventBus;\n            #uiManager;\n            static get _keyboardManager() {\n                return (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"_keyboardManager\", new _tools_js__WEBPACK_IMPORTED_MODULE_1__.KeyboardManager([\n                    [\n                        [\n                            \"Escape\",\n                            \"mac+Escape\"\n                        ],\n                        ColorPicker.prototype._hideDropdownFromKeyboard\n                    ],\n                    [\n                        [\n                            \" \",\n                            \"mac+ \"\n                        ],\n                        ColorPicker.prototype._colorSelectFromKeyboard\n                    ],\n                    [\n                        [\n                            \"ArrowDown\",\n                            \"ArrowRight\",\n                            \"mac+ArrowDown\",\n                            \"mac+ArrowRight\"\n                        ],\n                        ColorPicker.prototype._moveToNext\n                    ],\n                    [\n                        [\n                            \"ArrowUp\",\n                            \"ArrowLeft\",\n                            \"mac+ArrowUp\",\n                            \"mac+ArrowLeft\"\n                        ],\n                        ColorPicker.prototype._moveToPrevious\n                    ],\n                    [\n                        [\n                            \"Home\",\n                            \"mac+Home\"\n                        ],\n                        ColorPicker.prototype._moveToBeginning\n                    ],\n                    [\n                        [\n                            \"End\",\n                            \"mac+End\"\n                        ],\n                        ColorPicker.prototype._moveToEnd\n                    ]\n                ]));\n            }\n            constructor({ editor = null, uiManager = null }){\n                this.#boundKeyDown = this.#keyDown.bind(this);\n                this.#button = null;\n                this.#buttonSwatch = null;\n                this.#dropdown = null;\n                this.#dropdownWasFromKeyboard = false;\n                this.#isMainColorPicker = false;\n                this.#uiManager = null;\n                this.#isMainColorPicker = !editor;\n                this.#uiManager = editor?._uiManager || uiManager;\n                this.#eventBus = this.#uiManager._eventBus;\n                this.#defaultColor = editor?.color || this.#uiManager?.highlightColors.values().next().value || \"#FFFF98\";\n            }\n            renderButton() {\n                const button = this.#button = document.createElement(\"button\");\n                button.className = \"colorPicker\";\n                button.tabIndex = \"0\";\n                button.setAttribute(\"data-l10n-id\", \"pdfjs-editor-colorpicker-button\");\n                button.setAttribute(\"aria-haspopup\", true);\n                button.addEventListener(\"click\", this.#openDropdown.bind(this));\n                const swatch = this.#buttonSwatch = document.createElement(\"span\");\n                swatch.className = \"swatch\";\n                swatch.style.backgroundColor = this.#defaultColor;\n                button.append(swatch);\n                return button;\n            }\n            renderMainDropdown() {\n                const dropdown = this.#dropdown = this.#getDropdownRoot(_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR);\n                dropdown.setAttribute(\"aria-orientation\", \"horizontal\");\n                dropdown.setAttribute(\"aria-labelledby\", \"highlightColorPickerLabel\");\n                return dropdown;\n            }\n            #getDropdownRoot(paramType) {\n                const div = document.createElement(\"div\");\n                div.addEventListener(\"contextmenu\", _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.noContextMenu);\n                div.className = \"dropdown\";\n                div.role = \"listbox\";\n                div.setAttribute(\"aria-multiselectable\", false);\n                div.setAttribute(\"aria-orientation\", \"vertical\");\n                div.setAttribute(\"data-l10n-id\", \"pdfjs-editor-colorpicker-dropdown\");\n                for (const [name, color] of this.#uiManager.highlightColors){\n                    const button = document.createElement(\"button\");\n                    button.tabIndex = \"0\";\n                    button.role = \"option\";\n                    button.setAttribute(\"data-color\", color);\n                    button.title = name;\n                    button.setAttribute(\"data-l10n-id\", `pdfjs-editor-colorpicker-${name}`);\n                    const swatch = document.createElement(\"span\");\n                    button.append(swatch);\n                    swatch.className = \"swatch\";\n                    swatch.style.backgroundColor = color;\n                    button.setAttribute(\"aria-selected\", color === this.#defaultColor);\n                    button.addEventListener(\"click\", this.#colorSelect.bind(this, paramType, color));\n                    div.append(button);\n                }\n                div.addEventListener(\"keydown\", this.#boundKeyDown);\n                return div;\n            }\n            #colorSelect(type, color, event) {\n                event.stopPropagation();\n                this.#eventBus.dispatch(\"switchannotationeditorparams\", {\n                    source: this,\n                    type,\n                    value: color\n                });\n            }\n            _colorSelectFromKeyboard(event) {\n                const color = event.target.getAttribute(\"data-color\");\n                if (!color) {\n                    return;\n                }\n                this.#colorSelect(color, event);\n            }\n            _moveToNext(event) {\n                if (event.target === this.#button) {\n                    this.#dropdown.firstChild?.focus();\n                    return;\n                }\n                event.target.nextSibling?.focus();\n            }\n            _moveToPrevious(event) {\n                event.target.previousSibling?.focus();\n            }\n            _moveToBeginning() {\n                this.#dropdown.firstChild?.focus();\n            }\n            _moveToEnd() {\n                this.#dropdown.lastChild?.focus();\n            }\n            #keyDown(event) {\n                ColorPicker._keyboardManager.exec(this, event);\n            }\n            #openDropdown(event) {\n                if (this.#dropdown && !this.#dropdown.classList.contains(\"hidden\")) {\n                    this.hideDropdown();\n                    return;\n                }\n                this.#button.addEventListener(\"keydown\", this.#boundKeyDown);\n                this.#dropdownWasFromKeyboard = event.detail === 0;\n                if (this.#dropdown) {\n                    this.#dropdown.classList.remove(\"hidden\");\n                    return;\n                }\n                const root = this.#dropdown = this.#getDropdownRoot(_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorParamsType.HIGHLIGHT_COLOR);\n                this.#button.append(root);\n            }\n            hideDropdown() {\n                this.#dropdown?.classList.add(\"hidden\");\n            }\n            _hideDropdownFromKeyboard() {\n                if (this.#isMainColorPicker || !this.#dropdown || this.#dropdown.classList.contains(\"hidden\")) {\n                    return;\n                }\n                this.hideDropdown();\n                this.#button.removeEventListener(\"keydown\", this.#boundKeyDown);\n                this.#button.focus({\n                    preventScroll: true,\n                    focusVisible: this.#dropdownWasFromKeyboard\n                });\n            }\n            updateColor(color) {\n                if (this.#buttonSwatch) {\n                    this.#buttonSwatch.style.backgroundColor = color;\n                }\n                if (!this.#dropdown) {\n                    return;\n                }\n                const i = this.#uiManager.highlightColors.values();\n                for (const child of this.#dropdown.children){\n                    child.setAttribute(\"aria-selected\", i.next().value === color);\n                }\n            }\n            destroy() {\n                this.#button?.remove();\n                this.#button = null;\n                this.#buttonSwatch = null;\n                this.#dropdown?.remove();\n                this.#dropdown = null;\n            }\n        }\n    /***/ },\n    /***/ 115: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_531090__)=>{\n        // EXPORTS\n        __nested_webpack_require_531090__.d(__nested_webpack_exports__, {\n            AnnotationEditor: ()=>/* binding */ AnnotationEditor\n        });\n        // EXTERNAL MODULE: ./src/display/editor/tools.js\n        var tools = __nested_webpack_require_531090__(812);\n        // EXTERNAL MODULE: ./src/shared/util.js\n        var util = __nested_webpack_require_531090__(266);\n        // EXTERNAL MODULE: ./src/display/display_utils.js\n        var display_utils = __nested_webpack_require_531090__(473);\n        ; // CONCATENATED MODULE: ./src/display/editor/alt_text.js\n        class AltText {\n            #altText;\n            #altTextDecorative;\n            #altTextButton;\n            #altTextTooltip;\n            #altTextTooltipTimeout;\n            #altTextWasFromKeyBoard;\n            #editor;\n            static{\n                this._l10nPromise = null;\n            }\n            constructor(editor){\n                this.#altText = \"\";\n                this.#altTextDecorative = false;\n                this.#altTextButton = null;\n                this.#altTextTooltip = null;\n                this.#altTextTooltipTimeout = null;\n                this.#altTextWasFromKeyBoard = false;\n                this.#editor = null;\n                this.#editor = editor;\n            }\n            static initialize(l10nPromise) {\n                AltText._l10nPromise ||= l10nPromise;\n            }\n            async render() {\n                const altText = this.#altTextButton = document.createElement(\"button\");\n                altText.className = \"altText\";\n                const msg = await AltText._l10nPromise.get(\"pdfjs-editor-alt-text-button-label\");\n                altText.textContent = msg;\n                altText.setAttribute(\"aria-label\", msg);\n                altText.tabIndex = \"0\";\n                altText.addEventListener(\"contextmenu\", display_utils.noContextMenu);\n                altText.addEventListener(\"pointerdown\", (event)=>event.stopPropagation());\n                const onClick = (event)=>{\n                    event.preventDefault();\n                    this.#editor._uiManager.editAltText(this.#editor);\n                };\n                altText.addEventListener(\"click\", onClick, {\n                    capture: true\n                });\n                altText.addEventListener(\"keydown\", (event)=>{\n                    if (event.target === altText && event.key === \"Enter\") {\n                        this.#altTextWasFromKeyBoard = true;\n                        onClick(event);\n                    }\n                });\n                await this.#setState();\n                return altText;\n            }\n            finish() {\n                if (!this.#altTextButton) {\n                    return;\n                }\n                this.#altTextButton.focus({\n                    focusVisible: this.#altTextWasFromKeyBoard\n                });\n                this.#altTextWasFromKeyBoard = false;\n            }\n            get data() {\n                return {\n                    altText: this.#altText,\n                    decorative: this.#altTextDecorative\n                };\n            }\n            set data({ altText, decorative }) {\n                if (this.#altText === altText && this.#altTextDecorative === decorative) {\n                    return;\n                }\n                this.#altText = altText;\n                this.#altTextDecorative = decorative;\n                this.#setState();\n            }\n            toggle(enabled = false) {\n                if (!this.#altTextButton) {\n                    return;\n                }\n                if (!enabled && this.#altTextTooltipTimeout) {\n                    clearTimeout(this.#altTextTooltipTimeout);\n                    this.#altTextTooltipTimeout = null;\n                }\n                this.#altTextButton.disabled = !enabled;\n            }\n            destroy() {\n                this.#altTextButton?.remove();\n                this.#altTextButton = null;\n                this.#altTextTooltip = null;\n            }\n            async #setState() {\n                const button = this.#altTextButton;\n                if (!button) {\n                    return;\n                }\n                if (!this.#altText && !this.#altTextDecorative) {\n                    button.classList.remove(\"done\");\n                    this.#altTextTooltip?.remove();\n                    return;\n                }\n                button.classList.add(\"done\");\n                AltText._l10nPromise.get(\"pdfjs-editor-alt-text-edit-button-label\").then((msg)=>{\n                    button.setAttribute(\"aria-label\", msg);\n                });\n                let tooltip = this.#altTextTooltip;\n                if (!tooltip) {\n                    this.#altTextTooltip = tooltip = document.createElement(\"span\");\n                    tooltip.className = \"tooltip\";\n                    tooltip.setAttribute(\"role\", \"tooltip\");\n                    const id = tooltip.id = `alt-text-tooltip-${this.#editor.id}`;\n                    button.setAttribute(\"aria-describedby\", id);\n                    const DELAY_TO_SHOW_TOOLTIP = 100;\n                    button.addEventListener(\"mouseenter\", ()=>{\n                        this.#altTextTooltipTimeout = setTimeout(()=>{\n                            this.#altTextTooltipTimeout = null;\n                            this.#altTextTooltip.classList.add(\"show\");\n                            this.#editor._uiManager._eventBus.dispatch(\"reporttelemetry\", {\n                                source: this,\n                                details: {\n                                    type: \"editing\",\n                                    subtype: this.#editor.editorType,\n                                    data: {\n                                        action: \"alt_text_tooltip\"\n                                    }\n                                }\n                            });\n                        }, DELAY_TO_SHOW_TOOLTIP);\n                    });\n                    button.addEventListener(\"mouseleave\", ()=>{\n                        if (this.#altTextTooltipTimeout) {\n                            clearTimeout(this.#altTextTooltipTimeout);\n                            this.#altTextTooltipTimeout = null;\n                        }\n                        this.#altTextTooltip?.classList.remove(\"show\");\n                    });\n                }\n                tooltip.innerText = this.#altTextDecorative ? await AltText._l10nPromise.get(\"pdfjs-editor-alt-text-decorative-tooltip\") : this.#altText;\n                if (!tooltip.parentNode) {\n                    button.append(tooltip);\n                }\n                const element = this.#editor.getImageForAltText();\n                element?.setAttribute(\"aria-describedby\", tooltip.id);\n            }\n        }\n        ; // CONCATENATED MODULE: ./src/display/editor/toolbar.js\n        class EditorToolbar {\n            #toolbar;\n            #colorPicker;\n            #editor;\n            #buttons;\n            constructor(editor){\n                this.#toolbar = null;\n                this.#colorPicker = null;\n                this.#buttons = null;\n                this.#editor = editor;\n            }\n            render() {\n                const editToolbar = this.#toolbar = document.createElement(\"div\");\n                editToolbar.className = \"editToolbar\";\n                editToolbar.addEventListener(\"contextmenu\", display_utils.noContextMenu);\n                editToolbar.addEventListener(\"pointerdown\", EditorToolbar.#pointerDown);\n                const buttons = this.#buttons = document.createElement(\"div\");\n                buttons.className = \"buttons\";\n                editToolbar.append(buttons);\n                const position = this.#editor.toolbarPosition;\n                if (position) {\n                    const { style } = editToolbar;\n                    const x = this.#editor._uiManager.direction === \"ltr\" ? 1 - position[0] : position[0];\n                    style.insetInlineEnd = `${100 * x}%`;\n                    style.top = `calc(${100 * position[1]}% + var(--editor-toolbar-vert-offset))`;\n                }\n                this.#addDeleteButton();\n                return editToolbar;\n            }\n            static #pointerDown(e) {\n                e.stopPropagation();\n            }\n            #focusIn(e) {\n                this.#editor._focusEventsAllowed = false;\n                e.preventDefault();\n                e.stopPropagation();\n            }\n            #focusOut(e) {\n                this.#editor._focusEventsAllowed = true;\n                e.preventDefault();\n                e.stopPropagation();\n            }\n            #addListenersToElement(element) {\n                element.addEventListener(\"focusin\", this.#focusIn.bind(this), {\n                    capture: true\n                });\n                element.addEventListener(\"focusout\", this.#focusOut.bind(this), {\n                    capture: true\n                });\n                element.addEventListener(\"contextmenu\", display_utils.noContextMenu);\n            }\n            hide() {\n                this.#toolbar.classList.add(\"hidden\");\n                this.#colorPicker?.hideDropdown();\n            }\n            show() {\n                this.#toolbar.classList.remove(\"hidden\");\n            }\n            #addDeleteButton() {\n                const button = document.createElement(\"button\");\n                button.className = \"delete\";\n                button.tabIndex = 0;\n                button.setAttribute(\"data-l10n-id\", `pdfjs-editor-remove-${this.#editor.editorType}-button`);\n                this.#addListenersToElement(button);\n                button.addEventListener(\"click\", (e)=>{\n                    this.#editor._uiManager.delete();\n                });\n                this.#buttons.append(button);\n            }\n            get #divider() {\n                const divider = document.createElement(\"div\");\n                divider.className = \"divider\";\n                return divider;\n            }\n            addAltTextButton(button) {\n                this.#addListenersToElement(button);\n                this.#buttons.prepend(button, this.#divider);\n            }\n            addColorPicker(colorPicker) {\n                this.#colorPicker = colorPicker;\n                const button = colorPicker.renderButton();\n                this.#addListenersToElement(button);\n                this.#buttons.prepend(button, this.#divider);\n            }\n            remove() {\n                this.#toolbar.remove();\n                this.#colorPicker?.destroy();\n                this.#colorPicker = null;\n            }\n        }\n        ; // CONCATENATED MODULE: ./src/display/editor/editor.js\n        class AnnotationEditor {\n            #allResizerDivs;\n            #altText;\n            #keepAspectRatio;\n            #resizersDiv;\n            #savedDimensions;\n            #boundFocusin;\n            #boundFocusout;\n            #editToolbar;\n            #focusedResizerName;\n            #hasBeenClicked;\n            #isEditing;\n            #isInEditMode;\n            #isResizerEnabledForKeyboard;\n            #moveInDOMTimeout;\n            #isDraggable;\n            #zIndex;\n            static{\n                this._borderLineWidth = -1;\n            }\n            static{\n                this._colorManager = new tools.ColorManager();\n            }\n            static{\n                this._zIndex = 1;\n            }\n            static get _resizerKeyboardManager() {\n                const resize = AnnotationEditor.prototype._resizeWithKeyboard;\n                const small = tools.AnnotationEditorUIManager.TRANSLATE_SMALL;\n                const big = tools.AnnotationEditorUIManager.TRANSLATE_BIG;\n                return (0, util.shadow)(this, \"_resizerKeyboardManager\", new tools.KeyboardManager([\n                    [\n                        [\n                            \"ArrowLeft\",\n                            \"mac+ArrowLeft\"\n                        ],\n                        resize,\n                        {\n                            args: [\n                                -small,\n                                0\n                            ]\n                        }\n                    ],\n                    [\n                        [\n                            \"ctrl+ArrowLeft\",\n                            \"mac+shift+ArrowLeft\"\n                        ],\n                        resize,\n                        {\n                            args: [\n                                -big,\n                                0\n                            ]\n                        }\n                    ],\n                    [\n                        [\n                            \"ArrowRight\",\n                            \"mac+ArrowRight\"\n                        ],\n                        resize,\n                        {\n                            args: [\n                                small,\n                                0\n                            ]\n                        }\n                    ],\n                    [\n                        [\n                            \"ctrl+ArrowRight\",\n                            \"mac+shift+ArrowRight\"\n                        ],\n                        resize,\n                        {\n                            args: [\n                                big,\n                                0\n                            ]\n                        }\n                    ],\n                    [\n                        [\n                            \"ArrowUp\",\n                            \"mac+ArrowUp\"\n                        ],\n                        resize,\n                        {\n                            args: [\n                                0,\n                                -small\n                            ]\n                        }\n                    ],\n                    [\n                        [\n                            \"ctrl+ArrowUp\",\n                            \"mac+shift+ArrowUp\"\n                        ],\n                        resize,\n                        {\n                            args: [\n                                0,\n                                -big\n                            ]\n                        }\n                    ],\n                    [\n                        [\n                            \"ArrowDown\",\n                            \"mac+ArrowDown\"\n                        ],\n                        resize,\n                        {\n                            args: [\n                                0,\n                                small\n                            ]\n                        }\n                    ],\n                    [\n                        [\n                            \"ctrl+ArrowDown\",\n                            \"mac+shift+ArrowDown\"\n                        ],\n                        resize,\n                        {\n                            args: [\n                                0,\n                                big\n                            ]\n                        }\n                    ],\n                    [\n                        [\n                            \"Escape\",\n                            \"mac+Escape\"\n                        ],\n                        AnnotationEditor.prototype._stopResizingWithKeyboard\n                    ]\n                ]));\n            }\n            constructor(parameters){\n                this.#allResizerDivs = null;\n                this.#altText = null;\n                this.#keepAspectRatio = false;\n                this.#resizersDiv = null;\n                this.#savedDimensions = null;\n                this.#boundFocusin = this.focusin.bind(this);\n                this.#boundFocusout = this.focusout.bind(this);\n                this.#editToolbar = null;\n                this.#focusedResizerName = \"\";\n                this.#hasBeenClicked = false;\n                this.#isEditing = false;\n                this.#isInEditMode = false;\n                this.#isResizerEnabledForKeyboard = false;\n                this.#moveInDOMTimeout = null;\n                this._initialOptions = Object.create(null);\n                this._uiManager = null;\n                this._focusEventsAllowed = true;\n                this._l10nPromise = null;\n                this.#isDraggable = false;\n                this.#zIndex = AnnotationEditor._zIndex++;\n                if (this.constructor === AnnotationEditor) {\n                    (0, util.unreachable)(\"Cannot initialize AnnotationEditor.\");\n                }\n                this.parent = parameters.parent;\n                this.id = parameters.id;\n                this.width = this.height = null;\n                this.pageIndex = parameters.parent.pageIndex;\n                this.name = parameters.name;\n                this.div = null;\n                this._uiManager = parameters.uiManager;\n                this.annotationElementId = null;\n                this._willKeepAspectRatio = false;\n                this._initialOptions.isCentered = parameters.isCentered;\n                this._structTreeParentId = null;\n                const { rotation, rawDims: { pageWidth, pageHeight, pageX, pageY } } = this.parent.viewport;\n                this.rotation = rotation;\n                this.pageRotation = (360 + rotation - this._uiManager.viewParameters.rotation) % 360;\n                this.pageDimensions = [\n                    pageWidth,\n                    pageHeight\n                ];\n                this.pageTranslation = [\n                    pageX,\n                    pageY\n                ];\n                const [width, height] = this.parentDimensions;\n                this.x = parameters.x / width;\n                this.y = parameters.y / height;\n                this.isAttachedToDOM = false;\n                this.deleted = false;\n            }\n            get editorType() {\n                return Object.getPrototypeOf(this).constructor._type;\n            }\n            static get _defaultLineColor() {\n                return (0, util.shadow)(this, \"_defaultLineColor\", this._colorManager.getHexCode(\"CanvasText\"));\n            }\n            static deleteAnnotationElement(editor) {\n                const fakeEditor = new FakeEditor({\n                    id: editor.parent.getNextId(),\n                    parent: editor.parent,\n                    uiManager: editor._uiManager\n                });\n                fakeEditor.annotationElementId = editor.annotationElementId;\n                fakeEditor.deleted = true;\n                fakeEditor._uiManager.addToAnnotationStorage(fakeEditor);\n            }\n            static initialize(l10n, options = null) {\n                AnnotationEditor._l10nPromise ||= new Map([\n                    \"pdfjs-editor-alt-text-button-label\",\n                    \"pdfjs-editor-alt-text-edit-button-label\",\n                    \"pdfjs-editor-alt-text-decorative-tooltip\",\n                    \"pdfjs-editor-resizer-label-topLeft\",\n                    \"pdfjs-editor-resizer-label-topMiddle\",\n                    \"pdfjs-editor-resizer-label-topRight\",\n                    \"pdfjs-editor-resizer-label-middleRight\",\n                    \"pdfjs-editor-resizer-label-bottomRight\",\n                    \"pdfjs-editor-resizer-label-bottomMiddle\",\n                    \"pdfjs-editor-resizer-label-bottomLeft\",\n                    \"pdfjs-editor-resizer-label-middleLeft\"\n                ].map((str)=>[\n                        str,\n                        l10n.get(str.replaceAll(/([A-Z])/g, (c)=>`-${c.toLowerCase()}`))\n                    ]));\n                if (options?.strings) {\n                    for (const str of options.strings){\n                        AnnotationEditor._l10nPromise.set(str, l10n.get(str));\n                    }\n                }\n                if (AnnotationEditor._borderLineWidth !== -1) {\n                    return;\n                }\n                const style = getComputedStyle(document.documentElement);\n                AnnotationEditor._borderLineWidth = parseFloat(style.getPropertyValue(\"--outline-width\")) || 0;\n            }\n            static updateDefaultParams(_type, _value) {}\n            static get defaultPropertiesToUpdate() {\n                return [];\n            }\n            static isHandlingMimeForPasting(mime) {\n                return false;\n            }\n            static paste(item, parent) {\n                (0, util.unreachable)(\"Not implemented\");\n            }\n            get propertiesToUpdate() {\n                return [];\n            }\n            get _isDraggable() {\n                return this.#isDraggable;\n            }\n            set _isDraggable(value) {\n                this.#isDraggable = value;\n                this.div?.classList.toggle(\"draggable\", value);\n            }\n            get isEnterHandled() {\n                return true;\n            }\n            center() {\n                const [pageWidth, pageHeight] = this.pageDimensions;\n                switch(this.parentRotation){\n                    case 90:\n                        this.x -= this.height * pageHeight / (pageWidth * 2);\n                        this.y += this.width * pageWidth / (pageHeight * 2);\n                        break;\n                    case 180:\n                        this.x += this.width / 2;\n                        this.y += this.height / 2;\n                        break;\n                    case 270:\n                        this.x += this.height * pageHeight / (pageWidth * 2);\n                        this.y -= this.width * pageWidth / (pageHeight * 2);\n                        break;\n                    default:\n                        this.x -= this.width / 2;\n                        this.y -= this.height / 2;\n                        break;\n                }\n                this.fixAndSetPosition();\n            }\n            addCommands(params) {\n                this._uiManager.addCommands(params);\n            }\n            get currentLayer() {\n                return this._uiManager.currentLayer;\n            }\n            setInBackground() {\n                this.div.style.zIndex = 0;\n            }\n            setInForeground() {\n                this.div.style.zIndex = this.#zIndex;\n            }\n            setParent(parent) {\n                if (parent !== null) {\n                    this.pageIndex = parent.pageIndex;\n                    this.pageDimensions = parent.pageDimensions;\n                } else {\n                    this.#stopResizing();\n                }\n                this.parent = parent;\n            }\n            focusin(event) {\n                if (!this._focusEventsAllowed) {\n                    return;\n                }\n                if (!this.#hasBeenClicked) {\n                    this.parent.setSelected(this);\n                } else {\n                    this.#hasBeenClicked = false;\n                }\n            }\n            focusout(event) {\n                if (!this._focusEventsAllowed) {\n                    return;\n                }\n                if (!this.isAttachedToDOM) {\n                    return;\n                }\n                const target = event.relatedTarget;\n                if (target?.closest(`#${this.id}`)) {\n                    return;\n                }\n                event.preventDefault();\n                if (!this.parent?.isMultipleSelection) {\n                    this.commitOrRemove();\n                }\n            }\n            commitOrRemove() {\n                if (this.isEmpty()) {\n                    this.remove();\n                } else {\n                    this.commit();\n                }\n            }\n            commit() {\n                this.addToAnnotationStorage();\n            }\n            addToAnnotationStorage() {\n                this._uiManager.addToAnnotationStorage(this);\n            }\n            setAt(x, y, tx, ty) {\n                const [width, height] = this.parentDimensions;\n                [tx, ty] = this.screenToPageTranslation(tx, ty);\n                this.x = (x + tx) / width;\n                this.y = (y + ty) / height;\n                this.fixAndSetPosition();\n            }\n            #translate([width, height], x, y) {\n                [x, y] = this.screenToPageTranslation(x, y);\n                this.x += x / width;\n                this.y += y / height;\n                this.fixAndSetPosition();\n            }\n            translate(x, y) {\n                this.#translate(this.parentDimensions, x, y);\n            }\n            translateInPage(x, y) {\n                this.#translate(this.pageDimensions, x, y);\n                this.div.scrollIntoView({\n                    block: \"nearest\"\n                });\n            }\n            drag(tx, ty) {\n                const [parentWidth, parentHeight] = this.parentDimensions;\n                this.x += tx / parentWidth;\n                this.y += ty / parentHeight;\n                if (this.parent && (this.x < 0 || this.x > 1 || this.y < 0 || this.y > 1)) {\n                    const { x, y } = this.div.getBoundingClientRect();\n                    if (this.parent.findNewParent(this, x, y)) {\n                        this.x -= Math.floor(this.x);\n                        this.y -= Math.floor(this.y);\n                    }\n                }\n                let { x, y } = this;\n                const [bx, by] = this.#getBaseTranslation();\n                x += bx;\n                y += by;\n                this.div.style.left = `${(100 * x).toFixed(2)}%`;\n                this.div.style.top = `${(100 * y).toFixed(2)}%`;\n                this.div.scrollIntoView({\n                    block: \"nearest\"\n                });\n            }\n            #getBaseTranslation() {\n                const [parentWidth, parentHeight] = this.parentDimensions;\n                const { _borderLineWidth } = AnnotationEditor;\n                const x = _borderLineWidth / parentWidth;\n                const y = _borderLineWidth / parentHeight;\n                switch(this.rotation){\n                    case 90:\n                        return [\n                            -x,\n                            y\n                        ];\n                    case 180:\n                        return [\n                            x,\n                            y\n                        ];\n                    case 270:\n                        return [\n                            x,\n                            -y\n                        ];\n                    default:\n                        return [\n                            -x,\n                            -y\n                        ];\n                }\n            }\n            fixAndSetPosition(rotation = this.rotation) {\n                const [pageWidth, pageHeight] = this.pageDimensions;\n                let { x, y, width, height } = this;\n                width *= pageWidth;\n                height *= pageHeight;\n                x *= pageWidth;\n                y *= pageHeight;\n                switch(rotation){\n                    case 0:\n                        x = Math.max(0, Math.min(pageWidth - width, x));\n                        y = Math.max(0, Math.min(pageHeight - height, y));\n                        break;\n                    case 90:\n                        x = Math.max(0, Math.min(pageWidth - height, x));\n                        y = Math.min(pageHeight, Math.max(width, y));\n                        break;\n                    case 180:\n                        x = Math.min(pageWidth, Math.max(width, x));\n                        y = Math.min(pageHeight, Math.max(height, y));\n                        break;\n                    case 270:\n                        x = Math.min(pageWidth, Math.max(height, x));\n                        y = Math.max(0, Math.min(pageHeight - width, y));\n                        break;\n                }\n                this.x = x /= pageWidth;\n                this.y = y /= pageHeight;\n                const [bx, by] = this.#getBaseTranslation();\n                x += bx;\n                y += by;\n                const { style } = this.div;\n                style.left = `${(100 * x).toFixed(2)}%`;\n                style.top = `${(100 * y).toFixed(2)}%`;\n                this.moveInDOM();\n            }\n            static #rotatePoint(x, y, angle) {\n                switch(angle){\n                    case 90:\n                        return [\n                            y,\n                            -x\n                        ];\n                    case 180:\n                        return [\n                            -x,\n                            -y\n                        ];\n                    case 270:\n                        return [\n                            -y,\n                            x\n                        ];\n                    default:\n                        return [\n                            x,\n                            y\n                        ];\n                }\n            }\n            screenToPageTranslation(x, y) {\n                return AnnotationEditor.#rotatePoint(x, y, this.parentRotation);\n            }\n            pageTranslationToScreen(x, y) {\n                return AnnotationEditor.#rotatePoint(x, y, 360 - this.parentRotation);\n            }\n            #getRotationMatrix(rotation) {\n                switch(rotation){\n                    case 90:\n                        {\n                            const [pageWidth, pageHeight] = this.pageDimensions;\n                            return [\n                                0,\n                                -pageWidth / pageHeight,\n                                pageHeight / pageWidth,\n                                0\n                            ];\n                        }\n                    case 180:\n                        return [\n                            -1,\n                            0,\n                            0,\n                            -1\n                        ];\n                    case 270:\n                        {\n                            const [pageWidth, pageHeight] = this.pageDimensions;\n                            return [\n                                0,\n                                pageWidth / pageHeight,\n                                -pageHeight / pageWidth,\n                                0\n                            ];\n                        }\n                    default:\n                        return [\n                            1,\n                            0,\n                            0,\n                            1\n                        ];\n                }\n            }\n            get parentScale() {\n                return this._uiManager.viewParameters.realScale;\n            }\n            get parentRotation() {\n                return (this._uiManager.viewParameters.rotation + this.pageRotation) % 360;\n            }\n            get parentDimensions() {\n                const { parentScale, pageDimensions: [pageWidth, pageHeight] } = this;\n                const scaledWidth = pageWidth * parentScale;\n                const scaledHeight = pageHeight * parentScale;\n                return util.FeatureTest.isCSSRoundSupported ? [\n                    Math.round(scaledWidth),\n                    Math.round(scaledHeight)\n                ] : [\n                    scaledWidth,\n                    scaledHeight\n                ];\n            }\n            setDims(width, height) {\n                const [parentWidth, parentHeight] = this.parentDimensions;\n                this.div.style.width = `${(100 * width / parentWidth).toFixed(2)}%`;\n                if (!this.#keepAspectRatio) {\n                    this.div.style.height = `${(100 * height / parentHeight).toFixed(2)}%`;\n                }\n            }\n            fixDims() {\n                const { style } = this.div;\n                const { height, width } = style;\n                const widthPercent = width.endsWith(\"%\");\n                const heightPercent = !this.#keepAspectRatio && height.endsWith(\"%\");\n                if (widthPercent && heightPercent) {\n                    return;\n                }\n                const [parentWidth, parentHeight] = this.parentDimensions;\n                if (!widthPercent) {\n                    style.width = `${(100 * parseFloat(width) / parentWidth).toFixed(2)}%`;\n                }\n                if (!this.#keepAspectRatio && !heightPercent) {\n                    style.height = `${(100 * parseFloat(height) / parentHeight).toFixed(2)}%`;\n                }\n            }\n            getInitialTranslation() {\n                return [\n                    0,\n                    0\n                ];\n            }\n            #createResizers() {\n                if (this.#resizersDiv) {\n                    return;\n                }\n                this.#resizersDiv = document.createElement(\"div\");\n                this.#resizersDiv.classList.add(\"resizers\");\n                const classes = this._willKeepAspectRatio ? [\n                    \"topLeft\",\n                    \"topRight\",\n                    \"bottomRight\",\n                    \"bottomLeft\"\n                ] : [\n                    \"topLeft\",\n                    \"topMiddle\",\n                    \"topRight\",\n                    \"middleRight\",\n                    \"bottomRight\",\n                    \"bottomMiddle\",\n                    \"bottomLeft\",\n                    \"middleLeft\"\n                ];\n                for (const name of classes){\n                    const div = document.createElement(\"div\");\n                    this.#resizersDiv.append(div);\n                    div.classList.add(\"resizer\", name);\n                    div.setAttribute(\"data-resizer-name\", name);\n                    div.addEventListener(\"pointerdown\", this.#resizerPointerdown.bind(this, name));\n                    div.addEventListener(\"contextmenu\", display_utils.noContextMenu);\n                    div.tabIndex = -1;\n                }\n                this.div.prepend(this.#resizersDiv);\n            }\n            #resizerPointerdown(name, event) {\n                event.preventDefault();\n                const { isMac } = util.FeatureTest.platform;\n                if (event.button !== 0 || event.ctrlKey && isMac) {\n                    return;\n                }\n                this.#altText?.toggle(false);\n                const boundResizerPointermove = this.#resizerPointermove.bind(this, name);\n                const savedDraggable = this._isDraggable;\n                this._isDraggable = false;\n                const pointerMoveOptions = {\n                    passive: true,\n                    capture: true\n                };\n                this.parent.togglePointerEvents(false);\n                window.addEventListener(\"pointermove\", boundResizerPointermove, pointerMoveOptions);\n                const savedX = this.x;\n                const savedY = this.y;\n                const savedWidth = this.width;\n                const savedHeight = this.height;\n                const savedParentCursor = this.parent.div.style.cursor;\n                const savedCursor = this.div.style.cursor;\n                this.div.style.cursor = this.parent.div.style.cursor = window.getComputedStyle(event.target).cursor;\n                const pointerUpCallback = ()=>{\n                    this.parent.togglePointerEvents(true);\n                    this.#altText?.toggle(true);\n                    this._isDraggable = savedDraggable;\n                    window.removeEventListener(\"pointerup\", pointerUpCallback);\n                    window.removeEventListener(\"blur\", pointerUpCallback);\n                    window.removeEventListener(\"pointermove\", boundResizerPointermove, pointerMoveOptions);\n                    this.parent.div.style.cursor = savedParentCursor;\n                    this.div.style.cursor = savedCursor;\n                    this.#addResizeToUndoStack(savedX, savedY, savedWidth, savedHeight);\n                };\n                window.addEventListener(\"pointerup\", pointerUpCallback);\n                window.addEventListener(\"blur\", pointerUpCallback);\n            }\n            #addResizeToUndoStack(savedX, savedY, savedWidth, savedHeight) {\n                const newX = this.x;\n                const newY = this.y;\n                const newWidth = this.width;\n                const newHeight = this.height;\n                if (newX === savedX && newY === savedY && newWidth === savedWidth && newHeight === savedHeight) {\n                    return;\n                }\n                this.addCommands({\n                    cmd: ()=>{\n                        this.width = newWidth;\n                        this.height = newHeight;\n                        this.x = newX;\n                        this.y = newY;\n                        const [parentWidth, parentHeight] = this.parentDimensions;\n                        this.setDims(parentWidth * newWidth, parentHeight * newHeight);\n                        this.fixAndSetPosition();\n                    },\n                    undo: ()=>{\n                        this.width = savedWidth;\n                        this.height = savedHeight;\n                        this.x = savedX;\n                        this.y = savedY;\n                        const [parentWidth, parentHeight] = this.parentDimensions;\n                        this.setDims(parentWidth * savedWidth, parentHeight * savedHeight);\n                        this.fixAndSetPosition();\n                    },\n                    mustExec: true\n                });\n            }\n            #resizerPointermove(name, event) {\n                const [parentWidth, parentHeight] = this.parentDimensions;\n                const savedX = this.x;\n                const savedY = this.y;\n                const savedWidth = this.width;\n                const savedHeight = this.height;\n                const minWidth = AnnotationEditor.MIN_SIZE / parentWidth;\n                const minHeight = AnnotationEditor.MIN_SIZE / parentHeight;\n                const round = (x)=>Math.round(x * 10000) / 10000;\n                const rotationMatrix = this.#getRotationMatrix(this.rotation);\n                const transf = (x, y)=>[\n                        rotationMatrix[0] * x + rotationMatrix[2] * y,\n                        rotationMatrix[1] * x + rotationMatrix[3] * y\n                    ];\n                const invRotationMatrix = this.#getRotationMatrix(360 - this.rotation);\n                const invTransf = (x, y)=>[\n                        invRotationMatrix[0] * x + invRotationMatrix[2] * y,\n                        invRotationMatrix[1] * x + invRotationMatrix[3] * y\n                    ];\n                let getPoint;\n                let getOpposite;\n                let isDiagonal = false;\n                let isHorizontal = false;\n                switch(name){\n                    case \"topLeft\":\n                        isDiagonal = true;\n                        getPoint = (w, h)=>[\n                                0,\n                                0\n                            ];\n                        getOpposite = (w, h)=>[\n                                w,\n                                h\n                            ];\n                        break;\n                    case \"topMiddle\":\n                        getPoint = (w, h)=>[\n                                w / 2,\n                                0\n                            ];\n                        getOpposite = (w, h)=>[\n                                w / 2,\n                                h\n                            ];\n                        break;\n                    case \"topRight\":\n                        isDiagonal = true;\n                        getPoint = (w, h)=>[\n                                w,\n                                0\n                            ];\n                        getOpposite = (w, h)=>[\n                                0,\n                                h\n                            ];\n                        break;\n                    case \"middleRight\":\n                        isHorizontal = true;\n                        getPoint = (w, h)=>[\n                                w,\n                                h / 2\n                            ];\n                        getOpposite = (w, h)=>[\n                                0,\n                                h / 2\n                            ];\n                        break;\n                    case \"bottomRight\":\n                        isDiagonal = true;\n                        getPoint = (w, h)=>[\n                                w,\n                                h\n                            ];\n                        getOpposite = (w, h)=>[\n                                0,\n                                0\n                            ];\n                        break;\n                    case \"bottomMiddle\":\n                        getPoint = (w, h)=>[\n                                w / 2,\n                                h\n                            ];\n                        getOpposite = (w, h)=>[\n                                w / 2,\n                                0\n                            ];\n                        break;\n                    case \"bottomLeft\":\n                        isDiagonal = true;\n                        getPoint = (w, h)=>[\n                                0,\n                                h\n                            ];\n                        getOpposite = (w, h)=>[\n                                w,\n                                0\n                            ];\n                        break;\n                    case \"middleLeft\":\n                        isHorizontal = true;\n                        getPoint = (w, h)=>[\n                                0,\n                                h / 2\n                            ];\n                        getOpposite = (w, h)=>[\n                                w,\n                                h / 2\n                            ];\n                        break;\n                }\n                const point = getPoint(savedWidth, savedHeight);\n                const oppositePoint = getOpposite(savedWidth, savedHeight);\n                let transfOppositePoint = transf(...oppositePoint);\n                const oppositeX = round(savedX + transfOppositePoint[0]);\n                const oppositeY = round(savedY + transfOppositePoint[1]);\n                let ratioX = 1;\n                let ratioY = 1;\n                let [deltaX, deltaY] = this.screenToPageTranslation(event.movementX, event.movementY);\n                [deltaX, deltaY] = invTransf(deltaX / parentWidth, deltaY / parentHeight);\n                if (isDiagonal) {\n                    const oldDiag = Math.hypot(savedWidth, savedHeight);\n                    ratioX = ratioY = Math.max(Math.min(Math.hypot(oppositePoint[0] - point[0] - deltaX, oppositePoint[1] - point[1] - deltaY) / oldDiag, 1 / savedWidth, 1 / savedHeight), minWidth / savedWidth, minHeight / savedHeight);\n                } else if (isHorizontal) {\n                    ratioX = Math.max(minWidth, Math.min(1, Math.abs(oppositePoint[0] - point[0] - deltaX))) / savedWidth;\n                } else {\n                    ratioY = Math.max(minHeight, Math.min(1, Math.abs(oppositePoint[1] - point[1] - deltaY))) / savedHeight;\n                }\n                const newWidth = round(savedWidth * ratioX);\n                const newHeight = round(savedHeight * ratioY);\n                transfOppositePoint = transf(...getOpposite(newWidth, newHeight));\n                const newX = oppositeX - transfOppositePoint[0];\n                const newY = oppositeY - transfOppositePoint[1];\n                this.width = newWidth;\n                this.height = newHeight;\n                this.x = newX;\n                this.y = newY;\n                this.setDims(parentWidth * newWidth, parentHeight * newHeight);\n                this.fixAndSetPosition();\n            }\n            altTextFinish() {\n                this.#altText?.finish();\n            }\n            async addEditToolbar() {\n                if (this.#editToolbar || this.#isInEditMode) {\n                    return this.#editToolbar;\n                }\n                this.#editToolbar = new EditorToolbar(this);\n                this.div.append(this.#editToolbar.render());\n                if (this.#altText) {\n                    this.#editToolbar.addAltTextButton(await this.#altText.render());\n                }\n                return this.#editToolbar;\n            }\n            removeEditToolbar() {\n                if (!this.#editToolbar) {\n                    return;\n                }\n                this.#editToolbar.remove();\n                this.#editToolbar = null;\n                this.#altText?.destroy();\n            }\n            getClientDimensions() {\n                return this.div.getBoundingClientRect();\n            }\n            async addAltTextButton() {\n                if (this.#altText) {\n                    return;\n                }\n                AltText.initialize(AnnotationEditor._l10nPromise);\n                this.#altText = new AltText(this);\n                await this.addEditToolbar();\n            }\n            get altTextData() {\n                return this.#altText?.data;\n            }\n            set altTextData(data) {\n                if (!this.#altText) {\n                    return;\n                }\n                this.#altText.data = data;\n            }\n            render() {\n                this.div = document.createElement(\"div\");\n                this.div.setAttribute(\"data-editor-rotation\", (360 - this.rotation) % 360);\n                this.div.className = this.name;\n                this.div.setAttribute(\"id\", this.id);\n                this.div.setAttribute(\"tabIndex\", 0);\n                this.setInForeground();\n                this.div.addEventListener(\"focusin\", this.#boundFocusin);\n                this.div.addEventListener(\"focusout\", this.#boundFocusout);\n                const [parentWidth, parentHeight] = this.parentDimensions;\n                if (this.parentRotation % 180 !== 0) {\n                    this.div.style.maxWidth = `${(100 * parentHeight / parentWidth).toFixed(2)}%`;\n                    this.div.style.maxHeight = `${(100 * parentWidth / parentHeight).toFixed(2)}%`;\n                }\n                const [tx, ty] = this.getInitialTranslation();\n                this.translate(tx, ty);\n                (0, tools.bindEvents)(this, this.div, [\n                    \"pointerdown\"\n                ]);\n                return this.div;\n            }\n            pointerdown(event) {\n                const { isMac } = util.FeatureTest.platform;\n                if (event.button !== 0 || event.ctrlKey && isMac) {\n                    event.preventDefault();\n                    return;\n                }\n                this.#hasBeenClicked = true;\n                if (this._isDraggable) {\n                    this.#setUpDragSession(event);\n                    return;\n                }\n                this.#selectOnPointerEvent(event);\n            }\n            #selectOnPointerEvent(event) {\n                const { isMac } = util.FeatureTest.platform;\n                if (event.ctrlKey && !isMac || event.shiftKey || event.metaKey && isMac) {\n                    this.parent.toggleSelected(this);\n                } else {\n                    this.parent.setSelected(this);\n                }\n            }\n            #setUpDragSession(event) {\n                const isSelected = this._uiManager.isSelected(this);\n                this._uiManager.setUpDragSession();\n                let pointerMoveOptions, pointerMoveCallback;\n                if (isSelected) {\n                    pointerMoveOptions = {\n                        passive: true,\n                        capture: true\n                    };\n                    pointerMoveCallback = (e)=>{\n                        const [tx, ty] = this.screenToPageTranslation(e.movementX, e.movementY);\n                        this._uiManager.dragSelectedEditors(tx, ty);\n                    };\n                    window.addEventListener(\"pointermove\", pointerMoveCallback, pointerMoveOptions);\n                }\n                const pointerUpCallback = ()=>{\n                    window.removeEventListener(\"pointerup\", pointerUpCallback);\n                    window.removeEventListener(\"blur\", pointerUpCallback);\n                    if (isSelected) {\n                        window.removeEventListener(\"pointermove\", pointerMoveCallback, pointerMoveOptions);\n                    }\n                    this.#hasBeenClicked = false;\n                    if (!this._uiManager.endDragSession()) {\n                        this.#selectOnPointerEvent(event);\n                    }\n                };\n                window.addEventListener(\"pointerup\", pointerUpCallback);\n                window.addEventListener(\"blur\", pointerUpCallback);\n            }\n            moveInDOM() {\n                if (this.#moveInDOMTimeout) {\n                    clearTimeout(this.#moveInDOMTimeout);\n                }\n                this.#moveInDOMTimeout = setTimeout(()=>{\n                    this.#moveInDOMTimeout = null;\n                    this.parent?.moveEditorInDOM(this);\n                }, 0);\n            }\n            _setParentAndPosition(parent, x, y) {\n                parent.changeParent(this);\n                this.x = x;\n                this.y = y;\n                this.fixAndSetPosition();\n            }\n            getRect(tx, ty, rotation = this.rotation) {\n                const scale = this.parentScale;\n                const [pageWidth, pageHeight] = this.pageDimensions;\n                const [pageX, pageY] = this.pageTranslation;\n                const shiftX = tx / scale;\n                const shiftY = ty / scale;\n                const x = this.x * pageWidth;\n                const y = this.y * pageHeight;\n                const width = this.width * pageWidth;\n                const height = this.height * pageHeight;\n                switch(rotation){\n                    case 0:\n                        return [\n                            x + shiftX + pageX,\n                            pageHeight - y - shiftY - height + pageY,\n                            x + shiftX + width + pageX,\n                            pageHeight - y - shiftY + pageY\n                        ];\n                    case 90:\n                        return [\n                            x + shiftY + pageX,\n                            pageHeight - y + shiftX + pageY,\n                            x + shiftY + height + pageX,\n                            pageHeight - y + shiftX + width + pageY\n                        ];\n                    case 180:\n                        return [\n                            x - shiftX - width + pageX,\n                            pageHeight - y + shiftY + pageY,\n                            x - shiftX + pageX,\n                            pageHeight - y + shiftY + height + pageY\n                        ];\n                    case 270:\n                        return [\n                            x - shiftY - height + pageX,\n                            pageHeight - y - shiftX - width + pageY,\n                            x - shiftY + pageX,\n                            pageHeight - y - shiftX + pageY\n                        ];\n                    default:\n                        throw new Error(\"Invalid rotation\");\n                }\n            }\n            getRectInCurrentCoords(rect, pageHeight) {\n                const [x1, y1, x2, y2] = rect;\n                const width = x2 - x1;\n                const height = y2 - y1;\n                switch(this.rotation){\n                    case 0:\n                        return [\n                            x1,\n                            pageHeight - y2,\n                            width,\n                            height\n                        ];\n                    case 90:\n                        return [\n                            x1,\n                            pageHeight - y1,\n                            height,\n                            width\n                        ];\n                    case 180:\n                        return [\n                            x2,\n                            pageHeight - y1,\n                            width,\n                            height\n                        ];\n                    case 270:\n                        return [\n                            x2,\n                            pageHeight - y2,\n                            height,\n                            width\n                        ];\n                    default:\n                        throw new Error(\"Invalid rotation\");\n                }\n            }\n            onceAdded() {}\n            isEmpty() {\n                return false;\n            }\n            enableEditMode() {\n                this.#isInEditMode = true;\n            }\n            disableEditMode() {\n                this.#isInEditMode = false;\n            }\n            isInEditMode() {\n                return this.#isInEditMode;\n            }\n            shouldGetKeyboardEvents() {\n                return this.#isResizerEnabledForKeyboard;\n            }\n            needsToBeRebuilt() {\n                return this.div && !this.isAttachedToDOM;\n            }\n            rebuild() {\n                this.div?.addEventListener(\"focusin\", this.#boundFocusin);\n                this.div?.addEventListener(\"focusout\", this.#boundFocusout);\n            }\n            rotate(_angle) {}\n            serialize(isForCopying = false, context = null) {\n                (0, util.unreachable)(\"An editor must be serializable\");\n            }\n            static deserialize(data, parent, uiManager) {\n                const editor = new this.prototype.constructor({\n                    parent,\n                    id: parent.getNextId(),\n                    uiManager\n                });\n                editor.rotation = data.rotation;\n                const [pageWidth, pageHeight] = editor.pageDimensions;\n                const [x, y, width, height] = editor.getRectInCurrentCoords(data.rect, pageHeight);\n                editor.x = x / pageWidth;\n                editor.y = y / pageHeight;\n                editor.width = width / pageWidth;\n                editor.height = height / pageHeight;\n                return editor;\n            }\n            remove() {\n                this.div.removeEventListener(\"focusin\", this.#boundFocusin);\n                this.div.removeEventListener(\"focusout\", this.#boundFocusout);\n                if (!this.isEmpty()) {\n                    this.commit();\n                }\n                if (this.parent) {\n                    this.parent.remove(this);\n                } else {\n                    this._uiManager.removeEditor(this);\n                }\n                if (this.#moveInDOMTimeout) {\n                    clearTimeout(this.#moveInDOMTimeout);\n                    this.#moveInDOMTimeout = null;\n                }\n                this.#stopResizing();\n                this.removeEditToolbar();\n            }\n            get isResizable() {\n                return false;\n            }\n            makeResizable() {\n                if (this.isResizable) {\n                    this.#createResizers();\n                    this.#resizersDiv.classList.remove(\"hidden\");\n                    (0, tools.bindEvents)(this, this.div, [\n                        \"keydown\"\n                    ]);\n                }\n            }\n            get toolbarPosition() {\n                return null;\n            }\n            keydown(event) {\n                if (!this.isResizable || event.target !== this.div || event.key !== \"Enter\") {\n                    return;\n                }\n                this._uiManager.setSelected(this);\n                this.#savedDimensions = {\n                    savedX: this.x,\n                    savedY: this.y,\n                    savedWidth: this.width,\n                    savedHeight: this.height\n                };\n                const children = this.#resizersDiv.children;\n                if (!this.#allResizerDivs) {\n                    this.#allResizerDivs = Array.from(children);\n                    const boundResizerKeydown = this.#resizerKeydown.bind(this);\n                    const boundResizerBlur = this.#resizerBlur.bind(this);\n                    for (const div of this.#allResizerDivs){\n                        const name = div.getAttribute(\"data-resizer-name\");\n                        div.setAttribute(\"role\", \"spinbutton\");\n                        div.addEventListener(\"keydown\", boundResizerKeydown);\n                        div.addEventListener(\"blur\", boundResizerBlur);\n                        div.addEventListener(\"focus\", this.#resizerFocus.bind(this, name));\n                        AnnotationEditor._l10nPromise.get(`pdfjs-editor-resizer-label-${name}`).then((msg)=>div.setAttribute(\"aria-label\", msg));\n                    }\n                }\n                const first = this.#allResizerDivs[0];\n                let firstPosition = 0;\n                for (const div of children){\n                    if (div === first) {\n                        break;\n                    }\n                    firstPosition++;\n                }\n                const nextFirstPosition = (360 - this.rotation + this.parentRotation) % 360 / 90 * (this.#allResizerDivs.length / 4);\n                if (nextFirstPosition !== firstPosition) {\n                    if (nextFirstPosition < firstPosition) {\n                        for(let i = 0; i < firstPosition - nextFirstPosition; i++){\n                            this.#resizersDiv.append(this.#resizersDiv.firstChild);\n                        }\n                    } else if (nextFirstPosition > firstPosition) {\n                        for(let i = 0; i < nextFirstPosition - firstPosition; i++){\n                            this.#resizersDiv.firstChild.before(this.#resizersDiv.lastChild);\n                        }\n                    }\n                    let i = 0;\n                    for (const child of children){\n                        const div = this.#allResizerDivs[i++];\n                        const name = div.getAttribute(\"data-resizer-name\");\n                        AnnotationEditor._l10nPromise.get(`pdfjs-editor-resizer-label-${name}`).then((msg)=>child.setAttribute(\"aria-label\", msg));\n                    }\n                }\n                this.#setResizerTabIndex(0);\n                this.#isResizerEnabledForKeyboard = true;\n                this.#resizersDiv.firstChild.focus({\n                    focusVisible: true\n                });\n                event.preventDefault();\n                event.stopImmediatePropagation();\n            }\n            #resizerKeydown(event) {\n                AnnotationEditor._resizerKeyboardManager.exec(this, event);\n            }\n            #resizerBlur(event) {\n                if (this.#isResizerEnabledForKeyboard && event.relatedTarget?.parentNode !== this.#resizersDiv) {\n                    this.#stopResizing();\n                }\n            }\n            #resizerFocus(name) {\n                this.#focusedResizerName = this.#isResizerEnabledForKeyboard ? name : \"\";\n            }\n            #setResizerTabIndex(value) {\n                if (!this.#allResizerDivs) {\n                    return;\n                }\n                for (const div of this.#allResizerDivs){\n                    div.tabIndex = value;\n                }\n            }\n            _resizeWithKeyboard(x, y) {\n                if (!this.#isResizerEnabledForKeyboard) {\n                    return;\n                }\n                this.#resizerPointermove(this.#focusedResizerName, {\n                    movementX: x,\n                    movementY: y\n                });\n            }\n            #stopResizing() {\n                this.#isResizerEnabledForKeyboard = false;\n                this.#setResizerTabIndex(-1);\n                if (this.#savedDimensions) {\n                    const { savedX, savedY, savedWidth, savedHeight } = this.#savedDimensions;\n                    this.#addResizeToUndoStack(savedX, savedY, savedWidth, savedHeight);\n                    this.#savedDimensions = null;\n                }\n            }\n            _stopResizingWithKeyboard() {\n                this.#stopResizing();\n                this.div.focus();\n            }\n            select() {\n                this.makeResizable();\n                this.div?.classList.add(\"selectedEditor\");\n                if (!this.#editToolbar) {\n                    this.addEditToolbar().then(()=>{\n                        if (this.div?.classList.contains(\"selectedEditor\")) {\n                            this.#editToolbar?.show();\n                        }\n                    });\n                    return;\n                }\n                this.#editToolbar?.show();\n            }\n            unselect() {\n                this.#resizersDiv?.classList.add(\"hidden\");\n                this.div?.classList.remove(\"selectedEditor\");\n                if (this.div?.contains(document.activeElement)) {\n                    this._uiManager.currentLayer.div.focus();\n                }\n                this.#editToolbar?.hide();\n            }\n            updateParams(type, value) {}\n            disableEditing() {}\n            enableEditing() {}\n            enterInEditMode() {}\n            getImageForAltText() {\n                return null;\n            }\n            get contentDiv() {\n                return this.div;\n            }\n            get isEditing() {\n                return this.#isEditing;\n            }\n            set isEditing(value) {\n                this.#isEditing = value;\n                if (!this.parent) {\n                    return;\n                }\n                if (value) {\n                    this.parent.setSelected(this);\n                    this.parent.setActiveEditor(this);\n                } else {\n                    this.parent.setActiveEditor(null);\n                }\n            }\n            setAspectRatio(width, height) {\n                this.#keepAspectRatio = true;\n                const aspectRatio = width / height;\n                const { style } = this.div;\n                style.aspectRatio = aspectRatio;\n                style.height = \"auto\";\n            }\n            static get MIN_SIZE() {\n                return 16;\n            }\n            static canCreateNewEmptyEditor() {\n                return true;\n            }\n        }\n        class FakeEditor extends AnnotationEditor {\n            constructor(params){\n                super(params);\n                this.annotationElementId = params.annotationElementId;\n                this.deleted = true;\n            }\n            serialize() {\n                return {\n                    id: this.annotationElementId,\n                    deleted: true,\n                    pageIndex: this.pageIndex\n                };\n            }\n        }\n    /***/ },\n    /***/ 405: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_593988__)=>{\n        /* harmony export */ __nested_webpack_require_593988__.d(__nested_webpack_exports__, {\n            /* harmony export */ Outliner: ()=>/* binding */ Outliner\n        });\n        class Outliner {\n            #box;\n            #verticalEdges;\n            #intervals;\n            constructor(boxes, borderWidth = 0, innerMargin = 0, isLTR = true){\n                this.#verticalEdges = [];\n                this.#intervals = [];\n                let minX = Infinity;\n                let maxX = -Infinity;\n                let minY = Infinity;\n                let maxY = -Infinity;\n                const NUMBER_OF_DIGITS = 4;\n                const EPSILON = 10 ** -NUMBER_OF_DIGITS;\n                for (const { x, y, width, height } of boxes){\n                    const x1 = Math.floor((x - borderWidth) / EPSILON) * EPSILON;\n                    const x2 = Math.ceil((x + width + borderWidth) / EPSILON) * EPSILON;\n                    const y1 = Math.floor((y - borderWidth) / EPSILON) * EPSILON;\n                    const y2 = Math.ceil((y + height + borderWidth) / EPSILON) * EPSILON;\n                    const left = [\n                        x1,\n                        y1,\n                        y2,\n                        true\n                    ];\n                    const right = [\n                        x2,\n                        y1,\n                        y2,\n                        false\n                    ];\n                    this.#verticalEdges.push(left, right);\n                    minX = Math.min(minX, x1);\n                    maxX = Math.max(maxX, x2);\n                    minY = Math.min(minY, y1);\n                    maxY = Math.max(maxY, y2);\n                }\n                const bboxWidth = maxX - minX + 2 * innerMargin;\n                const bboxHeight = maxY - minY + 2 * innerMargin;\n                const shiftedMinX = minX - innerMargin;\n                const shiftedMinY = minY - innerMargin;\n                const lastEdge = this.#verticalEdges.at(isLTR ? -1 : -2);\n                const lastPoint = [\n                    lastEdge[0],\n                    lastEdge[2]\n                ];\n                for (const edge of this.#verticalEdges){\n                    const [x, y1, y2] = edge;\n                    edge[0] = (x - shiftedMinX) / bboxWidth;\n                    edge[1] = (y1 - shiftedMinY) / bboxHeight;\n                    edge[2] = (y2 - shiftedMinY) / bboxHeight;\n                }\n                this.#box = {\n                    x: shiftedMinX,\n                    y: shiftedMinY,\n                    width: bboxWidth,\n                    height: bboxHeight,\n                    lastPoint\n                };\n            }\n            getOutlines() {\n                this.#verticalEdges.sort((a, b)=>a[0] - b[0] || a[1] - b[1] || a[2] - b[2]);\n                const outlineVerticalEdges = [];\n                for (const edge of this.#verticalEdges){\n                    if (edge[3]) {\n                        outlineVerticalEdges.push(...this.#breakEdge(edge));\n                        this.#insert(edge);\n                    } else {\n                        this.#remove(edge);\n                        outlineVerticalEdges.push(...this.#breakEdge(edge));\n                    }\n                }\n                return this.#getOutlines(outlineVerticalEdges);\n            }\n            #getOutlines(outlineVerticalEdges) {\n                const edges = [];\n                const allEdges = new Set();\n                for (const edge of outlineVerticalEdges){\n                    const [x, y1, y2] = edge;\n                    edges.push([\n                        x,\n                        y1,\n                        edge\n                    ], [\n                        x,\n                        y2,\n                        edge\n                    ]);\n                }\n                edges.sort((a, b)=>a[1] - b[1] || a[0] - b[0]);\n                for(let i = 0, ii = edges.length; i < ii; i += 2){\n                    const edge1 = edges[i][2];\n                    const edge2 = edges[i + 1][2];\n                    edge1.push(edge2);\n                    edge2.push(edge1);\n                    allEdges.add(edge1);\n                    allEdges.add(edge2);\n                }\n                const outlines = [];\n                let outline;\n                while(allEdges.size > 0){\n                    const edge = allEdges.values().next().value;\n                    let [x, y1, y2, edge1, edge2] = edge;\n                    allEdges.delete(edge);\n                    let lastPointX = x;\n                    let lastPointY = y1;\n                    outline = [\n                        x,\n                        y2\n                    ];\n                    outlines.push(outline);\n                    while(true){\n                        let e;\n                        if (allEdges.has(edge1)) {\n                            e = edge1;\n                        } else if (allEdges.has(edge2)) {\n                            e = edge2;\n                        } else {\n                            break;\n                        }\n                        allEdges.delete(e);\n                        [x, y1, y2, edge1, edge2] = e;\n                        if (lastPointX !== x) {\n                            outline.push(lastPointX, lastPointY, x, lastPointY === y1 ? y1 : y2);\n                            lastPointX = x;\n                        }\n                        lastPointY = lastPointY === y1 ? y2 : y1;\n                    }\n                    outline.push(lastPointX, lastPointY);\n                }\n                return {\n                    outlines,\n                    box: this.#box\n                };\n            }\n            #binarySearch(y) {\n                const array = this.#intervals;\n                let start = 0;\n                let end = array.length - 1;\n                while(start <= end){\n                    const middle = start + end >> 1;\n                    const y1 = array[middle][0];\n                    if (y1 === y) {\n                        return middle;\n                    }\n                    if (y1 < y) {\n                        start = middle + 1;\n                    } else {\n                        end = middle - 1;\n                    }\n                }\n                return end + 1;\n            }\n            #insert([, y1, y2]) {\n                const index = this.#binarySearch(y1);\n                this.#intervals.splice(index, 0, [\n                    y1,\n                    y2\n                ]);\n            }\n            #remove([, y1, y2]) {\n                const index = this.#binarySearch(y1);\n                for(let i = index; i < this.#intervals.length; i++){\n                    const [start, end] = this.#intervals[i];\n                    if (start !== y1) {\n                        break;\n                    }\n                    if (start === y1 && end === y2) {\n                        this.#intervals.splice(i, 1);\n                        return;\n                    }\n                }\n                for(let i = index - 1; i >= 0; i--){\n                    const [start, end] = this.#intervals[i];\n                    if (start !== y1) {\n                        break;\n                    }\n                    if (start === y1 && end === y2) {\n                        this.#intervals.splice(i, 1);\n                        return;\n                    }\n                }\n            }\n            #breakEdge(edge) {\n                const [x, y1, y2] = edge;\n                const results = [\n                    [\n                        x,\n                        y1,\n                        y2\n                    ]\n                ];\n                const index = this.#binarySearch(y2);\n                for(let i = 0; i < index; i++){\n                    const [start, end] = this.#intervals[i];\n                    for(let j = 0, jj = results.length; j < jj; j++){\n                        const [, y3, y4] = results[j];\n                        if (end <= y3 || y4 <= start) {\n                            continue;\n                        }\n                        if (y3 >= start) {\n                            if (y4 > end) {\n                                results[j][1] = end;\n                            } else {\n                                if (jj === 1) {\n                                    return [];\n                                }\n                                results.splice(j, 1);\n                                j--;\n                                jj--;\n                            }\n                            continue;\n                        }\n                        results[j][2] = start;\n                        if (y4 > end) {\n                            results.push([\n                                x,\n                                end,\n                                y4\n                            ]);\n                        }\n                    }\n                }\n                return results;\n            }\n        }\n    /***/ },\n    /***/ 812: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_603097__)=>{\n        /* harmony export */ __nested_webpack_require_603097__.d(__nested_webpack_exports__, {\n            /* harmony export */ AnnotationEditorUIManager: ()=>/* binding */ AnnotationEditorUIManager,\n            /* harmony export */ ColorManager: ()=>/* binding */ ColorManager,\n            /* harmony export */ KeyboardManager: ()=>/* binding */ KeyboardManager,\n            /* harmony export */ bindEvents: ()=>/* binding */ bindEvents,\n            /* harmony export */ opacityToHex: ()=>/* binding */ opacityToHex\n        });\n        /* unused harmony export CommandManager */ /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_603097__(266);\n        /* harmony import */ var _display_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_603097__(473);\n        function bindEvents(obj, element, names) {\n            for (const name of names){\n                element.addEventListener(name, obj[name].bind(obj));\n            }\n        }\n        function opacityToHex(opacity) {\n            return Math.round(Math.min(255, Math.max(1, 255 * opacity))).toString(16).padStart(2, \"0\");\n        }\n        class IdManager {\n            #id;\n            getId() {\n                return `${_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorPrefix}${this.#id++}`;\n            }\n            constructor(){\n                this.#id = 0;\n            }\n        }\n        class ImageManager {\n            #baseId;\n            #id;\n            #cache;\n            static get _isSVGFittingCanvas() {\n                const svg = `data:image/svg+xml;charset=UTF-8,<svg viewBox=\"0 0 1 1\" width=\"1\" height=\"1\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"1\" height=\"1\" style=\"fill:red;\"/></svg>`;\n                const canvas = new OffscreenCanvas(1, 3);\n                const ctx = canvas.getContext(\"2d\");\n                const image = new Image();\n                image.src = svg;\n                const promise = image.decode().then(()=>{\n                    ctx.drawImage(image, 0, 0, 1, 1, 0, 0, 1, 3);\n                    return new Uint32Array(ctx.getImageData(0, 0, 1, 1).data.buffer)[0] === 0;\n                });\n                return (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"_isSVGFittingCanvas\", promise);\n            }\n            async #get(key, rawData) {\n                this.#cache ||= new Map();\n                let data = this.#cache.get(key);\n                if (data === null) {\n                    return null;\n                }\n                if (data?.bitmap) {\n                    data.refCounter += 1;\n                    return data;\n                }\n                try {\n                    data ||= {\n                        bitmap: null,\n                        id: `image_${this.#baseId}_${this.#id++}`,\n                        refCounter: 0,\n                        isSvg: false\n                    };\n                    let image;\n                    if (typeof rawData === \"string\") {\n                        data.url = rawData;\n                        image = await (0, _display_utils_js__WEBPACK_IMPORTED_MODULE_1__.fetchData)(rawData, \"blob\");\n                    } else {\n                        image = data.file = rawData;\n                    }\n                    if (image.type === \"image/svg+xml\") {\n                        const mustRemoveAspectRatioPromise = ImageManager._isSVGFittingCanvas;\n                        const fileReader = new FileReader();\n                        const imageElement = new Image();\n                        const imagePromise = new Promise((resolve, reject)=>{\n                            imageElement.onload = ()=>{\n                                data.bitmap = imageElement;\n                                data.isSvg = true;\n                                resolve();\n                            };\n                            fileReader.onload = async ()=>{\n                                const url = data.svgUrl = fileReader.result;\n                                imageElement.src = await mustRemoveAspectRatioPromise ? `${url}#svgView(preserveAspectRatio(none))` : url;\n                            };\n                            imageElement.onerror = fileReader.onerror = reject;\n                        });\n                        fileReader.readAsDataURL(image);\n                        await imagePromise;\n                    } else {\n                        data.bitmap = await createImageBitmap(image);\n                    }\n                    data.refCounter = 1;\n                } catch (e) {\n                    console.error(e);\n                    data = null;\n                }\n                this.#cache.set(key, data);\n                if (data) {\n                    this.#cache.set(data.id, data);\n                }\n                return data;\n            }\n            async getFromFile(file) {\n                const { lastModified, name, size, type } = file;\n                return this.#get(`${lastModified}_${name}_${size}_${type}`, file);\n            }\n            async getFromUrl(url) {\n                return this.#get(url, url);\n            }\n            async getFromId(id) {\n                this.#cache ||= new Map();\n                const data = this.#cache.get(id);\n                if (!data) {\n                    return null;\n                }\n                if (data.bitmap) {\n                    data.refCounter += 1;\n                    return data;\n                }\n                if (data.file) {\n                    return this.getFromFile(data.file);\n                }\n                return this.getFromUrl(data.url);\n            }\n            getSvgUrl(id) {\n                const data = this.#cache.get(id);\n                if (!data?.isSvg) {\n                    return null;\n                }\n                return data.svgUrl;\n            }\n            deleteId(id) {\n                this.#cache ||= new Map();\n                const data = this.#cache.get(id);\n                if (!data) {\n                    return;\n                }\n                data.refCounter -= 1;\n                if (data.refCounter !== 0) {\n                    return;\n                }\n                data.bitmap = null;\n            }\n            isValidId(id) {\n                return id.startsWith(`image_${this.#baseId}_`);\n            }\n            constructor(){\n                this.#baseId = (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.getUuid)();\n                this.#id = 0;\n                this.#cache = null;\n            }\n        }\n        class CommandManager {\n            #commands;\n            #locked;\n            #maxSize;\n            #position;\n            constructor(maxSize = 128){\n                this.#commands = [];\n                this.#locked = false;\n                this.#position = -1;\n                this.#maxSize = maxSize;\n            }\n            add({ cmd, undo, mustExec, type = NaN, overwriteIfSameType = false, keepUndo = false }) {\n                if (mustExec) {\n                    cmd();\n                }\n                if (this.#locked) {\n                    return;\n                }\n                const save = {\n                    cmd,\n                    undo,\n                    type\n                };\n                if (this.#position === -1) {\n                    if (this.#commands.length > 0) {\n                        this.#commands.length = 0;\n                    }\n                    this.#position = 0;\n                    this.#commands.push(save);\n                    return;\n                }\n                if (overwriteIfSameType && this.#commands[this.#position].type === type) {\n                    if (keepUndo) {\n                        save.undo = this.#commands[this.#position].undo;\n                    }\n                    this.#commands[this.#position] = save;\n                    return;\n                }\n                const next = this.#position + 1;\n                if (next === this.#maxSize) {\n                    this.#commands.splice(0, 1);\n                } else {\n                    this.#position = next;\n                    if (next < this.#commands.length) {\n                        this.#commands.splice(next);\n                    }\n                }\n                this.#commands.push(save);\n            }\n            undo() {\n                if (this.#position === -1) {\n                    return;\n                }\n                this.#locked = true;\n                this.#commands[this.#position].undo();\n                this.#locked = false;\n                this.#position -= 1;\n            }\n            redo() {\n                if (this.#position < this.#commands.length - 1) {\n                    this.#position += 1;\n                    this.#locked = true;\n                    this.#commands[this.#position].cmd();\n                    this.#locked = false;\n                }\n            }\n            hasSomethingToUndo() {\n                return this.#position !== -1;\n            }\n            hasSomethingToRedo() {\n                return this.#position < this.#commands.length - 1;\n            }\n            destroy() {\n                this.#commands = null;\n            }\n        }\n        class KeyboardManager {\n            constructor(callbacks){\n                this.buffer = [];\n                this.callbacks = new Map();\n                this.allKeys = new Set();\n                const { isMac } = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.FeatureTest.platform;\n                for (const [keys, callback, options = {}] of callbacks){\n                    for (const key of keys){\n                        const isMacKey = key.startsWith(\"mac+\");\n                        if (isMac && isMacKey) {\n                            this.callbacks.set(key.slice(4), {\n                                callback,\n                                options\n                            });\n                            this.allKeys.add(key.split(\"+\").at(-1));\n                        } else if (!isMac && !isMacKey) {\n                            this.callbacks.set(key, {\n                                callback,\n                                options\n                            });\n                            this.allKeys.add(key.split(\"+\").at(-1));\n                        }\n                    }\n                }\n            }\n            #serialize(event) {\n                if (event.altKey) {\n                    this.buffer.push(\"alt\");\n                }\n                if (event.ctrlKey) {\n                    this.buffer.push(\"ctrl\");\n                }\n                if (event.metaKey) {\n                    this.buffer.push(\"meta\");\n                }\n                if (event.shiftKey) {\n                    this.buffer.push(\"shift\");\n                }\n                this.buffer.push(event.key);\n                const str = this.buffer.join(\"+\");\n                this.buffer.length = 0;\n                return str;\n            }\n            exec(self, event) {\n                if (!this.allKeys.has(event.key)) {\n                    return;\n                }\n                const info = this.callbacks.get(this.#serialize(event));\n                if (!info) {\n                    return;\n                }\n                const { callback, options: { bubbles = false, args = [], checker = null } } = info;\n                if (checker && !checker(self, event)) {\n                    return;\n                }\n                callback.bind(self, ...args, event)();\n                if (!bubbles) {\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            }\n        }\n        class ColorManager {\n            static{\n                this._colorsMapping = new Map([\n                    [\n                        \"CanvasText\",\n                        [\n                            0,\n                            0,\n                            0\n                        ]\n                    ],\n                    [\n                        \"Canvas\",\n                        [\n                            255,\n                            255,\n                            255\n                        ]\n                    ]\n                ]);\n            }\n            get _colors() {\n                const colors = new Map([\n                    [\n                        \"CanvasText\",\n                        null\n                    ],\n                    [\n                        \"Canvas\",\n                        null\n                    ]\n                ]);\n                (0, _display_utils_js__WEBPACK_IMPORTED_MODULE_1__.getColorValues)(colors);\n                return (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"_colors\", colors);\n            }\n            convert(color) {\n                const rgb = (0, _display_utils_js__WEBPACK_IMPORTED_MODULE_1__.getRGB)(color);\n                if (!window.matchMedia(\"(forced-colors: active)\").matches) {\n                    return rgb;\n                }\n                for (const [name, RGB] of this._colors){\n                    if (RGB.every((x, i)=>x === rgb[i])) {\n                        return ColorManager._colorsMapping.get(name);\n                    }\n                }\n                return rgb;\n            }\n            getHexCode(name) {\n                const rgb = this._colors.get(name);\n                if (!rgb) {\n                    return name;\n                }\n                return _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.Util.makeHexColor(...rgb);\n            }\n        }\n        class AnnotationEditorUIManager {\n            #activeEditor;\n            #allEditors;\n            #allLayers;\n            #altTextManager;\n            #annotationStorage;\n            #commandManager;\n            #currentPageIndex;\n            #deletedAnnotationsElementIds;\n            #draggingEditors;\n            #editorTypes;\n            #editorsToRescale;\n            #filterFactory;\n            #focusMainContainerTimeoutId;\n            #highlightColors;\n            #idManager;\n            #isEnabled;\n            #isWaiting;\n            #lastActiveElement;\n            #mainHighlightColorPicker;\n            #mode;\n            #selectedEditors;\n            #pageColors;\n            #boundBlur;\n            #boundFocus;\n            #boundCopy;\n            #boundCut;\n            #boundPaste;\n            #boundKeydown;\n            #boundOnEditingAction;\n            #boundOnPageChanging;\n            #boundOnScaleChanging;\n            #boundOnRotationChanging;\n            #previousStates;\n            #translation;\n            #translationTimeoutId;\n            #container;\n            #viewer;\n            static{\n                this.TRANSLATE_SMALL = 1;\n            }\n            static{\n                this.TRANSLATE_BIG = 10;\n            }\n            static get _keyboardManager() {\n                const proto = AnnotationEditorUIManager.prototype;\n                const arrowChecker = (self)=>{\n                    return self.#container.contains(document.activeElement) && document.activeElement.tagName !== \"BUTTON\" && self.hasSomethingToControl();\n                };\n                const textInputChecker = (_self, { target: el })=>{\n                    if (el instanceof HTMLInputElement) {\n                        const { type } = el;\n                        return type !== \"text\" && type !== \"number\";\n                    }\n                    return true;\n                };\n                const small = this.TRANSLATE_SMALL;\n                const big = this.TRANSLATE_BIG;\n                return (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"_keyboardManager\", new KeyboardManager([\n                    [\n                        [\n                            \"ctrl+a\",\n                            \"mac+meta+a\"\n                        ],\n                        proto.selectAll,\n                        {\n                            checker: textInputChecker\n                        }\n                    ],\n                    [\n                        [\n                            \"ctrl+z\",\n                            \"mac+meta+z\"\n                        ],\n                        proto.undo,\n                        {\n                            checker: textInputChecker\n                        }\n                    ],\n                    [\n                        [\n                            \"ctrl+y\",\n                            \"ctrl+shift+z\",\n                            \"mac+meta+shift+z\",\n                            \"ctrl+shift+Z\",\n                            \"mac+meta+shift+Z\"\n                        ],\n                        proto.redo,\n                        {\n                            checker: textInputChecker\n                        }\n                    ],\n                    [\n                        [\n                            \"Backspace\",\n                            \"alt+Backspace\",\n                            \"ctrl+Backspace\",\n                            \"shift+Backspace\",\n                            \"mac+Backspace\",\n                            \"mac+alt+Backspace\",\n                            \"mac+ctrl+Backspace\",\n                            \"Delete\",\n                            \"ctrl+Delete\",\n                            \"shift+Delete\",\n                            \"mac+Delete\"\n                        ],\n                        proto.delete,\n                        {\n                            checker: textInputChecker\n                        }\n                    ],\n                    [\n                        [\n                            \"Enter\",\n                            \"mac+Enter\"\n                        ],\n                        proto.addNewEditorFromKeyboard,\n                        {\n                            checker: (self, { target: el })=>!(el instanceof HTMLButtonElement) && self.#container.contains(el) && !self.isEnterHandled\n                        }\n                    ],\n                    [\n                        [\n                            \" \",\n                            \"mac+ \"\n                        ],\n                        proto.addNewEditorFromKeyboard,\n                        {\n                            checker: (self)=>self.#container.contains(document.activeElement)\n                        }\n                    ],\n                    [\n                        [\n                            \"Escape\",\n                            \"mac+Escape\"\n                        ],\n                        proto.unselectAll\n                    ],\n                    [\n                        [\n                            \"ArrowLeft\",\n                            \"mac+ArrowLeft\"\n                        ],\n                        proto.translateSelectedEditors,\n                        {\n                            args: [\n                                -small,\n                                0\n                            ],\n                            checker: arrowChecker\n                        }\n                    ],\n                    [\n                        [\n                            \"ctrl+ArrowLeft\",\n                            \"mac+shift+ArrowLeft\"\n                        ],\n                        proto.translateSelectedEditors,\n                        {\n                            args: [\n                                -big,\n                                0\n                            ],\n                            checker: arrowChecker\n                        }\n                    ],\n                    [\n                        [\n                            \"ArrowRight\",\n                            \"mac+ArrowRight\"\n                        ],\n                        proto.translateSelectedEditors,\n                        {\n                            args: [\n                                small,\n                                0\n                            ],\n                            checker: arrowChecker\n                        }\n                    ],\n                    [\n                        [\n                            \"ctrl+ArrowRight\",\n                            \"mac+shift+ArrowRight\"\n                        ],\n                        proto.translateSelectedEditors,\n                        {\n                            args: [\n                                big,\n                                0\n                            ],\n                            checker: arrowChecker\n                        }\n                    ],\n                    [\n                        [\n                            \"ArrowUp\",\n                            \"mac+ArrowUp\"\n                        ],\n                        proto.translateSelectedEditors,\n                        {\n                            args: [\n                                0,\n                                -small\n                            ],\n                            checker: arrowChecker\n                        }\n                    ],\n                    [\n                        [\n                            \"ctrl+ArrowUp\",\n                            \"mac+shift+ArrowUp\"\n                        ],\n                        proto.translateSelectedEditors,\n                        {\n                            args: [\n                                0,\n                                -big\n                            ],\n                            checker: arrowChecker\n                        }\n                    ],\n                    [\n                        [\n                            \"ArrowDown\",\n                            \"mac+ArrowDown\"\n                        ],\n                        proto.translateSelectedEditors,\n                        {\n                            args: [\n                                0,\n                                small\n                            ],\n                            checker: arrowChecker\n                        }\n                    ],\n                    [\n                        [\n                            \"ctrl+ArrowDown\",\n                            \"mac+shift+ArrowDown\"\n                        ],\n                        proto.translateSelectedEditors,\n                        {\n                            args: [\n                                0,\n                                big\n                            ],\n                            checker: arrowChecker\n                        }\n                    ]\n                ]));\n            }\n            constructor(container, viewer, altTextManager, eventBus, pdfDocument, pageColors, highlightColors){\n                this.#activeEditor = null;\n                this.#allEditors = new Map();\n                this.#allLayers = new Map();\n                this.#altTextManager = null;\n                this.#annotationStorage = null;\n                this.#commandManager = new CommandManager();\n                this.#currentPageIndex = 0;\n                this.#deletedAnnotationsElementIds = new Set();\n                this.#draggingEditors = null;\n                this.#editorTypes = null;\n                this.#editorsToRescale = new Set();\n                this.#filterFactory = null;\n                this.#focusMainContainerTimeoutId = null;\n                this.#highlightColors = null;\n                this.#idManager = new IdManager();\n                this.#isEnabled = false;\n                this.#isWaiting = false;\n                this.#lastActiveElement = null;\n                this.#mainHighlightColorPicker = null;\n                this.#mode = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorType.NONE;\n                this.#selectedEditors = new Set();\n                this.#pageColors = null;\n                this.#boundBlur = this.blur.bind(this);\n                this.#boundFocus = this.focus.bind(this);\n                this.#boundCopy = this.copy.bind(this);\n                this.#boundCut = this.cut.bind(this);\n                this.#boundPaste = this.paste.bind(this);\n                this.#boundKeydown = this.keydown.bind(this);\n                this.#boundOnEditingAction = this.onEditingAction.bind(this);\n                this.#boundOnPageChanging = this.onPageChanging.bind(this);\n                this.#boundOnScaleChanging = this.onScaleChanging.bind(this);\n                this.#boundOnRotationChanging = this.onRotationChanging.bind(this);\n                this.#previousStates = {\n                    isEditing: false,\n                    isEmpty: true,\n                    hasSomethingToUndo: false,\n                    hasSomethingToRedo: false,\n                    hasSelectedEditor: false\n                };\n                this.#translation = [\n                    0,\n                    0\n                ];\n                this.#translationTimeoutId = null;\n                this.#container = null;\n                this.#viewer = null;\n                this.#container = container;\n                this.#viewer = viewer;\n                this.#altTextManager = altTextManager;\n                this._eventBus = eventBus;\n                this._eventBus._on(\"editingaction\", this.#boundOnEditingAction);\n                this._eventBus._on(\"pagechanging\", this.#boundOnPageChanging);\n                this._eventBus._on(\"scalechanging\", this.#boundOnScaleChanging);\n                this._eventBus._on(\"rotationchanging\", this.#boundOnRotationChanging);\n                this.#annotationStorage = pdfDocument.annotationStorage;\n                this.#filterFactory = pdfDocument.filterFactory;\n                this.#pageColors = pageColors;\n                this.#highlightColors = highlightColors || null;\n                this.viewParameters = {\n                    realScale: _display_utils_js__WEBPACK_IMPORTED_MODULE_1__.PixelsPerInch.PDF_TO_CSS_UNITS,\n                    rotation: 0\n                };\n            }\n            destroy() {\n                this.#removeKeyboardManager();\n                this.#removeFocusManager();\n                this._eventBus._off(\"editingaction\", this.#boundOnEditingAction);\n                this._eventBus._off(\"pagechanging\", this.#boundOnPageChanging);\n                this._eventBus._off(\"scalechanging\", this.#boundOnScaleChanging);\n                this._eventBus._off(\"rotationchanging\", this.#boundOnRotationChanging);\n                for (const layer of this.#allLayers.values()){\n                    layer.destroy();\n                }\n                this.#allLayers.clear();\n                this.#allEditors.clear();\n                this.#editorsToRescale.clear();\n                this.#activeEditor = null;\n                this.#selectedEditors.clear();\n                this.#commandManager.destroy();\n                this.#altTextManager?.destroy();\n                if (this.#focusMainContainerTimeoutId) {\n                    clearTimeout(this.#focusMainContainerTimeoutId);\n                    this.#focusMainContainerTimeoutId = null;\n                }\n                if (this.#translationTimeoutId) {\n                    clearTimeout(this.#translationTimeoutId);\n                    this.#translationTimeoutId = null;\n                }\n            }\n            get hcmFilter() {\n                return (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"hcmFilter\", this.#pageColors ? this.#filterFactory.addHCMFilter(this.#pageColors.foreground, this.#pageColors.background) : \"none\");\n            }\n            get direction() {\n                return (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"direction\", getComputedStyle(this.#container).direction);\n            }\n            get highlightColors() {\n                return (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"highlightColors\", this.#highlightColors ? new Map(this.#highlightColors.split(\",\").map((pair)=>pair.split(\"=\").map((x)=>x.trim()))) : null);\n            }\n            setMainHighlightColorPicker(colorPicker) {\n                this.#mainHighlightColorPicker = colorPicker;\n            }\n            editAltText(editor) {\n                this.#altTextManager?.editAltText(this, editor);\n            }\n            onPageChanging({ pageNumber }) {\n                this.#currentPageIndex = pageNumber - 1;\n            }\n            focusMainContainer() {\n                this.#container.focus();\n            }\n            findParent(x, y) {\n                for (const layer of this.#allLayers.values()){\n                    const { x: layerX, y: layerY, width, height } = layer.div.getBoundingClientRect();\n                    if (x >= layerX && x <= layerX + width && y >= layerY && y <= layerY + height) {\n                        return layer;\n                    }\n                }\n                return null;\n            }\n            disableUserSelect(value = false) {\n                this.#viewer.classList.toggle(\"noUserSelect\", value);\n            }\n            addShouldRescale(editor) {\n                this.#editorsToRescale.add(editor);\n            }\n            removeShouldRescale(editor) {\n                this.#editorsToRescale.delete(editor);\n            }\n            onScaleChanging({ scale }) {\n                this.commitOrRemove();\n                this.viewParameters.realScale = scale * _display_utils_js__WEBPACK_IMPORTED_MODULE_1__.PixelsPerInch.PDF_TO_CSS_UNITS;\n                for (const editor of this.#editorsToRescale){\n                    editor.onScaleChanging();\n                }\n            }\n            onRotationChanging({ pagesRotation }) {\n                this.commitOrRemove();\n                this.viewParameters.rotation = pagesRotation;\n            }\n            addToAnnotationStorage(editor) {\n                if (!editor.isEmpty() && this.#annotationStorage && !this.#annotationStorage.has(editor.id)) {\n                    this.#annotationStorage.setValue(editor.id, editor);\n                }\n            }\n            #addFocusManager() {\n                window.addEventListener(\"focus\", this.#boundFocus);\n                window.addEventListener(\"blur\", this.#boundBlur);\n            }\n            #removeFocusManager() {\n                window.removeEventListener(\"focus\", this.#boundFocus);\n                window.removeEventListener(\"blur\", this.#boundBlur);\n            }\n            blur() {\n                if (!this.hasSelection) {\n                    return;\n                }\n                const { activeElement } = document;\n                for (const editor of this.#selectedEditors){\n                    if (editor.div.contains(activeElement)) {\n                        this.#lastActiveElement = [\n                            editor,\n                            activeElement\n                        ];\n                        editor._focusEventsAllowed = false;\n                        break;\n                    }\n                }\n            }\n            focus() {\n                if (!this.#lastActiveElement) {\n                    return;\n                }\n                const [lastEditor, lastActiveElement] = this.#lastActiveElement;\n                this.#lastActiveElement = null;\n                lastActiveElement.addEventListener(\"focusin\", ()=>{\n                    lastEditor._focusEventsAllowed = true;\n                }, {\n                    once: true\n                });\n                lastActiveElement.focus();\n            }\n            #addKeyboardManager() {\n                window.addEventListener(\"keydown\", this.#boundKeydown);\n            }\n            #removeKeyboardManager() {\n                window.removeEventListener(\"keydown\", this.#boundKeydown);\n            }\n            #addCopyPasteListeners() {\n                document.addEventListener(\"copy\", this.#boundCopy);\n                document.addEventListener(\"cut\", this.#boundCut);\n                document.addEventListener(\"paste\", this.#boundPaste);\n            }\n            #removeCopyPasteListeners() {\n                document.removeEventListener(\"copy\", this.#boundCopy);\n                document.removeEventListener(\"cut\", this.#boundCut);\n                document.removeEventListener(\"paste\", this.#boundPaste);\n            }\n            addEditListeners() {\n                this.#addKeyboardManager();\n                this.#addCopyPasteListeners();\n            }\n            removeEditListeners() {\n                this.#removeKeyboardManager();\n                this.#removeCopyPasteListeners();\n            }\n            copy(event) {\n                event.preventDefault();\n                this.#activeEditor?.commitOrRemove();\n                if (!this.hasSelection) {\n                    return;\n                }\n                const editors = [];\n                for (const editor of this.#selectedEditors){\n                    const serialized = editor.serialize(true);\n                    if (serialized) {\n                        editors.push(serialized);\n                    }\n                }\n                if (editors.length === 0) {\n                    return;\n                }\n                event.clipboardData.setData(\"application/pdfjs\", JSON.stringify(editors));\n            }\n            cut(event) {\n                this.copy(event);\n                this.delete();\n            }\n            paste(event) {\n                event.preventDefault();\n                const { clipboardData } = event;\n                for (const item of clipboardData.items){\n                    for (const editorType of this.#editorTypes){\n                        if (editorType.isHandlingMimeForPasting(item.type)) {\n                            editorType.paste(item, this.currentLayer);\n                            return;\n                        }\n                    }\n                }\n                let data = clipboardData.getData(\"application/pdfjs\");\n                if (!data) {\n                    return;\n                }\n                try {\n                    data = JSON.parse(data);\n                } catch (ex) {\n                    (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`paste: \"${ex.message}\".`);\n                    return;\n                }\n                if (!Array.isArray(data)) {\n                    return;\n                }\n                this.unselectAll();\n                const layer = this.currentLayer;\n                try {\n                    const newEditors = [];\n                    for (const editor of data){\n                        const deserializedEditor = layer.deserialize(editor);\n                        if (!deserializedEditor) {\n                            return;\n                        }\n                        newEditors.push(deserializedEditor);\n                    }\n                    const cmd = ()=>{\n                        for (const editor of newEditors){\n                            this.#addEditorToLayer(editor);\n                        }\n                        this.#selectEditors(newEditors);\n                    };\n                    const undo = ()=>{\n                        for (const editor of newEditors){\n                            editor.remove();\n                        }\n                    };\n                    this.addCommands({\n                        cmd,\n                        undo,\n                        mustExec: true\n                    });\n                } catch (ex) {\n                    (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`paste: \"${ex.message}\".`);\n                }\n            }\n            keydown(event) {\n                if (!this.isEditorHandlingKeyboard) {\n                    AnnotationEditorUIManager._keyboardManager.exec(this, event);\n                }\n            }\n            onEditingAction(details) {\n                if ([\n                    \"undo\",\n                    \"redo\",\n                    \"delete\",\n                    \"selectAll\"\n                ].includes(details.name)) {\n                    this[details.name]();\n                }\n            }\n            #dispatchUpdateStates(details) {\n                const hasChanged = Object.entries(details).some(([key, value])=>this.#previousStates[key] !== value);\n                if (hasChanged) {\n                    this._eventBus.dispatch(\"annotationeditorstateschanged\", {\n                        source: this,\n                        details: Object.assign(this.#previousStates, details)\n                    });\n                }\n            }\n            #dispatchUpdateUI(details) {\n                this._eventBus.dispatch(\"annotationeditorparamschanged\", {\n                    source: this,\n                    details\n                });\n            }\n            setEditingState(isEditing) {\n                if (isEditing) {\n                    this.#addFocusManager();\n                    this.#addKeyboardManager();\n                    this.#addCopyPasteListeners();\n                    this.#dispatchUpdateStates({\n                        isEditing: this.#mode !== _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorType.NONE,\n                        isEmpty: this.#isEmpty(),\n                        hasSomethingToUndo: this.#commandManager.hasSomethingToUndo(),\n                        hasSomethingToRedo: this.#commandManager.hasSomethingToRedo(),\n                        hasSelectedEditor: false\n                    });\n                } else {\n                    this.#removeFocusManager();\n                    this.#removeKeyboardManager();\n                    this.#removeCopyPasteListeners();\n                    this.#dispatchUpdateStates({\n                        isEditing: false\n                    });\n                    this.disableUserSelect(false);\n                }\n            }\n            registerEditorTypes(types) {\n                if (this.#editorTypes) {\n                    return;\n                }\n                this.#editorTypes = types;\n                for (const editorType of this.#editorTypes){\n                    this.#dispatchUpdateUI(editorType.defaultPropertiesToUpdate);\n                }\n            }\n            getId() {\n                return this.#idManager.getId();\n            }\n            get currentLayer() {\n                return this.#allLayers.get(this.#currentPageIndex);\n            }\n            getLayer(pageIndex) {\n                return this.#allLayers.get(pageIndex);\n            }\n            get currentPageIndex() {\n                return this.#currentPageIndex;\n            }\n            addLayer(layer) {\n                this.#allLayers.set(layer.pageIndex, layer);\n                if (this.#isEnabled) {\n                    layer.enable();\n                } else {\n                    layer.disable();\n                }\n            }\n            removeLayer(layer) {\n                this.#allLayers.delete(layer.pageIndex);\n            }\n            updateMode(mode, editId = null, isFromKeyboard = false) {\n                if (this.#mode === mode) {\n                    return;\n                }\n                this.#mode = mode;\n                if (mode === _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorType.NONE) {\n                    this.setEditingState(false);\n                    this.#disableAll();\n                    return;\n                }\n                this.setEditingState(true);\n                this.#enableAll();\n                this.unselectAll();\n                for (const layer of this.#allLayers.values()){\n                    layer.updateMode(mode);\n                }\n                if (!editId && isFromKeyboard) {\n                    this.addNewEditorFromKeyboard();\n                    return;\n                }\n                if (!editId) {\n                    return;\n                }\n                for (const editor of this.#allEditors.values()){\n                    if (editor.annotationElementId === editId) {\n                        this.setSelected(editor);\n                        editor.enterInEditMode();\n                        break;\n                    }\n                }\n            }\n            addNewEditorFromKeyboard() {\n                if (this.currentLayer.canCreateNewEmptyEditor()) {\n                    this.currentLayer.addNewEditor();\n                }\n            }\n            updateToolbar(mode) {\n                if (mode === this.#mode) {\n                    return;\n                }\n                this._eventBus.dispatch(\"switchannotationeditormode\", {\n                    source: this,\n                    mode\n                });\n            }\n            updateParams(type, value) {\n                if (!this.#editorTypes) {\n                    return;\n                }\n                switch(type){\n                    case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorParamsType.CREATE:\n                        this.currentLayer.addNewEditor();\n                        return;\n                    case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR:\n                        this.#mainHighlightColorPicker?.updateColor(value);\n                        break;\n                }\n                for (const editor of this.#selectedEditors){\n                    editor.updateParams(type, value);\n                }\n                for (const editorType of this.#editorTypes){\n                    editorType.updateDefaultParams(type, value);\n                }\n            }\n            enableWaiting(mustWait = false) {\n                if (this.#isWaiting === mustWait) {\n                    return;\n                }\n                this.#isWaiting = mustWait;\n                for (const layer of this.#allLayers.values()){\n                    if (mustWait) {\n                        layer.disableClick();\n                    } else {\n                        layer.enableClick();\n                    }\n                    layer.div.classList.toggle(\"waiting\", mustWait);\n                }\n            }\n            #enableAll() {\n                if (!this.#isEnabled) {\n                    this.#isEnabled = true;\n                    for (const layer of this.#allLayers.values()){\n                        layer.enable();\n                    }\n                }\n            }\n            #disableAll() {\n                this.unselectAll();\n                if (this.#isEnabled) {\n                    this.#isEnabled = false;\n                    for (const layer of this.#allLayers.values()){\n                        layer.disable();\n                    }\n                }\n            }\n            getEditors(pageIndex) {\n                const editors = [];\n                for (const editor of this.#allEditors.values()){\n                    if (editor.pageIndex === pageIndex) {\n                        editors.push(editor);\n                    }\n                }\n                return editors;\n            }\n            getEditor(id) {\n                return this.#allEditors.get(id);\n            }\n            addEditor(editor) {\n                this.#allEditors.set(editor.id, editor);\n            }\n            removeEditor(editor) {\n                if (editor.div.contains(document.activeElement)) {\n                    if (this.#focusMainContainerTimeoutId) {\n                        clearTimeout(this.#focusMainContainerTimeoutId);\n                    }\n                    this.#focusMainContainerTimeoutId = setTimeout(()=>{\n                        this.focusMainContainer();\n                        this.#focusMainContainerTimeoutId = null;\n                    }, 0);\n                }\n                this.#allEditors.delete(editor.id);\n                this.unselect(editor);\n                if (!editor.annotationElementId || !this.#deletedAnnotationsElementIds.has(editor.annotationElementId)) {\n                    this.#annotationStorage?.remove(editor.id);\n                }\n            }\n            addDeletedAnnotationElement(editor) {\n                this.#deletedAnnotationsElementIds.add(editor.annotationElementId);\n                editor.deleted = true;\n            }\n            isDeletedAnnotationElement(annotationElementId) {\n                return this.#deletedAnnotationsElementIds.has(annotationElementId);\n            }\n            removeDeletedAnnotationElement(editor) {\n                this.#deletedAnnotationsElementIds.delete(editor.annotationElementId);\n                editor.deleted = false;\n            }\n            #addEditorToLayer(editor) {\n                const layer = this.#allLayers.get(editor.pageIndex);\n                if (layer) {\n                    layer.addOrRebuild(editor);\n                } else {\n                    this.addEditor(editor);\n                }\n            }\n            setActiveEditor(editor) {\n                if (this.#activeEditor === editor) {\n                    return;\n                }\n                this.#activeEditor = editor;\n                if (editor) {\n                    this.#dispatchUpdateUI(editor.propertiesToUpdate);\n                }\n            }\n            toggleSelected(editor) {\n                if (this.#selectedEditors.has(editor)) {\n                    this.#selectedEditors.delete(editor);\n                    editor.unselect();\n                    this.#dispatchUpdateStates({\n                        hasSelectedEditor: this.hasSelection\n                    });\n                    return;\n                }\n                this.#selectedEditors.add(editor);\n                editor.select();\n                this.#dispatchUpdateUI(editor.propertiesToUpdate);\n                this.#dispatchUpdateStates({\n                    hasSelectedEditor: true\n                });\n            }\n            setSelected(editor) {\n                for (const ed of this.#selectedEditors){\n                    if (ed !== editor) {\n                        ed.unselect();\n                    }\n                }\n                this.#selectedEditors.clear();\n                this.#selectedEditors.add(editor);\n                editor.select();\n                this.#dispatchUpdateUI(editor.propertiesToUpdate);\n                this.#dispatchUpdateStates({\n                    hasSelectedEditor: true\n                });\n            }\n            isSelected(editor) {\n                return this.#selectedEditors.has(editor);\n            }\n            get firstSelectedEditor() {\n                return this.#selectedEditors.values().next().value;\n            }\n            unselect(editor) {\n                editor.unselect();\n                this.#selectedEditors.delete(editor);\n                this.#dispatchUpdateStates({\n                    hasSelectedEditor: this.hasSelection\n                });\n            }\n            get hasSelection() {\n                return this.#selectedEditors.size !== 0;\n            }\n            get isEnterHandled() {\n                return this.#selectedEditors.size === 1 && this.firstSelectedEditor.isEnterHandled;\n            }\n            undo() {\n                this.#commandManager.undo();\n                this.#dispatchUpdateStates({\n                    hasSomethingToUndo: this.#commandManager.hasSomethingToUndo(),\n                    hasSomethingToRedo: true,\n                    isEmpty: this.#isEmpty()\n                });\n            }\n            redo() {\n                this.#commandManager.redo();\n                this.#dispatchUpdateStates({\n                    hasSomethingToUndo: true,\n                    hasSomethingToRedo: this.#commandManager.hasSomethingToRedo(),\n                    isEmpty: this.#isEmpty()\n                });\n            }\n            addCommands(params) {\n                this.#commandManager.add(params);\n                this.#dispatchUpdateStates({\n                    hasSomethingToUndo: true,\n                    hasSomethingToRedo: false,\n                    isEmpty: this.#isEmpty()\n                });\n            }\n            #isEmpty() {\n                if (this.#allEditors.size === 0) {\n                    return true;\n                }\n                if (this.#allEditors.size === 1) {\n                    for (const editor of this.#allEditors.values()){\n                        return editor.isEmpty();\n                    }\n                }\n                return false;\n            }\n            delete() {\n                this.commitOrRemove();\n                if (!this.hasSelection) {\n                    return;\n                }\n                const editors = [\n                    ...this.#selectedEditors\n                ];\n                const cmd = ()=>{\n                    for (const editor of editors){\n                        editor.remove();\n                    }\n                };\n                const undo = ()=>{\n                    for (const editor of editors){\n                        this.#addEditorToLayer(editor);\n                    }\n                };\n                this.addCommands({\n                    cmd,\n                    undo,\n                    mustExec: true\n                });\n            }\n            commitOrRemove() {\n                this.#activeEditor?.commitOrRemove();\n            }\n            hasSomethingToControl() {\n                return this.#activeEditor || this.hasSelection;\n            }\n            #selectEditors(editors) {\n                this.#selectedEditors.clear();\n                for (const editor of editors){\n                    if (editor.isEmpty()) {\n                        continue;\n                    }\n                    this.#selectedEditors.add(editor);\n                    editor.select();\n                }\n                this.#dispatchUpdateStates({\n                    hasSelectedEditor: true\n                });\n            }\n            selectAll() {\n                for (const editor of this.#selectedEditors){\n                    editor.commit();\n                }\n                this.#selectEditors(this.#allEditors.values());\n            }\n            unselectAll() {\n                if (this.#activeEditor) {\n                    this.#activeEditor.commitOrRemove();\n                    if (this.#mode !== _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorType.NONE) {\n                        return;\n                    }\n                }\n                if (!this.hasSelection) {\n                    return;\n                }\n                for (const editor of this.#selectedEditors){\n                    editor.unselect();\n                }\n                this.#selectedEditors.clear();\n                this.#dispatchUpdateStates({\n                    hasSelectedEditor: false\n                });\n            }\n            translateSelectedEditors(x, y, noCommit = false) {\n                if (!noCommit) {\n                    this.commitOrRemove();\n                }\n                if (!this.hasSelection) {\n                    return;\n                }\n                this.#translation[0] += x;\n                this.#translation[1] += y;\n                const [totalX, totalY] = this.#translation;\n                const editors = [\n                    ...this.#selectedEditors\n                ];\n                const TIME_TO_WAIT = 1000;\n                if (this.#translationTimeoutId) {\n                    clearTimeout(this.#translationTimeoutId);\n                }\n                this.#translationTimeoutId = setTimeout(()=>{\n                    this.#translationTimeoutId = null;\n                    this.#translation[0] = this.#translation[1] = 0;\n                    this.addCommands({\n                        cmd: ()=>{\n                            for (const editor of editors){\n                                if (this.#allEditors.has(editor.id)) {\n                                    editor.translateInPage(totalX, totalY);\n                                }\n                            }\n                        },\n                        undo: ()=>{\n                            for (const editor of editors){\n                                if (this.#allEditors.has(editor.id)) {\n                                    editor.translateInPage(-totalX, -totalY);\n                                }\n                            }\n                        },\n                        mustExec: false\n                    });\n                }, TIME_TO_WAIT);\n                for (const editor of editors){\n                    editor.translateInPage(x, y);\n                }\n            }\n            setUpDragSession() {\n                if (!this.hasSelection) {\n                    return;\n                }\n                this.disableUserSelect(true);\n                this.#draggingEditors = new Map();\n                for (const editor of this.#selectedEditors){\n                    this.#draggingEditors.set(editor, {\n                        savedX: editor.x,\n                        savedY: editor.y,\n                        savedPageIndex: editor.pageIndex,\n                        newX: 0,\n                        newY: 0,\n                        newPageIndex: -1\n                    });\n                }\n            }\n            endDragSession() {\n                if (!this.#draggingEditors) {\n                    return false;\n                }\n                this.disableUserSelect(false);\n                const map = this.#draggingEditors;\n                this.#draggingEditors = null;\n                let mustBeAddedInUndoStack = false;\n                for (const [{ x, y, pageIndex }, value] of map){\n                    value.newX = x;\n                    value.newY = y;\n                    value.newPageIndex = pageIndex;\n                    mustBeAddedInUndoStack ||= x !== value.savedX || y !== value.savedY || pageIndex !== value.savedPageIndex;\n                }\n                if (!mustBeAddedInUndoStack) {\n                    return false;\n                }\n                const move = (editor, x, y, pageIndex)=>{\n                    if (this.#allEditors.has(editor.id)) {\n                        const parent = this.#allLayers.get(pageIndex);\n                        if (parent) {\n                            editor._setParentAndPosition(parent, x, y);\n                        } else {\n                            editor.pageIndex = pageIndex;\n                            editor.x = x;\n                            editor.y = y;\n                        }\n                    }\n                };\n                this.addCommands({\n                    cmd: ()=>{\n                        for (const [editor, { newX, newY, newPageIndex }] of map){\n                            move(editor, newX, newY, newPageIndex);\n                        }\n                    },\n                    undo: ()=>{\n                        for (const [editor, { savedX, savedY, savedPageIndex }] of map){\n                            move(editor, savedX, savedY, savedPageIndex);\n                        }\n                    },\n                    mustExec: true\n                });\n                return true;\n            }\n            dragSelectedEditors(tx, ty) {\n                if (!this.#draggingEditors) {\n                    return;\n                }\n                for (const editor of this.#draggingEditors.keys()){\n                    editor.drag(tx, ty);\n                }\n            }\n            rebuild(editor) {\n                if (editor.parent === null) {\n                    const parent = this.getLayer(editor.pageIndex);\n                    if (parent) {\n                        parent.changeParent(editor);\n                        parent.addOrRebuild(editor);\n                    } else {\n                        this.addEditor(editor);\n                        this.addToAnnotationStorage(editor);\n                        editor.rebuild();\n                    }\n                } else {\n                    editor.parent.addOrRebuild(editor);\n                }\n            }\n            get isEditorHandlingKeyboard() {\n                return this.getActive()?.shouldGetKeyboardEvents() || this.#selectedEditors.size === 1 && this.firstSelectedEditor.shouldGetKeyboardEvents();\n            }\n            isActive(editor) {\n                return this.#activeEditor === editor;\n            }\n            getActive() {\n                return this.#activeEditor;\n            }\n            getMode() {\n                return this.#mode;\n            }\n            get imageManager() {\n                return (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"imageManager\", new ImageManager());\n            }\n        }\n    /***/ },\n    /***/ 171: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_659471__)=>{\n        /* harmony export */ __nested_webpack_require_659471__.d(__nested_webpack_exports__, {\n            /* harmony export */ PDFFetchStream: ()=>/* binding */ PDFFetchStream\n        });\n        /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_659471__(266);\n        /* harmony import */ var _network_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_659471__(253);\n        ;\n        function createFetchOptions(headers, withCredentials, abortController) {\n            return {\n                method: \"GET\",\n                headers,\n                signal: abortController.signal,\n                mode: \"cors\",\n                credentials: withCredentials ? \"include\" : \"same-origin\",\n                redirect: \"follow\"\n            };\n        }\n        function createHeaders(httpHeaders) {\n            const headers = new Headers();\n            for(const property in httpHeaders){\n                const value = httpHeaders[property];\n                if (value === undefined) {\n                    continue;\n                }\n                headers.append(property, value);\n            }\n            return headers;\n        }\n        function getArrayBuffer(val) {\n            if (val instanceof Uint8Array) {\n                return val.buffer;\n            }\n            if (val instanceof ArrayBuffer) {\n                return val;\n            }\n            (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`getArrayBuffer - unexpected data format: ${val}`);\n            return new Uint8Array(val).buffer;\n        }\n        class PDFFetchStream {\n            constructor(source){\n                this.source = source;\n                this.isHttp = /^https?:/i.test(source.url);\n                this.httpHeaders = this.isHttp && source.httpHeaders || {};\n                this._fullRequestReader = null;\n                this._rangeRequestReaders = [];\n            }\n            get _progressiveDataLength() {\n                return this._fullRequestReader?._loaded ?? 0;\n            }\n            getFullReader() {\n                (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!this._fullRequestReader, \"PDFFetchStream.getFullReader can only be called once.\");\n                this._fullRequestReader = new PDFFetchStreamReader(this);\n                return this._fullRequestReader;\n            }\n            getRangeReader(begin, end) {\n                if (end <= this._progressiveDataLength) {\n                    return null;\n                }\n                const reader = new PDFFetchStreamRangeReader(this, begin, end);\n                this._rangeRequestReaders.push(reader);\n                return reader;\n            }\n            cancelAllRequests(reason) {\n                this._fullRequestReader?.cancel(reason);\n                for (const reader of this._rangeRequestReaders.slice(0)){\n                    reader.cancel(reason);\n                }\n            }\n        }\n        class PDFFetchStreamReader {\n            constructor(stream){\n                this._stream = stream;\n                this._reader = null;\n                this._loaded = 0;\n                this._filename = null;\n                const source = stream.source;\n                this._withCredentials = source.withCredentials || false;\n                this._contentLength = source.length;\n                this._headersCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                this._disableRange = source.disableRange || false;\n                this._rangeChunkSize = source.rangeChunkSize;\n                if (!this._rangeChunkSize && !this._disableRange) {\n                    this._disableRange = true;\n                }\n                this._abortController = new AbortController();\n                this._isStreamingSupported = !source.disableStream;\n                this._isRangeSupported = !source.disableRange;\n                this._headers = createHeaders(this._stream.httpHeaders);\n                const url = source.url;\n                fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then((response)=>{\n                    if (!(0, _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateResponseStatus)(response.status)) {\n                        throw (0, _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.createResponseStatusError)(response.status, url);\n                    }\n                    this._reader = response.body.getReader();\n                    this._headersCapability.resolve();\n                    const getResponseHeader = (name)=>{\n                        return response.headers.get(name);\n                    };\n                    const { allowRangeRequests, suggestedLength } = (0, _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateRangeRequestCapabilities)({\n                        getResponseHeader,\n                        isHttp: this._stream.isHttp,\n                        rangeChunkSize: this._rangeChunkSize,\n                        disableRange: this._disableRange\n                    });\n                    this._isRangeSupported = allowRangeRequests;\n                    this._contentLength = suggestedLength || this._contentLength;\n                    this._filename = (0, _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.extractFilenameFromHeader)(getResponseHeader);\n                    if (!this._isStreamingSupported && this._isRangeSupported) {\n                        this.cancel(new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException(\"Streaming is disabled.\"));\n                    }\n                }).catch(this._headersCapability.reject);\n                this.onProgress = null;\n            }\n            get headersReady() {\n                return this._headersCapability.promise;\n            }\n            get filename() {\n                return this._filename;\n            }\n            get contentLength() {\n                return this._contentLength;\n            }\n            get isRangeSupported() {\n                return this._isRangeSupported;\n            }\n            get isStreamingSupported() {\n                return this._isStreamingSupported;\n            }\n            async read() {\n                await this._headersCapability.promise;\n                const { value, done } = await this._reader.read();\n                if (done) {\n                    return {\n                        value,\n                        done\n                    };\n                }\n                this._loaded += value.byteLength;\n                this.onProgress?.({\n                    loaded: this._loaded,\n                    total: this._contentLength\n                });\n                return {\n                    value: getArrayBuffer(value),\n                    done: false\n                };\n            }\n            cancel(reason) {\n                this._reader?.cancel(reason);\n                this._abortController.abort();\n            }\n        }\n        class PDFFetchStreamRangeReader {\n            constructor(stream, begin, end){\n                this._stream = stream;\n                this._reader = null;\n                this._loaded = 0;\n                const source = stream.source;\n                this._withCredentials = source.withCredentials || false;\n                this._readCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                this._isStreamingSupported = !source.disableStream;\n                this._abortController = new AbortController();\n                this._headers = createHeaders(this._stream.httpHeaders);\n                this._headers.append(\"Range\", `bytes=${begin}-${end - 1}`);\n                const url = source.url;\n                fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then((response)=>{\n                    if (!(0, _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateResponseStatus)(response.status)) {\n                        throw (0, _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.createResponseStatusError)(response.status, url);\n                    }\n                    this._readCapability.resolve();\n                    this._reader = response.body.getReader();\n                }).catch(this._readCapability.reject);\n                this.onProgress = null;\n            }\n            get isStreamingSupported() {\n                return this._isStreamingSupported;\n            }\n            async read() {\n                await this._readCapability.promise;\n                const { value, done } = await this._reader.read();\n                if (done) {\n                    return {\n                        value,\n                        done\n                    };\n                }\n                this._loaded += value.byteLength;\n                this.onProgress?.({\n                    loaded: this._loaded\n                });\n                return {\n                    value: getArrayBuffer(value),\n                    done: false\n                };\n            }\n            cancel(reason) {\n                this._reader?.cancel(reason);\n                this._abortController.abort();\n            }\n        }\n    /***/ },\n    /***/ 742: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_668732__)=>{\n        /* harmony export */ __nested_webpack_require_668732__.d(__nested_webpack_exports__, {\n            /* harmony export */ FontFaceObject: ()=>/* binding */ FontFaceObject,\n            /* harmony export */ FontLoader: ()=>/* binding */ FontLoader\n        });\n        /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_668732__(266);\n        class FontLoader {\n            #systemFonts;\n            constructor({ ownerDocument = globalThis.document, styleElement = null }){\n                this.#systemFonts = new Set();\n                this._document = ownerDocument;\n                this.nativeFontFaces = new Set();\n                this.styleElement = null;\n                this.loadingRequests = [];\n                this.loadTestFontId = 0;\n            }\n            addNativeFontFace(nativeFontFace) {\n                this.nativeFontFaces.add(nativeFontFace);\n                this._document.fonts.add(nativeFontFace);\n            }\n            removeNativeFontFace(nativeFontFace) {\n                this.nativeFontFaces.delete(nativeFontFace);\n                this._document.fonts.delete(nativeFontFace);\n            }\n            insertRule(rule) {\n                if (!this.styleElement) {\n                    this.styleElement = this._document.createElement(\"style\");\n                    this._document.documentElement.getElementsByTagName(\"head\")[0].append(this.styleElement);\n                }\n                const styleSheet = this.styleElement.sheet;\n                styleSheet.insertRule(rule, styleSheet.cssRules.length);\n            }\n            clear() {\n                for (const nativeFontFace of this.nativeFontFaces){\n                    this._document.fonts.delete(nativeFontFace);\n                }\n                this.nativeFontFaces.clear();\n                this.#systemFonts.clear();\n                if (this.styleElement) {\n                    this.styleElement.remove();\n                    this.styleElement = null;\n                }\n            }\n            async loadSystemFont({ systemFontInfo: info, _inspectFont }) {\n                if (!info || this.#systemFonts.has(info.loadedName)) {\n                    return;\n                }\n                (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!this.disableFontFace, \"loadSystemFont shouldn't be called when `disableFontFace` is set.\");\n                if (this.isFontLoadingAPISupported) {\n                    const { loadedName, src, style } = info;\n                    const fontFace = new FontFace(loadedName, src, style);\n                    this.addNativeFontFace(fontFace);\n                    try {\n                        await fontFace.load();\n                        this.#systemFonts.add(loadedName);\n                        _inspectFont?.(info);\n                    } catch  {\n                        (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Cannot load system font: ${info.baseFontName}, installing it could help to improve PDF rendering.`);\n                        this.removeNativeFontFace(fontFace);\n                    }\n                    return;\n                }\n                (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Not implemented: loadSystemFont without the Font Loading API.\");\n            }\n            async bind(font) {\n                if (font.attached || font.missingFile && !font.systemFontInfo) {\n                    return;\n                }\n                font.attached = true;\n                if (font.systemFontInfo) {\n                    await this.loadSystemFont(font);\n                    return;\n                }\n                if (this.isFontLoadingAPISupported) {\n                    const nativeFontFace = font.createNativeFontFace();\n                    if (nativeFontFace) {\n                        this.addNativeFontFace(nativeFontFace);\n                        try {\n                            await nativeFontFace.loaded;\n                        } catch (ex) {\n                            (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);\n                            font.disableFontFace = true;\n                            throw ex;\n                        }\n                    }\n                    return;\n                }\n                const rule = font.createFontFaceRule();\n                if (rule) {\n                    this.insertRule(rule);\n                    if (this.isSyncFontLoadingSupported) {\n                        return;\n                    }\n                    await new Promise((resolve)=>{\n                        const request = this._queueLoadingCallback(resolve);\n                        this._prepareFontLoadEvent(font, request);\n                    });\n                }\n            }\n            get isFontLoadingAPISupported() {\n                const hasFonts = !!this._document?.fonts;\n                return (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"isFontLoadingAPISupported\", hasFonts);\n            }\n            get isSyncFontLoadingSupported() {\n                let supported = false;\n                if (_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS) {\n                    supported = true;\n                } else if (typeof navigator !== \"undefined\" && typeof navigator?.userAgent === \"string\" && /Mozilla\\/5.0.*?rv:\\d+.*? Gecko/.test(navigator.userAgent)) {\n                    supported = true;\n                }\n                return (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"isSyncFontLoadingSupported\", supported);\n            }\n            _queueLoadingCallback(callback) {\n                function completeRequest() {\n                    (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!request.done, \"completeRequest() cannot be called twice.\");\n                    request.done = true;\n                    while(loadingRequests.length > 0 && loadingRequests[0].done){\n                        const otherRequest = loadingRequests.shift();\n                        setTimeout(otherRequest.callback, 0);\n                    }\n                }\n                const { loadingRequests } = this;\n                const request = {\n                    done: false,\n                    complete: completeRequest,\n                    callback\n                };\n                loadingRequests.push(request);\n                return request;\n            }\n            get _loadTestFont() {\n                const testFont = atob(\"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" + \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" + \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" + \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" + \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" + \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" + \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" + \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" + \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" + \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" + \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" + \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" + \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" + \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" + \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" + \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" + \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\");\n                return (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"_loadTestFont\", testFont);\n            }\n            _prepareFontLoadEvent(font, request) {\n                function int32(data, offset) {\n                    return data.charCodeAt(offset) << 24 | data.charCodeAt(offset + 1) << 16 | data.charCodeAt(offset + 2) << 8 | data.charCodeAt(offset + 3) & 0xff;\n                }\n                function spliceString(s, offset, remove, insert) {\n                    const chunk1 = s.substring(0, offset);\n                    const chunk2 = s.substring(offset + remove);\n                    return chunk1 + insert + chunk2;\n                }\n                let i, ii;\n                const canvas = this._document.createElement(\"canvas\");\n                canvas.width = 1;\n                canvas.height = 1;\n                const ctx = canvas.getContext(\"2d\");\n                let called = 0;\n                function isFontReady(name, callback) {\n                    if (++called > 30) {\n                        (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(\"Load test font never loaded.\");\n                        callback();\n                        return;\n                    }\n                    ctx.font = \"30px \" + name;\n                    ctx.fillText(\".\", 0, 20);\n                    const imageData = ctx.getImageData(0, 0, 1, 1);\n                    if (imageData.data[3] > 0) {\n                        callback();\n                        return;\n                    }\n                    setTimeout(isFontReady.bind(null, name, callback));\n                }\n                const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;\n                let data = this._loadTestFont;\n                const COMMENT_OFFSET = 976;\n                data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);\n                const CFF_CHECKSUM_OFFSET = 16;\n                const XXXX_VALUE = 0x58585858;\n                let checksum = int32(data, CFF_CHECKSUM_OFFSET);\n                for(i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4){\n                    checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;\n                }\n                if (i < loadTestFontId.length) {\n                    checksum = checksum - XXXX_VALUE + int32(loadTestFontId + \"XXX\", i) | 0;\n                }\n                data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.string32)(checksum));\n                const url = `url(data:font/opentype;base64,${btoa(data)});`;\n                const rule = `@font-face {font-family:\"${loadTestFontId}\";src:${url}}`;\n                this.insertRule(rule);\n                const div = this._document.createElement(\"div\");\n                div.style.visibility = \"hidden\";\n                div.style.width = div.style.height = \"10px\";\n                div.style.position = \"absolute\";\n                div.style.top = div.style.left = \"0px\";\n                for (const name of [\n                    font.loadedName,\n                    loadTestFontId\n                ]){\n                    const span = this._document.createElement(\"span\");\n                    span.textContent = \"Hi\";\n                    span.style.fontFamily = name;\n                    div.append(span);\n                }\n                this._document.body.append(div);\n                isFontReady(loadTestFontId, ()=>{\n                    div.remove();\n                    request.complete();\n                });\n            }\n        }\n        class FontFaceObject {\n            constructor(translatedData, { isEvalSupported = true, disableFontFace = false, ignoreErrors = false, inspectFont = null }){\n                this.compiledGlyphs = Object.create(null);\n                for(const i in translatedData){\n                    this[i] = translatedData[i];\n                }\n                this.isEvalSupported = isEvalSupported !== false;\n                this.disableFontFace = disableFontFace === true;\n                this.ignoreErrors = ignoreErrors === true;\n                this._inspectFont = inspectFont;\n            }\n            createNativeFontFace() {\n                if (!this.data || this.disableFontFace) {\n                    return null;\n                }\n                let nativeFontFace;\n                if (!this.cssFontInfo) {\n                    nativeFontFace = new FontFace(this.loadedName, this.data, {});\n                } else {\n                    const css = {\n                        weight: this.cssFontInfo.fontWeight\n                    };\n                    if (this.cssFontInfo.italicAngle) {\n                        css.style = `oblique ${this.cssFontInfo.italicAngle}deg`;\n                    }\n                    nativeFontFace = new FontFace(this.cssFontInfo.fontFamily, this.data, css);\n                }\n                this._inspectFont?.(this);\n                return nativeFontFace;\n            }\n            createFontFaceRule() {\n                if (!this.data || this.disableFontFace) {\n                    return null;\n                }\n                const data = (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.bytesToString)(this.data);\n                const url = `url(data:${this.mimetype};base64,${btoa(data)});`;\n                let rule;\n                if (!this.cssFontInfo) {\n                    rule = `@font-face {font-family:\"${this.loadedName}\";src:${url}}`;\n                } else {\n                    let css = `font-weight: ${this.cssFontInfo.fontWeight};`;\n                    if (this.cssFontInfo.italicAngle) {\n                        css += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`;\n                    }\n                    rule = `@font-face {font-family:\"${this.cssFontInfo.fontFamily}\";${css}src:${url}}`;\n                }\n                this._inspectFont?.(this, url);\n                return rule;\n            }\n            getPathGenerator(objs, character) {\n                if (this.compiledGlyphs[character] !== undefined) {\n                    return this.compiledGlyphs[character];\n                }\n                let cmds;\n                try {\n                    cmds = objs.get(this.loadedName + \"_path_\" + character);\n                } catch (ex) {\n                    if (!this.ignoreErrors) {\n                        throw ex;\n                    }\n                    (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`getPathGenerator - ignoring character: \"${ex}\".`);\n                    return this.compiledGlyphs[character] = function(c, size) {};\n                }\n                if (this.isEvalSupported && _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.FeatureTest.isEvalSupported) {\n                    const jsBuf = [];\n                    for (const current of cmds){\n                        const args = current.args !== undefined ? current.args.join(\",\") : \"\";\n                        jsBuf.push(\"c.\", current.cmd, \"(\", args, \");\\n\");\n                    }\n                    return this.compiledGlyphs[character] = new Function(\"c\", \"size\", jsBuf.join(\"\"));\n                }\n                return this.compiledGlyphs[character] = function(c, size) {\n                    for (const current of cmds){\n                        if (current.cmd === \"scale\") {\n                            current.args = [\n                                size,\n                                -size\n                            ];\n                        }\n                        c[current.cmd].apply(c, current.args);\n                    }\n                };\n            }\n        }\n    /***/ },\n    /***/ 472: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_684596__)=>{\n        /* harmony export */ __nested_webpack_require_684596__.d(__nested_webpack_exports__, {\n            /* harmony export */ Metadata: ()=>/* binding */ Metadata\n        });\n        /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_684596__(266);\n        class Metadata {\n            #metadataMap;\n            #data;\n            constructor({ parsedData, rawData }){\n                this.#metadataMap = parsedData;\n                this.#data = rawData;\n            }\n            getRaw() {\n                return this.#data;\n            }\n            get(name) {\n                return this.#metadataMap.get(name) ?? null;\n            }\n            getAll() {\n                return (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.objectFromMap)(this.#metadataMap);\n            }\n            has(name) {\n                return this.#metadataMap.has(name);\n            }\n        }\n    /***/ },\n    /***/ 474: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_685609__)=>{\n        /* harmony export */ __nested_webpack_require_685609__.d(__nested_webpack_exports__, {\n            /* harmony export */ PDFNetworkStream: ()=>/* binding */ PDFNetworkStream\n        });\n        /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_685609__(266);\n        /* harmony import */ var _network_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_685609__(253);\n        ;\n        const OK_RESPONSE = 200;\n        const PARTIAL_CONTENT_RESPONSE = 206;\n        function getArrayBuffer(xhr) {\n            const data = xhr.response;\n            if (typeof data !== \"string\") {\n                return data;\n            }\n            return (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.stringToBytes)(data).buffer;\n        }\n        class NetworkManager {\n            constructor(url, args = {}){\n                this.url = url;\n                this.isHttp = /^https?:/i.test(url);\n                this.httpHeaders = this.isHttp && args.httpHeaders || Object.create(null);\n                this.withCredentials = args.withCredentials || false;\n                this.currXhrId = 0;\n                this.pendingRequests = Object.create(null);\n            }\n            requestRange(begin, end, listeners) {\n                const args = {\n                    begin,\n                    end\n                };\n                for(const prop in listeners){\n                    args[prop] = listeners[prop];\n                }\n                return this.request(args);\n            }\n            requestFull(listeners) {\n                return this.request(listeners);\n            }\n            request(args) {\n                const xhr = new XMLHttpRequest();\n                const xhrId = this.currXhrId++;\n                const pendingRequest = this.pendingRequests[xhrId] = {\n                    xhr\n                };\n                xhr.open(\"GET\", this.url);\n                xhr.withCredentials = this.withCredentials;\n                for(const property in this.httpHeaders){\n                    const value = this.httpHeaders[property];\n                    if (value === undefined) {\n                        continue;\n                    }\n                    xhr.setRequestHeader(property, value);\n                }\n                if (this.isHttp && \"begin\" in args && \"end\" in args) {\n                    xhr.setRequestHeader(\"Range\", `bytes=${args.begin}-${args.end - 1}`);\n                    pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\n                } else {\n                    pendingRequest.expectedStatus = OK_RESPONSE;\n                }\n                xhr.responseType = \"arraybuffer\";\n                if (args.onError) {\n                    xhr.onerror = function(evt) {\n                        args.onError(xhr.status);\n                    };\n                }\n                xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\n                xhr.onprogress = this.onProgress.bind(this, xhrId);\n                pendingRequest.onHeadersReceived = args.onHeadersReceived;\n                pendingRequest.onDone = args.onDone;\n                pendingRequest.onError = args.onError;\n                pendingRequest.onProgress = args.onProgress;\n                xhr.send(null);\n                return xhrId;\n            }\n            onProgress(xhrId, evt) {\n                const pendingRequest = this.pendingRequests[xhrId];\n                if (!pendingRequest) {\n                    return;\n                }\n                pendingRequest.onProgress?.(evt);\n            }\n            onStateChange(xhrId, evt) {\n                const pendingRequest = this.pendingRequests[xhrId];\n                if (!pendingRequest) {\n                    return;\n                }\n                const xhr = pendingRequest.xhr;\n                if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\n                    pendingRequest.onHeadersReceived();\n                    delete pendingRequest.onHeadersReceived;\n                }\n                if (xhr.readyState !== 4) {\n                    return;\n                }\n                if (!(xhrId in this.pendingRequests)) {\n                    return;\n                }\n                delete this.pendingRequests[xhrId];\n                if (xhr.status === 0 && this.isHttp) {\n                    pendingRequest.onError?.(xhr.status);\n                    return;\n                }\n                const xhrStatus = xhr.status || OK_RESPONSE;\n                const ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\n                if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {\n                    pendingRequest.onError?.(xhr.status);\n                    return;\n                }\n                const chunk = getArrayBuffer(xhr);\n                if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\n                    const rangeHeader = xhr.getResponseHeader(\"Content-Range\");\n                    const matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\n                    pendingRequest.onDone({\n                        begin: parseInt(matches[1], 10),\n                        chunk\n                    });\n                } else if (chunk) {\n                    pendingRequest.onDone({\n                        begin: 0,\n                        chunk\n                    });\n                } else {\n                    pendingRequest.onError?.(xhr.status);\n                }\n            }\n            getRequestXhr(xhrId) {\n                return this.pendingRequests[xhrId].xhr;\n            }\n            isPendingRequest(xhrId) {\n                return xhrId in this.pendingRequests;\n            }\n            abortRequest(xhrId) {\n                const xhr = this.pendingRequests[xhrId].xhr;\n                delete this.pendingRequests[xhrId];\n                xhr.abort();\n            }\n        }\n        class PDFNetworkStream {\n            constructor(source){\n                this._source = source;\n                this._manager = new NetworkManager(source.url, {\n                    httpHeaders: source.httpHeaders,\n                    withCredentials: source.withCredentials\n                });\n                this._rangeChunkSize = source.rangeChunkSize;\n                this._fullRequestReader = null;\n                this._rangeRequestReaders = [];\n            }\n            _onRangeRequestReaderClosed(reader) {\n                const i = this._rangeRequestReaders.indexOf(reader);\n                if (i >= 0) {\n                    this._rangeRequestReaders.splice(i, 1);\n                }\n            }\n            getFullReader() {\n                (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!this._fullRequestReader, \"PDFNetworkStream.getFullReader can only be called once.\");\n                this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._source);\n                return this._fullRequestReader;\n            }\n            getRangeReader(begin, end) {\n                const reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);\n                reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\n                this._rangeRequestReaders.push(reader);\n                return reader;\n            }\n            cancelAllRequests(reason) {\n                this._fullRequestReader?.cancel(reason);\n                for (const reader of this._rangeRequestReaders.slice(0)){\n                    reader.cancel(reason);\n                }\n            }\n        }\n        class PDFNetworkStreamFullRequestReader {\n            constructor(manager, source){\n                this._manager = manager;\n                const args = {\n                    onHeadersReceived: this._onHeadersReceived.bind(this),\n                    onDone: this._onDone.bind(this),\n                    onError: this._onError.bind(this),\n                    onProgress: this._onProgress.bind(this)\n                };\n                this._url = source.url;\n                this._fullRequestId = manager.requestFull(args);\n                this._headersReceivedCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                this._disableRange = source.disableRange || false;\n                this._contentLength = source.length;\n                this._rangeChunkSize = source.rangeChunkSize;\n                if (!this._rangeChunkSize && !this._disableRange) {\n                    this._disableRange = true;\n                }\n                this._isStreamingSupported = false;\n                this._isRangeSupported = false;\n                this._cachedChunks = [];\n                this._requests = [];\n                this._done = false;\n                this._storedError = undefined;\n                this._filename = null;\n                this.onProgress = null;\n            }\n            _onHeadersReceived() {\n                const fullRequestXhrId = this._fullRequestId;\n                const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\n                const getResponseHeader = (name)=>{\n                    return fullRequestXhr.getResponseHeader(name);\n                };\n                const { allowRangeRequests, suggestedLength } = (0, _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateRangeRequestCapabilities)({\n                    getResponseHeader,\n                    isHttp: this._manager.isHttp,\n                    rangeChunkSize: this._rangeChunkSize,\n                    disableRange: this._disableRange\n                });\n                if (allowRangeRequests) {\n                    this._isRangeSupported = true;\n                }\n                this._contentLength = suggestedLength || this._contentLength;\n                this._filename = (0, _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.extractFilenameFromHeader)(getResponseHeader);\n                if (this._isRangeSupported) {\n                    this._manager.abortRequest(fullRequestXhrId);\n                }\n                this._headersReceivedCapability.resolve();\n            }\n            _onDone(data) {\n                if (data) {\n                    if (this._requests.length > 0) {\n                        const requestCapability = this._requests.shift();\n                        requestCapability.resolve({\n                            value: data.chunk,\n                            done: false\n                        });\n                    } else {\n                        this._cachedChunks.push(data.chunk);\n                    }\n                }\n                this._done = true;\n                if (this._cachedChunks.length > 0) {\n                    return;\n                }\n                for (const requestCapability of this._requests){\n                    requestCapability.resolve({\n                        value: undefined,\n                        done: true\n                    });\n                }\n                this._requests.length = 0;\n            }\n            _onError(status) {\n                this._storedError = (0, _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.createResponseStatusError)(status, this._url);\n                this._headersReceivedCapability.reject(this._storedError);\n                for (const requestCapability of this._requests){\n                    requestCapability.reject(this._storedError);\n                }\n                this._requests.length = 0;\n                this._cachedChunks.length = 0;\n            }\n            _onProgress(evt) {\n                this.onProgress?.({\n                    loaded: evt.loaded,\n                    total: evt.lengthComputable ? evt.total : this._contentLength\n                });\n            }\n            get filename() {\n                return this._filename;\n            }\n            get isRangeSupported() {\n                return this._isRangeSupported;\n            }\n            get isStreamingSupported() {\n                return this._isStreamingSupported;\n            }\n            get contentLength() {\n                return this._contentLength;\n            }\n            get headersReady() {\n                return this._headersReceivedCapability.promise;\n            }\n            async read() {\n                if (this._storedError) {\n                    throw this._storedError;\n                }\n                if (this._cachedChunks.length > 0) {\n                    const chunk = this._cachedChunks.shift();\n                    return {\n                        value: chunk,\n                        done: false\n                    };\n                }\n                if (this._done) {\n                    return {\n                        value: undefined,\n                        done: true\n                    };\n                }\n                const requestCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                this._requests.push(requestCapability);\n                return requestCapability.promise;\n            }\n            cancel(reason) {\n                this._done = true;\n                this._headersReceivedCapability.reject(reason);\n                for (const requestCapability of this._requests){\n                    requestCapability.resolve({\n                        value: undefined,\n                        done: true\n                    });\n                }\n                this._requests.length = 0;\n                if (this._manager.isPendingRequest(this._fullRequestId)) {\n                    this._manager.abortRequest(this._fullRequestId);\n                }\n                this._fullRequestReader = null;\n            }\n        }\n        class PDFNetworkStreamRangeRequestReader {\n            constructor(manager, begin, end){\n                this._manager = manager;\n                const args = {\n                    onDone: this._onDone.bind(this),\n                    onError: this._onError.bind(this),\n                    onProgress: this._onProgress.bind(this)\n                };\n                this._url = manager.url;\n                this._requestId = manager.requestRange(begin, end, args);\n                this._requests = [];\n                this._queuedChunk = null;\n                this._done = false;\n                this._storedError = undefined;\n                this.onProgress = null;\n                this.onClosed = null;\n            }\n            _close() {\n                this.onClosed?.(this);\n            }\n            _onDone(data) {\n                const chunk = data.chunk;\n                if (this._requests.length > 0) {\n                    const requestCapability = this._requests.shift();\n                    requestCapability.resolve({\n                        value: chunk,\n                        done: false\n                    });\n                } else {\n                    this._queuedChunk = chunk;\n                }\n                this._done = true;\n                for (const requestCapability of this._requests){\n                    requestCapability.resolve({\n                        value: undefined,\n                        done: true\n                    });\n                }\n                this._requests.length = 0;\n                this._close();\n            }\n            _onError(status) {\n                this._storedError = (0, _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.createResponseStatusError)(status, this._url);\n                for (const requestCapability of this._requests){\n                    requestCapability.reject(this._storedError);\n                }\n                this._requests.length = 0;\n                this._queuedChunk = null;\n            }\n            _onProgress(evt) {\n                if (!this.isStreamingSupported) {\n                    this.onProgress?.({\n                        loaded: evt.loaded\n                    });\n                }\n            }\n            get isStreamingSupported() {\n                return false;\n            }\n            async read() {\n                if (this._storedError) {\n                    throw this._storedError;\n                }\n                if (this._queuedChunk !== null) {\n                    const chunk = this._queuedChunk;\n                    this._queuedChunk = null;\n                    return {\n                        value: chunk,\n                        done: false\n                    };\n                }\n                if (this._done) {\n                    return {\n                        value: undefined,\n                        done: true\n                    };\n                }\n                const requestCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                this._requests.push(requestCapability);\n                return requestCapability.promise;\n            }\n            cancel(reason) {\n                this._done = true;\n                for (const requestCapability of this._requests){\n                    requestCapability.resolve({\n                        value: undefined,\n                        done: true\n                    });\n                }\n                this._requests.length = 0;\n                if (this._manager.isPendingRequest(this._requestId)) {\n                    this._manager.abortRequest(this._requestId);\n                }\n                this._close();\n            }\n        }\n    /***/ },\n    /***/ 253: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_703065__)=>{\n        // EXPORTS\n        __nested_webpack_require_703065__.d(__nested_webpack_exports__, {\n            createResponseStatusError: ()=>/* binding */ createResponseStatusError,\n            extractFilenameFromHeader: ()=>/* binding */ extractFilenameFromHeader,\n            validateRangeRequestCapabilities: ()=>/* binding */ validateRangeRequestCapabilities,\n            validateResponseStatus: ()=>/* binding */ validateResponseStatus\n        });\n        // EXTERNAL MODULE: ./src/shared/util.js\n        var util = __nested_webpack_require_703065__(266);\n        ; // CONCATENATED MODULE: ./src/display/content_disposition.js\n        function getFilenameFromContentDispositionHeader(contentDisposition) {\n            let needsEncodingFixup = true;\n            let tmp = toParamRegExp(\"filename\\\\*\", \"i\").exec(contentDisposition);\n            if (tmp) {\n                tmp = tmp[1];\n                let filename = rfc2616unquote(tmp);\n                filename = unescape(filename);\n                filename = rfc5987decode(filename);\n                filename = rfc2047decode(filename);\n                return fixupEncoding(filename);\n            }\n            tmp = rfc2231getparam(contentDisposition);\n            if (tmp) {\n                const filename = rfc2047decode(tmp);\n                return fixupEncoding(filename);\n            }\n            tmp = toParamRegExp(\"filename\", \"i\").exec(contentDisposition);\n            if (tmp) {\n                tmp = tmp[1];\n                let filename = rfc2616unquote(tmp);\n                filename = rfc2047decode(filename);\n                return fixupEncoding(filename);\n            }\n            function toParamRegExp(attributePattern, flags) {\n                return new RegExp(\"(?:^|;)\\\\s*\" + attributePattern + \"\\\\s*=\\\\s*\" + \"(\" + '[^\";\\\\s][^;\\\\s]*' + \"|\" + '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' + \")\", flags);\n            }\n            function textdecode(encoding, value) {\n                if (encoding) {\n                    if (!/^[\\x00-\\xFF]+$/.test(value)) {\n                        return value;\n                    }\n                    try {\n                        const decoder = new TextDecoder(encoding, {\n                            fatal: true\n                        });\n                        const buffer = (0, util.stringToBytes)(value);\n                        value = decoder.decode(buffer);\n                        needsEncodingFixup = false;\n                    } catch  {}\n                }\n                return value;\n            }\n            function fixupEncoding(value) {\n                if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\n                    value = textdecode(\"utf-8\", value);\n                    if (needsEncodingFixup) {\n                        value = textdecode(\"iso-8859-1\", value);\n                    }\n                }\n                return value;\n            }\n            function rfc2231getparam(contentDispositionStr) {\n                const matches = [];\n                let match;\n                const iter = toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\n                while((match = iter.exec(contentDispositionStr)) !== null){\n                    let [, n, quot, part] = match;\n                    n = parseInt(n, 10);\n                    if (n in matches) {\n                        if (n === 0) {\n                            break;\n                        }\n                        continue;\n                    }\n                    matches[n] = [\n                        quot,\n                        part\n                    ];\n                }\n                const parts = [];\n                for(let n = 0; n < matches.length; ++n){\n                    if (!(n in matches)) {\n                        break;\n                    }\n                    let [quot, part] = matches[n];\n                    part = rfc2616unquote(part);\n                    if (quot) {\n                        part = unescape(part);\n                        if (n === 0) {\n                            part = rfc5987decode(part);\n                        }\n                    }\n                    parts.push(part);\n                }\n                return parts.join(\"\");\n            }\n            function rfc2616unquote(value) {\n                if (value.startsWith('\"')) {\n                    const parts = value.slice(1).split('\\\\\"');\n                    for(let i = 0; i < parts.length; ++i){\n                        const quotindex = parts[i].indexOf('\"');\n                        if (quotindex !== -1) {\n                            parts[i] = parts[i].slice(0, quotindex);\n                            parts.length = i + 1;\n                        }\n                        parts[i] = parts[i].replaceAll(/\\\\(.)/g, \"$1\");\n                    }\n                    value = parts.join('\"');\n                }\n                return value;\n            }\n            function rfc5987decode(extvalue) {\n                const encodingend = extvalue.indexOf(\"'\");\n                if (encodingend === -1) {\n                    return extvalue;\n                }\n                const encoding = extvalue.slice(0, encodingend);\n                const langvalue = extvalue.slice(encodingend + 1);\n                const value = langvalue.replace(/^[^']*'/, \"\");\n                return textdecode(encoding, value);\n            }\n            function rfc2047decode(value) {\n                if (!value.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\n                    return value;\n                }\n                return value.replaceAll(/=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g, function(matches, charset, encoding, text) {\n                    if (encoding === \"q\" || encoding === \"Q\") {\n                        text = text.replaceAll(\"_\", \" \");\n                        text = text.replaceAll(/=([0-9a-fA-F]{2})/g, function(match, hex) {\n                            return String.fromCharCode(parseInt(hex, 16));\n                        });\n                        return textdecode(charset, text);\n                    }\n                    try {\n                        text = atob(text);\n                    } catch  {}\n                    return textdecode(charset, text);\n                });\n            }\n            return \"\";\n        }\n        // EXTERNAL MODULE: ./src/display/display_utils.js\n        var display_utils = __nested_webpack_require_703065__(473);\n        ; // CONCATENATED MODULE: ./src/display/network_utils.js\n        function validateRangeRequestCapabilities({ getResponseHeader, isHttp, rangeChunkSize, disableRange }) {\n            const returnValues = {\n                allowRangeRequests: false,\n                suggestedLength: undefined\n            };\n            const length = parseInt(getResponseHeader(\"Content-Length\"), 10);\n            if (!Number.isInteger(length)) {\n                return returnValues;\n            }\n            returnValues.suggestedLength = length;\n            if (length <= 2 * rangeChunkSize) {\n                return returnValues;\n            }\n            if (disableRange || !isHttp) {\n                return returnValues;\n            }\n            if (getResponseHeader(\"Accept-Ranges\") !== \"bytes\") {\n                return returnValues;\n            }\n            const contentEncoding = getResponseHeader(\"Content-Encoding\") || \"identity\";\n            if (contentEncoding !== \"identity\") {\n                return returnValues;\n            }\n            returnValues.allowRangeRequests = true;\n            return returnValues;\n        }\n        function extractFilenameFromHeader(getResponseHeader) {\n            const contentDisposition = getResponseHeader(\"Content-Disposition\");\n            if (contentDisposition) {\n                let filename = getFilenameFromContentDispositionHeader(contentDisposition);\n                if (filename.includes(\"%\")) {\n                    try {\n                        filename = decodeURIComponent(filename);\n                    } catch  {}\n                }\n                if ((0, display_utils.isPdfFile)(filename)) {\n                    return filename;\n                }\n            }\n            return null;\n        }\n        function createResponseStatusError(status, url) {\n            if (status === 404 || status === 0 && url.startsWith(\"file:\")) {\n                return new util.MissingPDFException('Missing PDF \"' + url + '\".');\n            }\n            return new util.UnexpectedResponseException(`Unexpected server response (${status}) while retrieving PDF \"${url}\".`, status);\n        }\n        function validateResponseStatus(status) {\n            return status === 200 || status === 206;\n        }\n    /***/ },\n    /***/ 498: /***/ (__webpack_module__, __nested_webpack_exports__, __nested_webpack_require_711766__)=>{\n        __nested_webpack_require_711766__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__)=>{\n            try {\n                /* harmony export */ __nested_webpack_require_711766__.d(__nested_webpack_exports__, {\n                    /* harmony export */ PDFNodeStream: ()=>/* binding */ PDFNodeStream\n                });\n                /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_711766__(266);\n                /* harmony import */ var _network_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_711766__(253);\n                ;\n                let fs, http, https, url;\n                if (_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS) {\n                    fs = await import(/* webpackIgnore: true */ \"fs\");\n                    http = await import(/* webpackIgnore: true */ \"http\");\n                    https = await import(/* webpackIgnore: true */ \"https\");\n                    url = await import(/* webpackIgnore: true */ \"url\");\n                }\n                const fileUriRegex = /^file:\\/\\/\\/[a-zA-Z]:\\//;\n                function parseUrl(sourceUrl) {\n                    const parsedUrl = url.parse(sourceUrl);\n                    if (parsedUrl.protocol === \"file:\" || parsedUrl.host) {\n                        return parsedUrl;\n                    }\n                    if (/^[a-z]:[/\\\\]/i.test(sourceUrl)) {\n                        return url.parse(`file:///${sourceUrl}`);\n                    }\n                    if (!parsedUrl.host) {\n                        parsedUrl.protocol = \"file:\";\n                    }\n                    return parsedUrl;\n                }\n                class PDFNodeStream {\n                    constructor(source){\n                        this.source = source;\n                        this.url = parseUrl(source.url);\n                        this.isHttp = this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\n                        this.isFsUrl = this.url.protocol === \"file:\";\n                        this.httpHeaders = this.isHttp && source.httpHeaders || {};\n                        this._fullRequestReader = null;\n                        this._rangeRequestReaders = [];\n                    }\n                    get _progressiveDataLength() {\n                        return this._fullRequestReader?._loaded ?? 0;\n                    }\n                    getFullReader() {\n                        (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!this._fullRequestReader, \"PDFNodeStream.getFullReader can only be called once.\");\n                        this._fullRequestReader = this.isFsUrl ? new PDFNodeStreamFsFullReader(this) : new PDFNodeStreamFullReader(this);\n                        return this._fullRequestReader;\n                    }\n                    getRangeReader(start, end) {\n                        if (end <= this._progressiveDataLength) {\n                            return null;\n                        }\n                        const rangeReader = this.isFsUrl ? new PDFNodeStreamFsRangeReader(this, start, end) : new PDFNodeStreamRangeReader(this, start, end);\n                        this._rangeRequestReaders.push(rangeReader);\n                        return rangeReader;\n                    }\n                    cancelAllRequests(reason) {\n                        this._fullRequestReader?.cancel(reason);\n                        for (const reader of this._rangeRequestReaders.slice(0)){\n                            reader.cancel(reason);\n                        }\n                    }\n                }\n                class BaseFullReader {\n                    constructor(stream){\n                        this._url = stream.url;\n                        this._done = false;\n                        this._storedError = null;\n                        this.onProgress = null;\n                        const source = stream.source;\n                        this._contentLength = source.length;\n                        this._loaded = 0;\n                        this._filename = null;\n                        this._disableRange = source.disableRange || false;\n                        this._rangeChunkSize = source.rangeChunkSize;\n                        if (!this._rangeChunkSize && !this._disableRange) {\n                            this._disableRange = true;\n                        }\n                        this._isStreamingSupported = !source.disableStream;\n                        this._isRangeSupported = !source.disableRange;\n                        this._readableStream = null;\n                        this._readCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                        this._headersCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                    }\n                    get headersReady() {\n                        return this._headersCapability.promise;\n                    }\n                    get filename() {\n                        return this._filename;\n                    }\n                    get contentLength() {\n                        return this._contentLength;\n                    }\n                    get isRangeSupported() {\n                        return this._isRangeSupported;\n                    }\n                    get isStreamingSupported() {\n                        return this._isStreamingSupported;\n                    }\n                    async read() {\n                        await this._readCapability.promise;\n                        if (this._done) {\n                            return {\n                                value: undefined,\n                                done: true\n                            };\n                        }\n                        if (this._storedError) {\n                            throw this._storedError;\n                        }\n                        const chunk = this._readableStream.read();\n                        if (chunk === null) {\n                            this._readCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                            return this.read();\n                        }\n                        this._loaded += chunk.length;\n                        this.onProgress?.({\n                            loaded: this._loaded,\n                            total: this._contentLength\n                        });\n                        const buffer = new Uint8Array(chunk).buffer;\n                        return {\n                            value: buffer,\n                            done: false\n                        };\n                    }\n                    cancel(reason) {\n                        if (!this._readableStream) {\n                            this._error(reason);\n                            return;\n                        }\n                        this._readableStream.destroy(reason);\n                    }\n                    _error(reason) {\n                        this._storedError = reason;\n                        this._readCapability.resolve();\n                    }\n                    _setReadableStream(readableStream) {\n                        this._readableStream = readableStream;\n                        readableStream.on(\"readable\", ()=>{\n                            this._readCapability.resolve();\n                        });\n                        readableStream.on(\"end\", ()=>{\n                            readableStream.destroy();\n                            this._done = true;\n                            this._readCapability.resolve();\n                        });\n                        readableStream.on(\"error\", (reason)=>{\n                            this._error(reason);\n                        });\n                        if (!this._isStreamingSupported && this._isRangeSupported) {\n                            this._error(new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException(\"streaming is disabled\"));\n                        }\n                        if (this._storedError) {\n                            this._readableStream.destroy(this._storedError);\n                        }\n                    }\n                }\n                class BaseRangeReader {\n                    constructor(stream){\n                        this._url = stream.url;\n                        this._done = false;\n                        this._storedError = null;\n                        this.onProgress = null;\n                        this._loaded = 0;\n                        this._readableStream = null;\n                        this._readCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                        const source = stream.source;\n                        this._isStreamingSupported = !source.disableStream;\n                    }\n                    get isStreamingSupported() {\n                        return this._isStreamingSupported;\n                    }\n                    async read() {\n                        await this._readCapability.promise;\n                        if (this._done) {\n                            return {\n                                value: undefined,\n                                done: true\n                            };\n                        }\n                        if (this._storedError) {\n                            throw this._storedError;\n                        }\n                        const chunk = this._readableStream.read();\n                        if (chunk === null) {\n                            this._readCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                            return this.read();\n                        }\n                        this._loaded += chunk.length;\n                        this.onProgress?.({\n                            loaded: this._loaded\n                        });\n                        const buffer = new Uint8Array(chunk).buffer;\n                        return {\n                            value: buffer,\n                            done: false\n                        };\n                    }\n                    cancel(reason) {\n                        if (!this._readableStream) {\n                            this._error(reason);\n                            return;\n                        }\n                        this._readableStream.destroy(reason);\n                    }\n                    _error(reason) {\n                        this._storedError = reason;\n                        this._readCapability.resolve();\n                    }\n                    _setReadableStream(readableStream) {\n                        this._readableStream = readableStream;\n                        readableStream.on(\"readable\", ()=>{\n                            this._readCapability.resolve();\n                        });\n                        readableStream.on(\"end\", ()=>{\n                            readableStream.destroy();\n                            this._done = true;\n                            this._readCapability.resolve();\n                        });\n                        readableStream.on(\"error\", (reason)=>{\n                            this._error(reason);\n                        });\n                        if (this._storedError) {\n                            this._readableStream.destroy(this._storedError);\n                        }\n                    }\n                }\n                function createRequestOptions(parsedUrl, headers) {\n                    return {\n                        protocol: parsedUrl.protocol,\n                        auth: parsedUrl.auth,\n                        host: parsedUrl.hostname,\n                        port: parsedUrl.port,\n                        path: parsedUrl.path,\n                        method: \"GET\",\n                        headers\n                    };\n                }\n                class PDFNodeStreamFullReader extends BaseFullReader {\n                    constructor(stream){\n                        super(stream);\n                        const handleResponse = (response)=>{\n                            if (response.statusCode === 404) {\n                                const error = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.MissingPDFException(`Missing PDF \"${this._url}\".`);\n                                this._storedError = error;\n                                this._headersCapability.reject(error);\n                                return;\n                            }\n                            this._headersCapability.resolve();\n                            this._setReadableStream(response);\n                            const getResponseHeader = (name)=>{\n                                return this._readableStream.headers[name.toLowerCase()];\n                            };\n                            const { allowRangeRequests, suggestedLength } = (0, _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateRangeRequestCapabilities)({\n                                getResponseHeader,\n                                isHttp: stream.isHttp,\n                                rangeChunkSize: this._rangeChunkSize,\n                                disableRange: this._disableRange\n                            });\n                            this._isRangeSupported = allowRangeRequests;\n                            this._contentLength = suggestedLength || this._contentLength;\n                            this._filename = (0, _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.extractFilenameFromHeader)(getResponseHeader);\n                        };\n                        this._request = null;\n                        if (this._url.protocol === \"http:\") {\n                            this._request = http.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);\n                        } else {\n                            this._request = https.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);\n                        }\n                        this._request.on(\"error\", (reason)=>{\n                            this._storedError = reason;\n                            this._headersCapability.reject(reason);\n                        });\n                        this._request.end();\n                    }\n                }\n                class PDFNodeStreamRangeReader extends BaseRangeReader {\n                    constructor(stream, start, end){\n                        super(stream);\n                        this._httpHeaders = {};\n                        for(const property in stream.httpHeaders){\n                            const value = stream.httpHeaders[property];\n                            if (value === undefined) {\n                                continue;\n                            }\n                            this._httpHeaders[property] = value;\n                        }\n                        this._httpHeaders.Range = `bytes=${start}-${end - 1}`;\n                        const handleResponse = (response)=>{\n                            if (response.statusCode === 404) {\n                                const error = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.MissingPDFException(`Missing PDF \"${this._url}\".`);\n                                this._storedError = error;\n                                return;\n                            }\n                            this._setReadableStream(response);\n                        };\n                        this._request = null;\n                        if (this._url.protocol === \"http:\") {\n                            this._request = http.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);\n                        } else {\n                            this._request = https.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);\n                        }\n                        this._request.on(\"error\", (reason)=>{\n                            this._storedError = reason;\n                        });\n                        this._request.end();\n                    }\n                }\n                class PDFNodeStreamFsFullReader extends BaseFullReader {\n                    constructor(stream){\n                        super(stream);\n                        let path = decodeURIComponent(this._url.path);\n                        if (fileUriRegex.test(this._url.href)) {\n                            path = path.replace(/^\\//, \"\");\n                        }\n                        fs.lstat(path, (error, stat)=>{\n                            if (error) {\n                                if (error.code === \"ENOENT\") {\n                                    error = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.MissingPDFException(`Missing PDF \"${path}\".`);\n                                }\n                                this._storedError = error;\n                                this._headersCapability.reject(error);\n                                return;\n                            }\n                            this._contentLength = stat.size;\n                            this._setReadableStream(fs.createReadStream(path));\n                            this._headersCapability.resolve();\n                        });\n                    }\n                }\n                class PDFNodeStreamFsRangeReader extends BaseRangeReader {\n                    constructor(stream, start, end){\n                        super(stream);\n                        let path = decodeURIComponent(this._url.path);\n                        if (fileUriRegex.test(this._url.href)) {\n                            path = path.replace(/^\\//, \"\");\n                        }\n                        this._setReadableStream(fs.createReadStream(path, {\n                            start,\n                            end: end - 1\n                        }));\n                    }\n                }\n                __webpack_async_result__();\n            } catch (e) {\n                __webpack_async_result__(e);\n            }\n        }, 1);\n    /***/ },\n    /***/ 738: /***/ (__webpack_module__, __nested_webpack_exports__, __nested_webpack_require_729861__)=>{\n        __nested_webpack_require_729861__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__)=>{\n            try {\n                /* harmony export */ __nested_webpack_require_729861__.d(__nested_webpack_exports__, {\n                    /* harmony export */ NodeCMapReaderFactory: ()=>/* binding */ NodeCMapReaderFactory,\n                    /* harmony export */ NodeCanvasFactory: ()=>/* binding */ NodeCanvasFactory,\n                    /* harmony export */ NodeFilterFactory: ()=>/* binding */ NodeFilterFactory,\n                    /* harmony export */ NodeStandardFontDataFactory: ()=>/* binding */ NodeStandardFontDataFactory\n                });\n                /* harmony import */ var _base_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_729861__(822);\n                /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_729861__(266);\n                ;\n                let fs, canvas, path2d_polyfill;\n                if (_shared_util_js__WEBPACK_IMPORTED_MODULE_1__.isNodeJS) {\n                    fs = await import(/* webpackIgnore: true */ \"fs\");\n                    try {\n                        canvas = await import(/* webpackIgnore: true */ \"canvas\");\n                    } catch  {}\n                    try {\n                        path2d_polyfill = await import(/* webpackIgnore: true */ \"path2d-polyfill\");\n                    } catch  {}\n                }\n                ;\n                const fetchData = function(url) {\n                    return new Promise((resolve, reject)=>{\n                        fs.readFile(url, (error, data)=>{\n                            if (error || !data) {\n                                reject(new Error(error));\n                                return;\n                            }\n                            resolve(new Uint8Array(data));\n                        });\n                    });\n                };\n                class NodeFilterFactory extends _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseFilterFactory {\n                }\n                class NodeCanvasFactory extends _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseCanvasFactory {\n                    _createCanvas(width, height) {\n                        return canvas.createCanvas(width, height);\n                    }\n                }\n                class NodeCMapReaderFactory extends _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseCMapReaderFactory {\n                    _fetchData(url, compressionType) {\n                        return fetchData(url).then((data)=>{\n                            return {\n                                cMapData: data,\n                                compressionType\n                            };\n                        });\n                    }\n                }\n                class NodeStandardFontDataFactory extends _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseStandardFontDataFactory {\n                    _fetchData(url) {\n                        return fetchData(url);\n                    }\n                }\n                __webpack_async_result__();\n            } catch (e) {\n                __webpack_async_result__(e);\n            }\n        }, 1);\n    /***/ },\n    /***/ 890: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_733171__)=>{\n        /* harmony export */ __nested_webpack_require_733171__.d(__nested_webpack_exports__, {\n            /* harmony export */ OptionalContentConfig: ()=>/* binding */ OptionalContentConfig\n        });\n        /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_733171__(266);\n        /* harmony import */ var _shared_murmurhash3_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_733171__(825);\n        const INTERNAL = Symbol(\"INTERNAL\");\n        class OptionalContentGroup {\n            #visible;\n            constructor(name, intent){\n                this.#visible = true;\n                this.name = name;\n                this.intent = intent;\n            }\n            get visible() {\n                return this.#visible;\n            }\n            _setVisible(internal, visible) {\n                if (internal !== INTERNAL) {\n                    (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Internal method `_setVisible` called.\");\n                }\n                this.#visible = visible;\n            }\n        }\n        class OptionalContentConfig {\n            #cachedGetHash;\n            #groups;\n            #initialHash;\n            #order;\n            constructor(data){\n                this.#cachedGetHash = null;\n                this.#groups = new Map();\n                this.#initialHash = null;\n                this.#order = null;\n                this.name = null;\n                this.creator = null;\n                if (data === null) {\n                    return;\n                }\n                this.name = data.name;\n                this.creator = data.creator;\n                this.#order = data.order;\n                for (const group of data.groups){\n                    this.#groups.set(group.id, new OptionalContentGroup(group.name, group.intent));\n                }\n                if (data.baseState === \"OFF\") {\n                    for (const group of this.#groups.values()){\n                        group._setVisible(INTERNAL, false);\n                    }\n                }\n                for (const on of data.on){\n                    this.#groups.get(on)._setVisible(INTERNAL, true);\n                }\n                for (const off of data.off){\n                    this.#groups.get(off)._setVisible(INTERNAL, false);\n                }\n                this.#initialHash = this.getHash();\n            }\n            #evaluateVisibilityExpression(array) {\n                const length = array.length;\n                if (length < 2) {\n                    return true;\n                }\n                const operator = array[0];\n                for(let i = 1; i < length; i++){\n                    const element = array[i];\n                    let state;\n                    if (Array.isArray(element)) {\n                        state = this.#evaluateVisibilityExpression(element);\n                    } else if (this.#groups.has(element)) {\n                        state = this.#groups.get(element).visible;\n                    } else {\n                        (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Optional content group not found: ${element}`);\n                        return true;\n                    }\n                    switch(operator){\n                        case \"And\":\n                            if (!state) {\n                                return false;\n                            }\n                            break;\n                        case \"Or\":\n                            if (state) {\n                                return true;\n                            }\n                            break;\n                        case \"Not\":\n                            return !state;\n                        default:\n                            return true;\n                    }\n                }\n                return operator === \"And\";\n            }\n            isVisible(group) {\n                if (this.#groups.size === 0) {\n                    return true;\n                }\n                if (!group) {\n                    (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(\"Optional content group not defined.\");\n                    return true;\n                }\n                if (group.type === \"OCG\") {\n                    if (!this.#groups.has(group.id)) {\n                        (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Optional content group not found: ${group.id}`);\n                        return true;\n                    }\n                    return this.#groups.get(group.id).visible;\n                } else if (group.type === \"OCMD\") {\n                    if (group.expression) {\n                        return this.#evaluateVisibilityExpression(group.expression);\n                    }\n                    if (!group.policy || group.policy === \"AnyOn\") {\n                        for (const id of group.ids){\n                            if (!this.#groups.has(id)) {\n                                (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Optional content group not found: ${id}`);\n                                return true;\n                            }\n                            if (this.#groups.get(id).visible) {\n                                return true;\n                            }\n                        }\n                        return false;\n                    } else if (group.policy === \"AllOn\") {\n                        for (const id of group.ids){\n                            if (!this.#groups.has(id)) {\n                                (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Optional content group not found: ${id}`);\n                                return true;\n                            }\n                            if (!this.#groups.get(id).visible) {\n                                return false;\n                            }\n                        }\n                        return true;\n                    } else if (group.policy === \"AnyOff\") {\n                        for (const id of group.ids){\n                            if (!this.#groups.has(id)) {\n                                (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Optional content group not found: ${id}`);\n                                return true;\n                            }\n                            if (!this.#groups.get(id).visible) {\n                                return true;\n                            }\n                        }\n                        return false;\n                    } else if (group.policy === \"AllOff\") {\n                        for (const id of group.ids){\n                            if (!this.#groups.has(id)) {\n                                (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Optional content group not found: ${id}`);\n                                return true;\n                            }\n                            if (this.#groups.get(id).visible) {\n                                return false;\n                            }\n                        }\n                        return true;\n                    }\n                    (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Unknown optional content policy ${group.policy}.`);\n                    return true;\n                }\n                (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Unknown group type ${group.type}.`);\n                return true;\n            }\n            setVisibility(id, visible = true) {\n                if (!this.#groups.has(id)) {\n                    (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Optional content group not found: ${id}`);\n                    return;\n                }\n                this.#groups.get(id)._setVisible(INTERNAL, !!visible);\n                this.#cachedGetHash = null;\n            }\n            get hasInitialVisibility() {\n                return this.#initialHash === null || this.getHash() === this.#initialHash;\n            }\n            getOrder() {\n                if (!this.#groups.size) {\n                    return null;\n                }\n                if (this.#order) {\n                    return this.#order.slice();\n                }\n                return [\n                    ...this.#groups.keys()\n                ];\n            }\n            getGroups() {\n                return this.#groups.size > 0 ? (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.objectFromMap)(this.#groups) : null;\n            }\n            getGroup(id) {\n                return this.#groups.get(id) || null;\n            }\n            getHash() {\n                if (this.#cachedGetHash !== null) {\n                    return this.#cachedGetHash;\n                }\n                const hash = new _shared_murmurhash3_js__WEBPACK_IMPORTED_MODULE_1__.MurmurHash3_64();\n                for (const [id, group] of this.#groups){\n                    hash.update(`${id}:${group.visible}`);\n                }\n                return this.#cachedGetHash = hash.hexdigest();\n            }\n        }\n    /***/ },\n    /***/ 739: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_742279__)=>{\n        /* harmony export */ __nested_webpack_require_742279__.d(__nested_webpack_exports__, {\n            /* harmony export */ renderTextLayer: ()=>/* binding */ renderTextLayer,\n            /* harmony export */ updateTextLayer: ()=>/* binding */ updateTextLayer\n        });\n        /* unused harmony export TextLayerRenderTask */ /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_742279__(266);\n        /* harmony import */ var _display_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_742279__(473);\n        const MAX_TEXT_DIVS_TO_RENDER = 100000;\n        const DEFAULT_FONT_SIZE = 30;\n        const DEFAULT_FONT_ASCENT = 0.8;\n        const ascentCache = new Map();\n        function getCtx(size, isOffscreenCanvasSupported) {\n            let ctx;\n            if (isOffscreenCanvasSupported && _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.FeatureTest.isOffscreenCanvasSupported) {\n                ctx = new OffscreenCanvas(size, size).getContext(\"2d\", {\n                    alpha: false\n                });\n            } else {\n                const canvas = document.createElement(\"canvas\");\n                canvas.width = canvas.height = size;\n                ctx = canvas.getContext(\"2d\", {\n                    alpha: false\n                });\n            }\n            return ctx;\n        }\n        function getAscent(fontFamily, isOffscreenCanvasSupported) {\n            const cachedAscent = ascentCache.get(fontFamily);\n            if (cachedAscent) {\n                return cachedAscent;\n            }\n            const ctx = getCtx(DEFAULT_FONT_SIZE, isOffscreenCanvasSupported);\n            ctx.font = `${DEFAULT_FONT_SIZE}px ${fontFamily}`;\n            const metrics = ctx.measureText(\"\");\n            let ascent = metrics.fontBoundingBoxAscent;\n            let descent = Math.abs(metrics.fontBoundingBoxDescent);\n            if (ascent) {\n                const ratio = ascent / (ascent + descent);\n                ascentCache.set(fontFamily, ratio);\n                ctx.canvas.width = ctx.canvas.height = 0;\n                return ratio;\n            }\n            ctx.strokeStyle = \"red\";\n            ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n            ctx.strokeText(\"g\", 0, 0);\n            let pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n            descent = 0;\n            for(let i = pixels.length - 1 - 3; i >= 0; i -= 4){\n                if (pixels[i] > 0) {\n                    descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);\n                    break;\n                }\n            }\n            ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n            ctx.strokeText(\"A\", 0, DEFAULT_FONT_SIZE);\n            pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n            ascent = 0;\n            for(let i = 0, ii = pixels.length; i < ii; i += 4){\n                if (pixels[i] > 0) {\n                    ascent = DEFAULT_FONT_SIZE - Math.floor(i / 4 / DEFAULT_FONT_SIZE);\n                    break;\n                }\n            }\n            ctx.canvas.width = ctx.canvas.height = 0;\n            if (ascent) {\n                const ratio = ascent / (ascent + descent);\n                ascentCache.set(fontFamily, ratio);\n                return ratio;\n            }\n            ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);\n            return DEFAULT_FONT_ASCENT;\n        }\n        function appendText(task, geom, styles) {\n            const textDiv = document.createElement(\"span\");\n            const textDivProperties = {\n                angle: 0,\n                canvasWidth: 0,\n                hasText: geom.str !== \"\",\n                hasEOL: geom.hasEOL,\n                fontSize: 0\n            };\n            task._textDivs.push(textDiv);\n            const tx = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.Util.transform(task._transform, geom.transform);\n            let angle = Math.atan2(tx[1], tx[0]);\n            const style = styles[geom.fontName];\n            if (style.vertical) {\n                angle += Math.PI / 2;\n            }\n            const fontFamily = task._fontInspectorEnabled && style.fontSubstitution || style.fontFamily;\n            const fontHeight = Math.hypot(tx[2], tx[3]);\n            const fontAscent = fontHeight * getAscent(fontFamily, task._isOffscreenCanvasSupported);\n            let left, top;\n            if (angle === 0) {\n                left = tx[4];\n                top = tx[5] - fontAscent;\n            } else {\n                left = tx[4] + fontAscent * Math.sin(angle);\n                top = tx[5] - fontAscent * Math.cos(angle);\n            }\n            const scaleFactorStr = \"calc(var(--scale-factor)*\";\n            const divStyle = textDiv.style;\n            if (task._container === task._rootContainer) {\n                divStyle.left = `${(100 * left / task._pageWidth).toFixed(2)}%`;\n                divStyle.top = `${(100 * top / task._pageHeight).toFixed(2)}%`;\n            } else {\n                divStyle.left = `${scaleFactorStr}${left.toFixed(2)}px)`;\n                divStyle.top = `${scaleFactorStr}${top.toFixed(2)}px)`;\n            }\n            divStyle.fontSize = `${scaleFactorStr}${fontHeight.toFixed(2)}px)`;\n            divStyle.fontFamily = fontFamily;\n            textDivProperties.fontSize = fontHeight;\n            textDiv.setAttribute(\"role\", \"presentation\");\n            textDiv.textContent = geom.str;\n            textDiv.dir = geom.dir;\n            if (task._fontInspectorEnabled) {\n                textDiv.dataset.fontName = style.fontSubstitutionLoadedName || geom.fontName;\n            }\n            if (angle !== 0) {\n                textDivProperties.angle = angle * (180 / Math.PI);\n            }\n            let shouldScaleText = false;\n            if (geom.str.length > 1) {\n                shouldScaleText = true;\n            } else if (geom.str !== \" \" && geom.transform[0] !== geom.transform[3]) {\n                const absScaleX = Math.abs(geom.transform[0]), absScaleY = Math.abs(geom.transform[3]);\n                if (absScaleX !== absScaleY && Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5) {\n                    shouldScaleText = true;\n                }\n            }\n            if (shouldScaleText) {\n                textDivProperties.canvasWidth = style.vertical ? geom.height : geom.width;\n            }\n            task._textDivProperties.set(textDiv, textDivProperties);\n            if (task._isReadableStream) {\n                task._layoutText(textDiv);\n            }\n        }\n        function layout(params) {\n            const { div, scale, properties, ctx, prevFontSize, prevFontFamily } = params;\n            const { style } = div;\n            let transform = \"\";\n            if (properties.canvasWidth !== 0 && properties.hasText) {\n                const { fontFamily } = style;\n                const { canvasWidth, fontSize } = properties;\n                if (prevFontSize !== fontSize || prevFontFamily !== fontFamily) {\n                    ctx.font = `${fontSize * scale}px ${fontFamily}`;\n                    params.prevFontSize = fontSize;\n                    params.prevFontFamily = fontFamily;\n                }\n                const { width } = ctx.measureText(div.textContent);\n                if (width > 0) {\n                    transform = `scaleX(${canvasWidth * scale / width})`;\n                }\n            }\n            if (properties.angle !== 0) {\n                transform = `rotate(${properties.angle}deg) ${transform}`;\n            }\n            if (transform.length > 0) {\n                style.transform = transform;\n            }\n        }\n        function render(task) {\n            if (task._canceled) {\n                return;\n            }\n            const textDivs = task._textDivs;\n            const capability = task._capability;\n            const textDivsLength = textDivs.length;\n            if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {\n                capability.resolve();\n                return;\n            }\n            if (!task._isReadableStream) {\n                for (const textDiv of textDivs){\n                    task._layoutText(textDiv);\n                }\n            }\n            capability.resolve();\n        }\n        class TextLayerRenderTask {\n            constructor({ textContentSource, container, viewport, textDivs, textDivProperties, textContentItemsStr, isOffscreenCanvasSupported }){\n                this._textContentSource = textContentSource;\n                this._isReadableStream = textContentSource instanceof ReadableStream;\n                this._container = this._rootContainer = container;\n                this._textDivs = textDivs || [];\n                this._textContentItemsStr = textContentItemsStr || [];\n                this._isOffscreenCanvasSupported = isOffscreenCanvasSupported;\n                this._fontInspectorEnabled = !!globalThis.FontInspector?.enabled;\n                this._reader = null;\n                this._textDivProperties = textDivProperties || new WeakMap();\n                this._canceled = false;\n                this._capability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                this._layoutTextParams = {\n                    prevFontSize: null,\n                    prevFontFamily: null,\n                    div: null,\n                    scale: viewport.scale * (globalThis.devicePixelRatio || 1),\n                    properties: null,\n                    ctx: getCtx(0, isOffscreenCanvasSupported)\n                };\n                const { pageWidth, pageHeight, pageX, pageY } = viewport.rawDims;\n                this._transform = [\n                    1,\n                    0,\n                    0,\n                    -1,\n                    -pageX,\n                    pageY + pageHeight\n                ];\n                this._pageWidth = pageWidth;\n                this._pageHeight = pageHeight;\n                (0, _display_utils_js__WEBPACK_IMPORTED_MODULE_1__.setLayerDimensions)(container, viewport);\n                this._capability.promise.finally(()=>{\n                    this._layoutTextParams = null;\n                }).catch(()=>{});\n            }\n            get promise() {\n                return this._capability.promise;\n            }\n            cancel() {\n                this._canceled = true;\n                if (this._reader) {\n                    this._reader.cancel(new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException(\"TextLayer task cancelled.\")).catch(()=>{});\n                    this._reader = null;\n                }\n                this._capability.reject(new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException(\"TextLayer task cancelled.\"));\n            }\n            _processItems(items, styleCache) {\n                for (const item of items){\n                    if (item.str === undefined) {\n                        if (item.type === \"beginMarkedContentProps\" || item.type === \"beginMarkedContent\") {\n                            const parent = this._container;\n                            this._container = document.createElement(\"span\");\n                            this._container.classList.add(\"markedContent\");\n                            if (item.id !== null) {\n                                this._container.setAttribute(\"id\", `${item.id}`);\n                            }\n                            parent.append(this._container);\n                        } else if (item.type === \"endMarkedContent\") {\n                            this._container = this._container.parentNode;\n                        }\n                        continue;\n                    }\n                    this._textContentItemsStr.push(item.str);\n                    appendText(this, item, styleCache);\n                }\n            }\n            _layoutText(textDiv) {\n                const textDivProperties = this._layoutTextParams.properties = this._textDivProperties.get(textDiv);\n                this._layoutTextParams.div = textDiv;\n                layout(this._layoutTextParams);\n                if (textDivProperties.hasText) {\n                    this._container.append(textDiv);\n                }\n                if (textDivProperties.hasEOL) {\n                    const br = document.createElement(\"br\");\n                    br.setAttribute(\"role\", \"presentation\");\n                    this._container.append(br);\n                }\n            }\n            _render() {\n                const capability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                let styleCache = Object.create(null);\n                if (this._isReadableStream) {\n                    const pump = ()=>{\n                        this._reader.read().then(({ value, done })=>{\n                            if (done) {\n                                capability.resolve();\n                                return;\n                            }\n                            Object.assign(styleCache, value.styles);\n                            this._processItems(value.items, styleCache);\n                            pump();\n                        }, capability.reject);\n                    };\n                    this._reader = this._textContentSource.getReader();\n                    pump();\n                } else if (this._textContentSource) {\n                    const { items, styles } = this._textContentSource;\n                    this._processItems(items, styles);\n                    capability.resolve();\n                } else {\n                    throw new Error('No \"textContentSource\" parameter specified.');\n                }\n                capability.promise.then(()=>{\n                    styleCache = null;\n                    render(this);\n                }, this._capability.reject);\n            }\n        }\n        function renderTextLayer(params) {\n            const task = new TextLayerRenderTask(params);\n            task._render();\n            return task;\n        }\n        function updateTextLayer({ container, viewport, textDivs, textDivProperties, isOffscreenCanvasSupported, mustRotate = true, mustRescale = true }) {\n            if (mustRotate) {\n                (0, _display_utils_js__WEBPACK_IMPORTED_MODULE_1__.setLayerDimensions)(container, {\n                    rotation: viewport.rotation\n                });\n            }\n            if (mustRescale) {\n                const ctx = getCtx(0, isOffscreenCanvasSupported);\n                const scale = viewport.scale * (globalThis.devicePixelRatio || 1);\n                const params = {\n                    prevFontSize: null,\n                    prevFontFamily: null,\n                    div: null,\n                    scale,\n                    properties: null,\n                    ctx\n                };\n                for (const div of textDivs){\n                    params.properties = textDivProperties.get(div);\n                    params.div = div;\n                    layout(params);\n                }\n            }\n        }\n    /***/ },\n    /***/ 92: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_757395__)=>{\n        /* harmony export */ __nested_webpack_require_757395__.d(__nested_webpack_exports__, {\n            /* harmony export */ PDFDataTransportStream: ()=>/* binding */ PDFDataTransportStream\n        });\n        /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_757395__(266);\n        /* harmony import */ var _display_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_757395__(473);\n        class PDFDataTransportStream {\n            constructor({ length, initialData, progressiveDone = false, contentDispositionFilename = null, disableRange = false, disableStream = false }, pdfDataRangeTransport){\n                (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(pdfDataRangeTransport, 'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.');\n                this._queuedChunks = [];\n                this._progressiveDone = progressiveDone;\n                this._contentDispositionFilename = contentDispositionFilename;\n                if (initialData?.length > 0) {\n                    const buffer = initialData instanceof Uint8Array && initialData.byteLength === initialData.buffer.byteLength ? initialData.buffer : new Uint8Array(initialData).buffer;\n                    this._queuedChunks.push(buffer);\n                }\n                this._pdfDataRangeTransport = pdfDataRangeTransport;\n                this._isStreamingSupported = !disableStream;\n                this._isRangeSupported = !disableRange;\n                this._contentLength = length;\n                this._fullRequestReader = null;\n                this._rangeReaders = [];\n                this._pdfDataRangeTransport.addRangeListener((begin, chunk)=>{\n                    this._onReceiveData({\n                        begin,\n                        chunk\n                    });\n                });\n                this._pdfDataRangeTransport.addProgressListener((loaded, total)=>{\n                    this._onProgress({\n                        loaded,\n                        total\n                    });\n                });\n                this._pdfDataRangeTransport.addProgressiveReadListener((chunk)=>{\n                    this._onReceiveData({\n                        chunk\n                    });\n                });\n                this._pdfDataRangeTransport.addProgressiveDoneListener(()=>{\n                    this._onProgressiveDone();\n                });\n                this._pdfDataRangeTransport.transportReady();\n            }\n            _onReceiveData({ begin, chunk }) {\n                const buffer = chunk instanceof Uint8Array && chunk.byteLength === chunk.buffer.byteLength ? chunk.buffer : new Uint8Array(chunk).buffer;\n                if (begin === undefined) {\n                    if (this._fullRequestReader) {\n                        this._fullRequestReader._enqueue(buffer);\n                    } else {\n                        this._queuedChunks.push(buffer);\n                    }\n                } else {\n                    const found = this._rangeReaders.some(function(rangeReader) {\n                        if (rangeReader._begin !== begin) {\n                            return false;\n                        }\n                        rangeReader._enqueue(buffer);\n                        return true;\n                    });\n                    (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(found, \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\");\n                }\n            }\n            get _progressiveDataLength() {\n                return this._fullRequestReader?._loaded ?? 0;\n            }\n            _onProgress(evt) {\n                if (evt.total === undefined) {\n                    this._rangeReaders[0]?.onProgress?.({\n                        loaded: evt.loaded\n                    });\n                } else {\n                    this._fullRequestReader?.onProgress?.({\n                        loaded: evt.loaded,\n                        total: evt.total\n                    });\n                }\n            }\n            _onProgressiveDone() {\n                this._fullRequestReader?.progressiveDone();\n                this._progressiveDone = true;\n            }\n            _removeRangeReader(reader) {\n                const i = this._rangeReaders.indexOf(reader);\n                if (i >= 0) {\n                    this._rangeReaders.splice(i, 1);\n                }\n            }\n            getFullReader() {\n                (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!this._fullRequestReader, \"PDFDataTransportStream.getFullReader can only be called once.\");\n                const queuedChunks = this._queuedChunks;\n                this._queuedChunks = null;\n                return new PDFDataTransportStreamReader(this, queuedChunks, this._progressiveDone, this._contentDispositionFilename);\n            }\n            getRangeReader(begin, end) {\n                if (end <= this._progressiveDataLength) {\n                    return null;\n                }\n                const reader = new PDFDataTransportStreamRangeReader(this, begin, end);\n                this._pdfDataRangeTransport.requestDataRange(begin, end);\n                this._rangeReaders.push(reader);\n                return reader;\n            }\n            cancelAllRequests(reason) {\n                this._fullRequestReader?.cancel(reason);\n                for (const reader of this._rangeReaders.slice(0)){\n                    reader.cancel(reason);\n                }\n                this._pdfDataRangeTransport.abort();\n            }\n        }\n        class PDFDataTransportStreamReader {\n            constructor(stream, queuedChunks, progressiveDone = false, contentDispositionFilename = null){\n                this._stream = stream;\n                this._done = progressiveDone || false;\n                this._filename = (0, _display_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPdfFile)(contentDispositionFilename) ? contentDispositionFilename : null;\n                this._queuedChunks = queuedChunks || [];\n                this._loaded = 0;\n                for (const chunk of this._queuedChunks){\n                    this._loaded += chunk.byteLength;\n                }\n                this._requests = [];\n                this._headersReady = Promise.resolve();\n                stream._fullRequestReader = this;\n                this.onProgress = null;\n            }\n            _enqueue(chunk) {\n                if (this._done) {\n                    return;\n                }\n                if (this._requests.length > 0) {\n                    const requestCapability = this._requests.shift();\n                    requestCapability.resolve({\n                        value: chunk,\n                        done: false\n                    });\n                } else {\n                    this._queuedChunks.push(chunk);\n                }\n                this._loaded += chunk.byteLength;\n            }\n            get headersReady() {\n                return this._headersReady;\n            }\n            get filename() {\n                return this._filename;\n            }\n            get isRangeSupported() {\n                return this._stream._isRangeSupported;\n            }\n            get isStreamingSupported() {\n                return this._stream._isStreamingSupported;\n            }\n            get contentLength() {\n                return this._stream._contentLength;\n            }\n            async read() {\n                if (this._queuedChunks.length > 0) {\n                    const chunk = this._queuedChunks.shift();\n                    return {\n                        value: chunk,\n                        done: false\n                    };\n                }\n                if (this._done) {\n                    return {\n                        value: undefined,\n                        done: true\n                    };\n                }\n                const requestCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                this._requests.push(requestCapability);\n                return requestCapability.promise;\n            }\n            cancel(reason) {\n                this._done = true;\n                for (const requestCapability of this._requests){\n                    requestCapability.resolve({\n                        value: undefined,\n                        done: true\n                    });\n                }\n                this._requests.length = 0;\n            }\n            progressiveDone() {\n                if (this._done) {\n                    return;\n                }\n                this._done = true;\n            }\n        }\n        class PDFDataTransportStreamRangeReader {\n            constructor(stream, begin, end){\n                this._stream = stream;\n                this._begin = begin;\n                this._end = end;\n                this._queuedChunk = null;\n                this._requests = [];\n                this._done = false;\n                this.onProgress = null;\n            }\n            _enqueue(chunk) {\n                if (this._done) {\n                    return;\n                }\n                if (this._requests.length === 0) {\n                    this._queuedChunk = chunk;\n                } else {\n                    const requestsCapability = this._requests.shift();\n                    requestsCapability.resolve({\n                        value: chunk,\n                        done: false\n                    });\n                    for (const requestCapability of this._requests){\n                        requestCapability.resolve({\n                            value: undefined,\n                            done: true\n                        });\n                    }\n                    this._requests.length = 0;\n                }\n                this._done = true;\n                this._stream._removeRangeReader(this);\n            }\n            get isStreamingSupported() {\n                return false;\n            }\n            async read() {\n                if (this._queuedChunk) {\n                    const chunk = this._queuedChunk;\n                    this._queuedChunk = null;\n                    return {\n                        value: chunk,\n                        done: false\n                    };\n                }\n                if (this._done) {\n                    return {\n                        value: undefined,\n                        done: true\n                    };\n                }\n                const requestCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                this._requests.push(requestCapability);\n                return requestCapability.promise;\n            }\n            cancel(reason) {\n                this._done = true;\n                for (const requestCapability of this._requests){\n                    requestCapability.resolve({\n                        value: undefined,\n                        done: true\n                    });\n                }\n                this._requests.length = 0;\n                this._stream._removeRangeReader(this);\n            }\n        }\n    /***/ },\n    /***/ 368: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_768610__)=>{\n        /* harmony export */ __nested_webpack_require_768610__.d(__nested_webpack_exports__, {\n            /* harmony export */ GlobalWorkerOptions: ()=>/* binding */ GlobalWorkerOptions\n        });\n        const GlobalWorkerOptions = Object.create(null);\n        GlobalWorkerOptions.workerPort = null;\n        GlobalWorkerOptions.workerSrc = \"\";\n    /***/ },\n    /***/ 160: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_769053__)=>{\n        /* harmony export */ __nested_webpack_require_769053__.d(__nested_webpack_exports__, {\n            /* harmony export */ XfaLayer: ()=>/* binding */ XfaLayer\n        });\n        /* harmony import */ var _xfa_text_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_769053__(521);\n        class XfaLayer {\n            static setupStorage(html, id, element, storage, intent) {\n                const storedData = storage.getValue(id, {\n                    value: null\n                });\n                switch(element.name){\n                    case \"textarea\":\n                        if (storedData.value !== null) {\n                            html.textContent = storedData.value;\n                        }\n                        if (intent === \"print\") {\n                            break;\n                        }\n                        html.addEventListener(\"input\", (event)=>{\n                            storage.setValue(id, {\n                                value: event.target.value\n                            });\n                        });\n                        break;\n                    case \"input\":\n                        if (element.attributes.type === \"radio\" || element.attributes.type === \"checkbox\") {\n                            if (storedData.value === element.attributes.xfaOn) {\n                                html.setAttribute(\"checked\", true);\n                            } else if (storedData.value === element.attributes.xfaOff) {\n                                html.removeAttribute(\"checked\");\n                            }\n                            if (intent === \"print\") {\n                                break;\n                            }\n                            html.addEventListener(\"change\", (event)=>{\n                                storage.setValue(id, {\n                                    value: event.target.checked ? event.target.getAttribute(\"xfaOn\") : event.target.getAttribute(\"xfaOff\")\n                                });\n                            });\n                        } else {\n                            if (storedData.value !== null) {\n                                html.setAttribute(\"value\", storedData.value);\n                            }\n                            if (intent === \"print\") {\n                                break;\n                            }\n                            html.addEventListener(\"input\", (event)=>{\n                                storage.setValue(id, {\n                                    value: event.target.value\n                                });\n                            });\n                        }\n                        break;\n                    case \"select\":\n                        if (storedData.value !== null) {\n                            html.setAttribute(\"value\", storedData.value);\n                            for (const option of element.children){\n                                if (option.attributes.value === storedData.value) {\n                                    option.attributes.selected = true;\n                                } else if (option.attributes.hasOwnProperty(\"selected\")) {\n                                    delete option.attributes.selected;\n                                }\n                            }\n                        }\n                        html.addEventListener(\"input\", (event)=>{\n                            const options = event.target.options;\n                            const value = options.selectedIndex === -1 ? \"\" : options[options.selectedIndex].value;\n                            storage.setValue(id, {\n                                value\n                            });\n                        });\n                        break;\n                }\n            }\n            static setAttributes({ html, element, storage = null, intent, linkService }) {\n                const { attributes } = element;\n                const isHTMLAnchorElement = html instanceof HTMLAnchorElement;\n                if (attributes.type === \"radio\") {\n                    attributes.name = `${attributes.name}-${intent}`;\n                }\n                for (const [key, value] of Object.entries(attributes)){\n                    if (value === null || value === undefined) {\n                        continue;\n                    }\n                    switch(key){\n                        case \"class\":\n                            if (value.length) {\n                                html.setAttribute(key, value.join(\" \"));\n                            }\n                            break;\n                        case \"dataId\":\n                            break;\n                        case \"id\":\n                            html.setAttribute(\"data-element-id\", value);\n                            break;\n                        case \"style\":\n                            Object.assign(html.style, value);\n                            break;\n                        case \"textContent\":\n                            html.textContent = value;\n                            break;\n                        default:\n                            if (!isHTMLAnchorElement || key !== \"href\" && key !== \"newWindow\") {\n                                html.setAttribute(key, value);\n                            }\n                    }\n                }\n                if (isHTMLAnchorElement) {\n                    linkService.addLinkAttributes(html, attributes.href, attributes.newWindow);\n                }\n                if (storage && attributes.dataId) {\n                    this.setupStorage(html, attributes.dataId, element, storage);\n                }\n            }\n            static render(parameters) {\n                const storage = parameters.annotationStorage;\n                const linkService = parameters.linkService;\n                const root = parameters.xfaHtml;\n                const intent = parameters.intent || \"display\";\n                const rootHtml = document.createElement(root.name);\n                if (root.attributes) {\n                    this.setAttributes({\n                        html: rootHtml,\n                        element: root,\n                        intent,\n                        linkService\n                    });\n                }\n                const isNotForRichText = intent !== \"richText\";\n                const rootDiv = parameters.div;\n                rootDiv.append(rootHtml);\n                if (parameters.viewport) {\n                    const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n                    rootDiv.style.transform = transform;\n                }\n                if (isNotForRichText) {\n                    rootDiv.setAttribute(\"class\", \"xfaLayer xfaFont\");\n                }\n                const textDivs = [];\n                if (root.children.length === 0) {\n                    if (root.value) {\n                        const node = document.createTextNode(root.value);\n                        rootHtml.append(node);\n                        if (isNotForRichText && _xfa_text_js__WEBPACK_IMPORTED_MODULE_0__.XfaText.shouldBuildText(root.name)) {\n                            textDivs.push(node);\n                        }\n                    }\n                    return {\n                        textDivs\n                    };\n                }\n                const stack = [\n                    [\n                        root,\n                        -1,\n                        rootHtml\n                    ]\n                ];\n                while(stack.length > 0){\n                    const [parent, i, html] = stack.at(-1);\n                    if (i + 1 === parent.children.length) {\n                        stack.pop();\n                        continue;\n                    }\n                    const child = parent.children[++stack.at(-1)[1]];\n                    if (child === null) {\n                        continue;\n                    }\n                    const { name } = child;\n                    if (name === \"#text\") {\n                        const node = document.createTextNode(child.value);\n                        textDivs.push(node);\n                        html.append(node);\n                        continue;\n                    }\n                    const childHtml = child?.attributes?.xmlns ? document.createElementNS(child.attributes.xmlns, name) : document.createElement(name);\n                    html.append(childHtml);\n                    if (child.attributes) {\n                        this.setAttributes({\n                            html: childHtml,\n                            element: child,\n                            storage,\n                            intent,\n                            linkService\n                        });\n                    }\n                    if (child.children?.length > 0) {\n                        stack.push([\n                            child,\n                            -1,\n                            childHtml\n                        ]);\n                    } else if (child.value) {\n                        const node = document.createTextNode(child.value);\n                        if (isNotForRichText && _xfa_text_js__WEBPACK_IMPORTED_MODULE_0__.XfaText.shouldBuildText(name)) {\n                            textDivs.push(node);\n                        }\n                        childHtml.append(node);\n                    }\n                }\n                for (const el of rootDiv.querySelectorAll(\".xfaNonInteractive input, .xfaNonInteractive textarea\")){\n                    el.setAttribute(\"readOnly\", true);\n                }\n                return {\n                    textDivs\n                };\n            }\n            static update(parameters) {\n                const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n                parameters.div.style.transform = transform;\n                parameters.div.hidden = false;\n            }\n        }\n    /***/ },\n    /***/ 521: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_779079__)=>{\n        /* harmony export */ __nested_webpack_require_779079__.d(__nested_webpack_exports__, {\n            /* harmony export */ XfaText: ()=>/* binding */ XfaText\n        });\n        class XfaText {\n            static textContent(xfa) {\n                const items = [];\n                const output = {\n                    items,\n                    styles: Object.create(null)\n                };\n                function walk(node) {\n                    if (!node) {\n                        return;\n                    }\n                    let str = null;\n                    const name = node.name;\n                    if (name === \"#text\") {\n                        str = node.value;\n                    } else if (!XfaText.shouldBuildText(name)) {\n                        return;\n                    } else if (node?.attributes?.textContent) {\n                        str = node.attributes.textContent;\n                    } else if (node.value) {\n                        str = node.value;\n                    }\n                    if (str !== null) {\n                        items.push({\n                            str\n                        });\n                    }\n                    if (!node.children) {\n                        return;\n                    }\n                    for (const child of node.children){\n                        walk(child);\n                    }\n                }\n                walk(xfa);\n                return output;\n            }\n            static shouldBuildText(name) {\n                return !(name === \"textarea\" || name === \"input\" || name === \"option\" || name === \"select\");\n            }\n        }\n    /***/ },\n    /***/ 907: /***/ (__webpack_module__, __nested_webpack_exports__, __nested_webpack_require_780812__)=>{\n        __nested_webpack_require_780812__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__)=>{\n            try {\n                /* harmony export */ __nested_webpack_require_780812__.d(__nested_webpack_exports__, {\n                    /* harmony export */ AbortException: ()=>/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException,\n                    /* harmony export */ AnnotationEditorLayer: ()=>/* reexport safe */ _display_editor_annotation_editor_layer_js__WEBPACK_IMPORTED_MODULE_4__.AnnotationEditorLayer,\n                    /* harmony export */ AnnotationEditorParamsType: ()=>/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorParamsType,\n                    /* harmony export */ AnnotationEditorType: ()=>/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorType,\n                    /* harmony export */ AnnotationEditorUIManager: ()=>/* reexport safe */ _display_editor_tools_js__WEBPACK_IMPORTED_MODULE_5__.AnnotationEditorUIManager,\n                    /* harmony export */ AnnotationLayer: ()=>/* reexport safe */ _display_annotation_layer_js__WEBPACK_IMPORTED_MODULE_6__.AnnotationLayer,\n                    /* harmony export */ AnnotationMode: ()=>/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationMode,\n                    /* harmony export */ CMapCompressionType: ()=>/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.CMapCompressionType,\n                    /* harmony export */ ColorPicker: ()=>/* reexport safe */ _display_editor_color_picker_js__WEBPACK_IMPORTED_MODULE_7__.ColorPicker,\n                    /* harmony export */ DOMSVGFactory: ()=>/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.DOMSVGFactory,\n                    /* harmony export */ DrawLayer: ()=>/* reexport safe */ _display_draw_layer_js__WEBPACK_IMPORTED_MODULE_8__.DrawLayer,\n                    /* harmony export */ FeatureTest: ()=>/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.FeatureTest,\n                    /* harmony export */ GlobalWorkerOptions: ()=>/* reexport safe */ _display_worker_options_js__WEBPACK_IMPORTED_MODULE_9__.GlobalWorkerOptions,\n                    /* harmony export */ ImageKind: ()=>/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.ImageKind,\n                    /* harmony export */ InvalidPDFException: ()=>/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.InvalidPDFException,\n                    /* harmony export */ MissingPDFException: ()=>/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.MissingPDFException,\n                    /* harmony export */ OPS: ()=>/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.OPS,\n                    /* harmony export */ Outliner: ()=>/* reexport safe */ _display_editor_outliner_js__WEBPACK_IMPORTED_MODULE_10__.Outliner,\n                    /* harmony export */ PDFDataRangeTransport: ()=>/* reexport safe */ _display_api_js__WEBPACK_IMPORTED_MODULE_1__.PDFDataRangeTransport,\n                    /* harmony export */ PDFDateString: ()=>/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.PDFDateString,\n                    /* harmony export */ PDFWorker: ()=>/* reexport safe */ _display_api_js__WEBPACK_IMPORTED_MODULE_1__.PDFWorker,\n                    /* harmony export */ PasswordResponses: ()=>/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PasswordResponses,\n                    /* harmony export */ PermissionFlag: ()=>/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PermissionFlag,\n                    /* harmony export */ PixelsPerInch: ()=>/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.PixelsPerInch,\n                    /* harmony export */ PromiseCapability: ()=>/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability,\n                    /* harmony export */ RenderingCancelledException: ()=>/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.RenderingCancelledException,\n                    /* harmony export */ UnexpectedResponseException: ()=>/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.UnexpectedResponseException,\n                    /* harmony export */ Util: ()=>/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.Util,\n                    /* harmony export */ VerbosityLevel: ()=>/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.VerbosityLevel,\n                    /* harmony export */ XfaLayer: ()=>/* reexport safe */ _display_xfa_layer_js__WEBPACK_IMPORTED_MODULE_11__.XfaLayer,\n                    /* harmony export */ build: ()=>/* reexport safe */ _display_api_js__WEBPACK_IMPORTED_MODULE_1__.build,\n                    /* harmony export */ createValidAbsoluteUrl: ()=>/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.createValidAbsoluteUrl,\n                    /* harmony export */ fetchData: ()=>/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.fetchData,\n                    /* harmony export */ getDocument: ()=>/* reexport safe */ _display_api_js__WEBPACK_IMPORTED_MODULE_1__.getDocument,\n                    /* harmony export */ getFilenameFromUrl: ()=>/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.getFilenameFromUrl,\n                    /* harmony export */ getPdfFilenameFromUrl: ()=>/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.getPdfFilenameFromUrl,\n                    /* harmony export */ getXfaPageViewport: ()=>/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.getXfaPageViewport,\n                    /* harmony export */ isDataScheme: ()=>/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.isDataScheme,\n                    /* harmony export */ isPdfFile: ()=>/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.isPdfFile,\n                    /* harmony export */ noContextMenu: ()=>/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.noContextMenu,\n                    /* harmony export */ normalizeUnicode: ()=>/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.normalizeUnicode,\n                    /* harmony export */ renderTextLayer: ()=>/* reexport safe */ _display_text_layer_js__WEBPACK_IMPORTED_MODULE_3__.renderTextLayer,\n                    /* harmony export */ setLayerDimensions: ()=>/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.setLayerDimensions,\n                    /* harmony export */ shadow: ()=>/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow,\n                    /* harmony export */ updateTextLayer: ()=>/* reexport safe */ _display_text_layer_js__WEBPACK_IMPORTED_MODULE_3__.updateTextLayer,\n                    /* harmony export */ version: ()=>/* reexport safe */ _display_api_js__WEBPACK_IMPORTED_MODULE_1__.version\n                });\n                /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_780812__(266);\n                /* harmony import */ var _display_api_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_780812__(406);\n                /* harmony import */ var _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_780812__(473);\n                /* harmony import */ var _display_text_layer_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_780812__(739);\n                /* harmony import */ var _display_editor_annotation_editor_layer_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_780812__(629);\n                /* harmony import */ var _display_editor_tools_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_780812__(812);\n                /* harmony import */ var _display_annotation_layer_js__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_780812__(640);\n                /* harmony import */ var _display_editor_color_picker_js__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_780812__(97);\n                /* harmony import */ var _display_draw_layer_js__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_780812__(423);\n                /* harmony import */ var _display_worker_options_js__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_780812__(368);\n                /* harmony import */ var _display_editor_outliner_js__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_780812__(405);\n                /* harmony import */ var _display_xfa_layer_js__WEBPACK_IMPORTED_MODULE_11__ = __nested_webpack_require_780812__(160);\n                var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([\n                    _display_api_js__WEBPACK_IMPORTED_MODULE_1__\n                ]);\n                _display_api_js__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n                const pdfjsVersion = \"4.0.379\";\n                const pdfjsBuild = \"9e14d04fd\";\n                __webpack_async_result__();\n            } catch (e) {\n                __webpack_async_result__(e);\n            }\n        });\n    /***/ },\n    /***/ 694: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_790085__)=>{\n        /* harmony export */ __nested_webpack_require_790085__.d(__nested_webpack_exports__, {\n            /* harmony export */ MessageHandler: ()=>/* binding */ MessageHandler\n        });\n        /* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_790085__(266);\n        const CallbackKind = {\n            UNKNOWN: 0,\n            DATA: 1,\n            ERROR: 2\n        };\n        const StreamKind = {\n            UNKNOWN: 0,\n            CANCEL: 1,\n            CANCEL_COMPLETE: 2,\n            CLOSE: 3,\n            ENQUEUE: 4,\n            ERROR: 5,\n            PULL: 6,\n            PULL_COMPLETE: 7,\n            START_COMPLETE: 8\n        };\n        function wrapReason(reason) {\n            if (!(reason instanceof Error || typeof reason === \"object\" && reason !== null)) {\n                (0, _util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)('wrapReason: Expected \"reason\" to be a (possibly cloned) Error.');\n            }\n            switch(reason.name){\n                case \"AbortException\":\n                    return new _util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException(reason.message);\n                case \"MissingPDFException\":\n                    return new _util_js__WEBPACK_IMPORTED_MODULE_0__.MissingPDFException(reason.message);\n                case \"PasswordException\":\n                    return new _util_js__WEBPACK_IMPORTED_MODULE_0__.PasswordException(reason.message, reason.code);\n                case \"UnexpectedResponseException\":\n                    return new _util_js__WEBPACK_IMPORTED_MODULE_0__.UnexpectedResponseException(reason.message, reason.status);\n                case \"UnknownErrorException\":\n                    return new _util_js__WEBPACK_IMPORTED_MODULE_0__.UnknownErrorException(reason.message, reason.details);\n                default:\n                    return new _util_js__WEBPACK_IMPORTED_MODULE_0__.UnknownErrorException(reason.message, reason.toString());\n            }\n        }\n        class MessageHandler {\n            constructor(sourceName, targetName, comObj){\n                this.sourceName = sourceName;\n                this.targetName = targetName;\n                this.comObj = comObj;\n                this.callbackId = 1;\n                this.streamId = 1;\n                this.streamSinks = Object.create(null);\n                this.streamControllers = Object.create(null);\n                this.callbackCapabilities = Object.create(null);\n                this.actionHandler = Object.create(null);\n                this._onComObjOnMessage = (event)=>{\n                    const data = event.data;\n                    if (data.targetName !== this.sourceName) {\n                        return;\n                    }\n                    if (data.stream) {\n                        this.#processStreamMessage(data);\n                        return;\n                    }\n                    if (data.callback) {\n                        const callbackId = data.callbackId;\n                        const capability = this.callbackCapabilities[callbackId];\n                        if (!capability) {\n                            throw new Error(`Cannot resolve callback ${callbackId}`);\n                        }\n                        delete this.callbackCapabilities[callbackId];\n                        if (data.callback === CallbackKind.DATA) {\n                            capability.resolve(data.data);\n                        } else if (data.callback === CallbackKind.ERROR) {\n                            capability.reject(wrapReason(data.reason));\n                        } else {\n                            throw new Error(\"Unexpected callback case\");\n                        }\n                        return;\n                    }\n                    const action = this.actionHandler[data.action];\n                    if (!action) {\n                        throw new Error(`Unknown action from worker: ${data.action}`);\n                    }\n                    if (data.callbackId) {\n                        const cbSourceName = this.sourceName;\n                        const cbTargetName = data.sourceName;\n                        new Promise(function(resolve) {\n                            resolve(action(data.data));\n                        }).then(function(result) {\n                            comObj.postMessage({\n                                sourceName: cbSourceName,\n                                targetName: cbTargetName,\n                                callback: CallbackKind.DATA,\n                                callbackId: data.callbackId,\n                                data: result\n                            });\n                        }, function(reason) {\n                            comObj.postMessage({\n                                sourceName: cbSourceName,\n                                targetName: cbTargetName,\n                                callback: CallbackKind.ERROR,\n                                callbackId: data.callbackId,\n                                reason: wrapReason(reason)\n                            });\n                        });\n                        return;\n                    }\n                    if (data.streamId) {\n                        this.#createStreamSink(data);\n                        return;\n                    }\n                    action(data.data);\n                };\n                comObj.addEventListener(\"message\", this._onComObjOnMessage);\n            }\n            on(actionName, handler) {\n                const ah = this.actionHandler;\n                if (ah[actionName]) {\n                    throw new Error(`There is already an actionName called \"${actionName}\"`);\n                }\n                ah[actionName] = handler;\n            }\n            send(actionName, data, transfers) {\n                this.comObj.postMessage({\n                    sourceName: this.sourceName,\n                    targetName: this.targetName,\n                    action: actionName,\n                    data\n                }, transfers);\n            }\n            sendWithPromise(actionName, data, transfers) {\n                const callbackId = this.callbackId++;\n                const capability = new _util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                this.callbackCapabilities[callbackId] = capability;\n                try {\n                    this.comObj.postMessage({\n                        sourceName: this.sourceName,\n                        targetName: this.targetName,\n                        action: actionName,\n                        callbackId,\n                        data\n                    }, transfers);\n                } catch (ex) {\n                    capability.reject(ex);\n                }\n                return capability.promise;\n            }\n            sendWithStream(actionName, data, queueingStrategy, transfers) {\n                const streamId = this.streamId++, sourceName = this.sourceName, targetName = this.targetName, comObj = this.comObj;\n                return new ReadableStream({\n                    start: (controller)=>{\n                        const startCapability = new _util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                        this.streamControllers[streamId] = {\n                            controller,\n                            startCall: startCapability,\n                            pullCall: null,\n                            cancelCall: null,\n                            isClosed: false\n                        };\n                        comObj.postMessage({\n                            sourceName,\n                            targetName,\n                            action: actionName,\n                            streamId,\n                            data,\n                            desiredSize: controller.desiredSize\n                        }, transfers);\n                        return startCapability.promise;\n                    },\n                    pull: (controller)=>{\n                        const pullCapability = new _util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                        this.streamControllers[streamId].pullCall = pullCapability;\n                        comObj.postMessage({\n                            sourceName,\n                            targetName,\n                            stream: StreamKind.PULL,\n                            streamId,\n                            desiredSize: controller.desiredSize\n                        });\n                        return pullCapability.promise;\n                    },\n                    cancel: (reason)=>{\n                        (0, _util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(reason instanceof Error, \"cancel must have a valid reason\");\n                        const cancelCapability = new _util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                        this.streamControllers[streamId].cancelCall = cancelCapability;\n                        this.streamControllers[streamId].isClosed = true;\n                        comObj.postMessage({\n                            sourceName,\n                            targetName,\n                            stream: StreamKind.CANCEL,\n                            streamId,\n                            reason: wrapReason(reason)\n                        });\n                        return cancelCapability.promise;\n                    }\n                }, queueingStrategy);\n            }\n            #createStreamSink(data) {\n                const streamId = data.streamId, sourceName = this.sourceName, targetName = data.sourceName, comObj = this.comObj;\n                const self = this, action = this.actionHandler[data.action];\n                const streamSink = {\n                    enqueue (chunk, size = 1, transfers) {\n                        if (this.isCancelled) {\n                            return;\n                        }\n                        const lastDesiredSize = this.desiredSize;\n                        this.desiredSize -= size;\n                        if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n                            this.sinkCapability = new _util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\n                            this.ready = this.sinkCapability.promise;\n                        }\n                        comObj.postMessage({\n                            sourceName,\n                            targetName,\n                            stream: StreamKind.ENQUEUE,\n                            streamId,\n                            chunk\n                        }, transfers);\n                    },\n                    close () {\n                        if (this.isCancelled) {\n                            return;\n                        }\n                        this.isCancelled = true;\n                        comObj.postMessage({\n                            sourceName,\n                            targetName,\n                            stream: StreamKind.CLOSE,\n                            streamId\n                        });\n                        delete self.streamSinks[streamId];\n                    },\n                    error (reason) {\n                        (0, _util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(reason instanceof Error, \"error must have a valid reason\");\n                        if (this.isCancelled) {\n                            return;\n                        }\n                        this.isCancelled = true;\n                        comObj.postMessage({\n                            sourceName,\n                            targetName,\n                            stream: StreamKind.ERROR,\n                            streamId,\n                            reason: wrapReason(reason)\n                        });\n                    },\n                    sinkCapability: new _util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability(),\n                    onPull: null,\n                    onCancel: null,\n                    isCancelled: false,\n                    desiredSize: data.desiredSize,\n                    ready: null\n                };\n                streamSink.sinkCapability.resolve();\n                streamSink.ready = streamSink.sinkCapability.promise;\n                this.streamSinks[streamId] = streamSink;\n                new Promise(function(resolve) {\n                    resolve(action(data.data, streamSink));\n                }).then(function() {\n                    comObj.postMessage({\n                        sourceName,\n                        targetName,\n                        stream: StreamKind.START_COMPLETE,\n                        streamId,\n                        success: true\n                    });\n                }, function(reason) {\n                    comObj.postMessage({\n                        sourceName,\n                        targetName,\n                        stream: StreamKind.START_COMPLETE,\n                        streamId,\n                        reason: wrapReason(reason)\n                    });\n                });\n            }\n            #processStreamMessage(data) {\n                const streamId = data.streamId, sourceName = this.sourceName, targetName = data.sourceName, comObj = this.comObj;\n                const streamController = this.streamControllers[streamId], streamSink = this.streamSinks[streamId];\n                switch(data.stream){\n                    case StreamKind.START_COMPLETE:\n                        if (data.success) {\n                            streamController.startCall.resolve();\n                        } else {\n                            streamController.startCall.reject(wrapReason(data.reason));\n                        }\n                        break;\n                    case StreamKind.PULL_COMPLETE:\n                        if (data.success) {\n                            streamController.pullCall.resolve();\n                        } else {\n                            streamController.pullCall.reject(wrapReason(data.reason));\n                        }\n                        break;\n                    case StreamKind.PULL:\n                        if (!streamSink) {\n                            comObj.postMessage({\n                                sourceName,\n                                targetName,\n                                stream: StreamKind.PULL_COMPLETE,\n                                streamId,\n                                success: true\n                            });\n                            break;\n                        }\n                        if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {\n                            streamSink.sinkCapability.resolve();\n                        }\n                        streamSink.desiredSize = data.desiredSize;\n                        new Promise(function(resolve) {\n                            resolve(streamSink.onPull?.());\n                        }).then(function() {\n                            comObj.postMessage({\n                                sourceName,\n                                targetName,\n                                stream: StreamKind.PULL_COMPLETE,\n                                streamId,\n                                success: true\n                            });\n                        }, function(reason) {\n                            comObj.postMessage({\n                                sourceName,\n                                targetName,\n                                stream: StreamKind.PULL_COMPLETE,\n                                streamId,\n                                reason: wrapReason(reason)\n                            });\n                        });\n                        break;\n                    case StreamKind.ENQUEUE:\n                        (0, _util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(streamController, \"enqueue should have stream controller\");\n                        if (streamController.isClosed) {\n                            break;\n                        }\n                        streamController.controller.enqueue(data.chunk);\n                        break;\n                    case StreamKind.CLOSE:\n                        (0, _util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(streamController, \"close should have stream controller\");\n                        if (streamController.isClosed) {\n                            break;\n                        }\n                        streamController.isClosed = true;\n                        streamController.controller.close();\n                        this.#deleteStreamController(streamController, streamId);\n                        break;\n                    case StreamKind.ERROR:\n                        (0, _util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(streamController, \"error should have stream controller\");\n                        streamController.controller.error(wrapReason(data.reason));\n                        this.#deleteStreamController(streamController, streamId);\n                        break;\n                    case StreamKind.CANCEL_COMPLETE:\n                        if (data.success) {\n                            streamController.cancelCall.resolve();\n                        } else {\n                            streamController.cancelCall.reject(wrapReason(data.reason));\n                        }\n                        this.#deleteStreamController(streamController, streamId);\n                        break;\n                    case StreamKind.CANCEL:\n                        if (!streamSink) {\n                            break;\n                        }\n                        new Promise(function(resolve) {\n                            resolve(streamSink.onCancel?.(wrapReason(data.reason)));\n                        }).then(function() {\n                            comObj.postMessage({\n                                sourceName,\n                                targetName,\n                                stream: StreamKind.CANCEL_COMPLETE,\n                                streamId,\n                                success: true\n                            });\n                        }, function(reason) {\n                            comObj.postMessage({\n                                sourceName,\n                                targetName,\n                                stream: StreamKind.CANCEL_COMPLETE,\n                                streamId,\n                                reason: wrapReason(reason)\n                            });\n                        });\n                        streamSink.sinkCapability.reject(wrapReason(data.reason));\n                        streamSink.isCancelled = true;\n                        delete this.streamSinks[streamId];\n                        break;\n                    default:\n                        throw new Error(\"Unexpected stream case\");\n                }\n            }\n            async #deleteStreamController(streamController, streamId) {\n                await Promise.allSettled([\n                    streamController.startCall?.promise,\n                    streamController.pullCall?.promise,\n                    streamController.cancelCall?.promise\n                ]);\n                delete this.streamControllers[streamId];\n            }\n            destroy() {\n                this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n            }\n        }\n    /***/ },\n    /***/ 825: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_809492__)=>{\n        /* harmony export */ __nested_webpack_require_809492__.d(__nested_webpack_exports__, {\n            /* harmony export */ MurmurHash3_64: ()=>/* binding */ MurmurHash3_64\n        });\n        /* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_809492__(266);\n        const SEED = 0xc3d2e1f0;\n        const MASK_HIGH = 0xffff0000;\n        const MASK_LOW = 0xffff;\n        class MurmurHash3_64 {\n            constructor(seed){\n                this.h1 = seed ? seed & 0xffffffff : SEED;\n                this.h2 = seed ? seed & 0xffffffff : SEED;\n            }\n            update(input) {\n                let data, length;\n                if (typeof input === \"string\") {\n                    data = new Uint8Array(input.length * 2);\n                    length = 0;\n                    for(let i = 0, ii = input.length; i < ii; i++){\n                        const code = input.charCodeAt(i);\n                        if (code <= 0xff) {\n                            data[length++] = code;\n                        } else {\n                            data[length++] = code >>> 8;\n                            data[length++] = code & 0xff;\n                        }\n                    }\n                } else if ((0, _util_js__WEBPACK_IMPORTED_MODULE_0__.isArrayBuffer)(input)) {\n                    data = input.slice();\n                    length = data.byteLength;\n                } else {\n                    throw new Error(\"Wrong data format in MurmurHash3_64_update. \" + \"Input must be a string or array.\");\n                }\n                const blockCounts = length >> 2;\n                const tailLength = length - blockCounts * 4;\n                const dataUint32 = new Uint32Array(data.buffer, 0, blockCounts);\n                let k1 = 0, k2 = 0;\n                let h1 = this.h1, h2 = this.h2;\n                const C1 = 0xcc9e2d51, C2 = 0x1b873593;\n                const C1_LOW = C1 & MASK_LOW, C2_LOW = C2 & MASK_LOW;\n                for(let i = 0; i < blockCounts; i++){\n                    if (i & 1) {\n                        k1 = dataUint32[i];\n                        k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;\n                        k1 = k1 << 15 | k1 >>> 17;\n                        k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;\n                        h1 ^= k1;\n                        h1 = h1 << 13 | h1 >>> 19;\n                        h1 = h1 * 5 + 0xe6546b64;\n                    } else {\n                        k2 = dataUint32[i];\n                        k2 = k2 * C1 & MASK_HIGH | k2 * C1_LOW & MASK_LOW;\n                        k2 = k2 << 15 | k2 >>> 17;\n                        k2 = k2 * C2 & MASK_HIGH | k2 * C2_LOW & MASK_LOW;\n                        h2 ^= k2;\n                        h2 = h2 << 13 | h2 >>> 19;\n                        h2 = h2 * 5 + 0xe6546b64;\n                    }\n                }\n                k1 = 0;\n                switch(tailLength){\n                    case 3:\n                        k1 ^= data[blockCounts * 4 + 2] << 16;\n                    case 2:\n                        k1 ^= data[blockCounts * 4 + 1] << 8;\n                    case 1:\n                        k1 ^= data[blockCounts * 4];\n                        k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;\n                        k1 = k1 << 15 | k1 >>> 17;\n                        k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;\n                        if (blockCounts & 1) {\n                            h1 ^= k1;\n                        } else {\n                            h2 ^= k1;\n                        }\n                }\n                this.h1 = h1;\n                this.h2 = h2;\n            }\n            hexdigest() {\n                let h1 = this.h1, h2 = this.h2;\n                h1 ^= h2 >>> 1;\n                h1 = h1 * 0xed558ccd & MASK_HIGH | h1 * 0x8ccd & MASK_LOW;\n                h2 = h2 * 0xff51afd7 & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xafd7ed55 & MASK_HIGH) >>> 16;\n                h1 ^= h2 >>> 1;\n                h1 = h1 * 0x1a85ec53 & MASK_HIGH | h1 * 0xec53 & MASK_LOW;\n                h2 = h2 * 0xc4ceb9fe & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xb9fe1a85 & MASK_HIGH) >>> 16;\n                h1 ^= h2 >>> 1;\n                return (h1 >>> 0).toString(16).padStart(8, \"0\") + (h2 >>> 0).toString(16).padStart(8, \"0\");\n            }\n        }\n    /***/ },\n    /***/ 266: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_813926__)=>{\n        /* harmony export */ __nested_webpack_require_813926__.d(__nested_webpack_exports__, {\n            /* harmony export */ AbortException: ()=>/* binding */ AbortException,\n            /* harmony export */ AnnotationBorderStyleType: ()=>/* binding */ AnnotationBorderStyleType,\n            /* harmony export */ AnnotationEditorParamsType: ()=>/* binding */ AnnotationEditorParamsType,\n            /* harmony export */ AnnotationEditorPrefix: ()=>/* binding */ AnnotationEditorPrefix,\n            /* harmony export */ AnnotationEditorType: ()=>/* binding */ AnnotationEditorType,\n            /* harmony export */ AnnotationMode: ()=>/* binding */ AnnotationMode,\n            /* harmony export */ AnnotationPrefix: ()=>/* binding */ AnnotationPrefix,\n            /* harmony export */ AnnotationType: ()=>/* binding */ AnnotationType,\n            /* harmony export */ BaseException: ()=>/* binding */ BaseException,\n            /* harmony export */ CMapCompressionType: ()=>/* binding */ CMapCompressionType,\n            /* harmony export */ FONT_IDENTITY_MATRIX: ()=>/* binding */ FONT_IDENTITY_MATRIX,\n            /* harmony export */ FeatureTest: ()=>/* binding */ FeatureTest1,\n            /* harmony export */ FormatError: ()=>/* binding */ FormatError,\n            /* harmony export */ IDENTITY_MATRIX: ()=>/* binding */ IDENTITY_MATRIX,\n            /* harmony export */ ImageKind: ()=>/* binding */ ImageKind1,\n            /* harmony export */ InvalidPDFException: ()=>/* binding */ InvalidPDFException,\n            /* harmony export */ LINE_FACTOR: ()=>/* binding */ LINE_FACTOR,\n            /* harmony export */ MAX_IMAGE_SIZE_TO_CACHE: ()=>/* binding */ MAX_IMAGE_SIZE_TO_CACHE,\n            /* harmony export */ MissingPDFException: ()=>/* binding */ MissingPDFException,\n            /* harmony export */ OPS: ()=>/* binding */ OPS,\n            /* harmony export */ PasswordException: ()=>/* binding */ PasswordException,\n            /* harmony export */ PasswordResponses: ()=>/* binding */ PasswordResponses,\n            /* harmony export */ PermissionFlag: ()=>/* binding */ PermissionFlag,\n            /* harmony export */ PromiseCapability: ()=>/* binding */ PromiseCapability,\n            /* harmony export */ RenderingIntentFlag: ()=>/* binding */ RenderingIntentFlag,\n            /* harmony export */ TextRenderingMode: ()=>/* binding */ TextRenderingMode,\n            /* harmony export */ UnexpectedResponseException: ()=>/* binding */ UnexpectedResponseException,\n            /* harmony export */ UnknownErrorException: ()=>/* binding */ UnknownErrorException,\n            /* harmony export */ Util: ()=>/* binding */ Util,\n            /* harmony export */ VerbosityLevel: ()=>/* binding */ VerbosityLevel,\n            /* harmony export */ assert: ()=>/* binding */ assert,\n            /* harmony export */ bytesToString: ()=>/* binding */ bytesToString,\n            /* harmony export */ createValidAbsoluteUrl: ()=>/* binding */ createValidAbsoluteUrl,\n            /* harmony export */ getUuid: ()=>/* binding */ getUuid,\n            /* harmony export */ getVerbosityLevel: ()=>/* binding */ getVerbosityLevel,\n            /* harmony export */ info: ()=>/* binding */ info,\n            /* harmony export */ isArrayBuffer: ()=>/* binding */ isArrayBuffer,\n            /* harmony export */ isNodeJS: ()=>/* binding */ isNodeJS,\n            /* harmony export */ normalizeUnicode: ()=>/* binding */ normalizeUnicode,\n            /* harmony export */ objectFromMap: ()=>/* binding */ objectFromMap,\n            /* harmony export */ setVerbosityLevel: ()=>/* binding */ setVerbosityLevel,\n            /* harmony export */ shadow: ()=>/* binding */ shadow,\n            /* harmony export */ string32: ()=>/* binding */ string32,\n            /* harmony export */ stringToBytes: ()=>/* binding */ stringToBytes,\n            /* harmony export */ unreachable: ()=>/* binding */ unreachable,\n            /* harmony export */ warn: ()=>/* binding */ warn\n        });\n        /* unused harmony exports AnnotationActionEventType, AnnotationFieldFlag, AnnotationFlag, AnnotationReplyType, BASELINE_FACTOR, DocumentActionEventType, getModificationDate, isArrayEqual, LINE_DESCENT_FACTOR, objectSize, PageActionEventType, stringToPDFString, stringToUTF8String, utf8StringToString */ const isNodeJS = typeof process === \"object\" && process + \"\" === \"[object process]\" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== \"browser\");\n        const IDENTITY_MATRIX = [\n            1,\n            0,\n            0,\n            1,\n            0,\n            0\n        ];\n        const FONT_IDENTITY_MATRIX = [\n            0.001,\n            0,\n            0,\n            0.001,\n            0,\n            0\n        ];\n        const MAX_IMAGE_SIZE_TO_CACHE = 10e6;\n        const LINE_FACTOR = 1.35;\n        const LINE_DESCENT_FACTOR = 0.35;\n        const BASELINE_FACTOR = LINE_DESCENT_FACTOR / LINE_FACTOR;\n        const RenderingIntentFlag = {\n            ANY: 0x01,\n            DISPLAY: 0x02,\n            PRINT: 0x04,\n            SAVE: 0x08,\n            ANNOTATIONS_FORMS: 0x10,\n            ANNOTATIONS_STORAGE: 0x20,\n            ANNOTATIONS_DISABLE: 0x40,\n            OPLIST: 0x100\n        };\n        const AnnotationMode = {\n            DISABLE: 0,\n            ENABLE: 1,\n            ENABLE_FORMS: 2,\n            ENABLE_STORAGE: 3\n        };\n        const AnnotationEditorPrefix = \"pdfjs_internal_editor_\";\n        const AnnotationEditorType = {\n            DISABLE: -1,\n            NONE: 0,\n            FREETEXT: 3,\n            HIGHLIGHT: 9,\n            STAMP: 13,\n            INK: 15\n        };\n        const AnnotationEditorParamsType = {\n            RESIZE: 1,\n            CREATE: 2,\n            FREETEXT_SIZE: 11,\n            FREETEXT_COLOR: 12,\n            FREETEXT_OPACITY: 13,\n            INK_COLOR: 21,\n            INK_THICKNESS: 22,\n            INK_OPACITY: 23,\n            HIGHLIGHT_COLOR: 31,\n            HIGHLIGHT_DEFAULT_COLOR: 32\n        };\n        const PermissionFlag = {\n            PRINT: 0x04,\n            MODIFY_CONTENTS: 0x08,\n            COPY: 0x10,\n            MODIFY_ANNOTATIONS: 0x20,\n            FILL_INTERACTIVE_FORMS: 0x100,\n            COPY_FOR_ACCESSIBILITY: 0x200,\n            ASSEMBLE: 0x400,\n            PRINT_HIGH_QUALITY: 0x800\n        };\n        const TextRenderingMode = {\n            FILL: 0,\n            STROKE: 1,\n            FILL_STROKE: 2,\n            INVISIBLE: 3,\n            FILL_ADD_TO_PATH: 4,\n            STROKE_ADD_TO_PATH: 5,\n            FILL_STROKE_ADD_TO_PATH: 6,\n            ADD_TO_PATH: 7,\n            FILL_STROKE_MASK: 3,\n            ADD_TO_PATH_FLAG: 4\n        };\n        const ImageKind1 = {\n            GRAYSCALE_1BPP: 1,\n            RGB_24BPP: 2,\n            RGBA_32BPP: 3\n        };\n        const AnnotationType = {\n            TEXT: 1,\n            LINK: 2,\n            FREETEXT: 3,\n            LINE: 4,\n            SQUARE: 5,\n            CIRCLE: 6,\n            POLYGON: 7,\n            POLYLINE: 8,\n            HIGHLIGHT: 9,\n            UNDERLINE: 10,\n            SQUIGGLY: 11,\n            STRIKEOUT: 12,\n            STAMP: 13,\n            CARET: 14,\n            INK: 15,\n            POPUP: 16,\n            FILEATTACHMENT: 17,\n            SOUND: 18,\n            MOVIE: 19,\n            WIDGET: 20,\n            SCREEN: 21,\n            PRINTERMARK: 22,\n            TRAPNET: 23,\n            WATERMARK: 24,\n            THREED: 25,\n            REDACT: 26\n        };\n        const AnnotationReplyType = {\n            GROUP: \"Group\",\n            REPLY: \"R\"\n        };\n        const AnnotationFlag = {\n            INVISIBLE: 0x01,\n            HIDDEN: 0x02,\n            PRINT: 0x04,\n            NOZOOM: 0x08,\n            NOROTATE: 0x10,\n            NOVIEW: 0x20,\n            READONLY: 0x40,\n            LOCKED: 0x80,\n            TOGGLENOVIEW: 0x100,\n            LOCKEDCONTENTS: 0x200\n        };\n        const AnnotationFieldFlag = {\n            READONLY: 0x0000001,\n            REQUIRED: 0x0000002,\n            NOEXPORT: 0x0000004,\n            MULTILINE: 0x0001000,\n            PASSWORD: 0x0002000,\n            NOTOGGLETOOFF: 0x0004000,\n            RADIO: 0x0008000,\n            PUSHBUTTON: 0x0010000,\n            COMBO: 0x0020000,\n            EDIT: 0x0040000,\n            SORT: 0x0080000,\n            FILESELECT: 0x0100000,\n            MULTISELECT: 0x0200000,\n            DONOTSPELLCHECK: 0x0400000,\n            DONOTSCROLL: 0x0800000,\n            COMB: 0x1000000,\n            RICHTEXT: 0x2000000,\n            RADIOSINUNISON: 0x2000000,\n            COMMITONSELCHANGE: 0x4000000\n        };\n        const AnnotationBorderStyleType = {\n            SOLID: 1,\n            DASHED: 2,\n            BEVELED: 3,\n            INSET: 4,\n            UNDERLINE: 5\n        };\n        const AnnotationActionEventType = {\n            E: \"Mouse Enter\",\n            X: \"Mouse Exit\",\n            D: \"Mouse Down\",\n            U: \"Mouse Up\",\n            Fo: \"Focus\",\n            Bl: \"Blur\",\n            PO: \"PageOpen\",\n            PC: \"PageClose\",\n            PV: \"PageVisible\",\n            PI: \"PageInvisible\",\n            K: \"Keystroke\",\n            F: \"Format\",\n            V: \"Validate\",\n            C: \"Calculate\"\n        };\n        const DocumentActionEventType = {\n            WC: \"WillClose\",\n            WS: \"WillSave\",\n            DS: \"DidSave\",\n            WP: \"WillPrint\",\n            DP: \"DidPrint\"\n        };\n        const PageActionEventType = {\n            O: \"PageOpen\",\n            C: \"PageClose\"\n        };\n        const VerbosityLevel = {\n            ERRORS: 0,\n            WARNINGS: 1,\n            INFOS: 5\n        };\n        const CMapCompressionType = {\n            NONE: 0,\n            BINARY: 1\n        };\n        const OPS = {\n            dependency: 1,\n            setLineWidth: 2,\n            setLineCap: 3,\n            setLineJoin: 4,\n            setMiterLimit: 5,\n            setDash: 6,\n            setRenderingIntent: 7,\n            setFlatness: 8,\n            setGState: 9,\n            save: 10,\n            restore: 11,\n            transform: 12,\n            moveTo: 13,\n            lineTo: 14,\n            curveTo: 15,\n            curveTo2: 16,\n            curveTo3: 17,\n            closePath: 18,\n            rectangle: 19,\n            stroke: 20,\n            closeStroke: 21,\n            fill: 22,\n            eoFill: 23,\n            fillStroke: 24,\n            eoFillStroke: 25,\n            closeFillStroke: 26,\n            closeEOFillStroke: 27,\n            endPath: 28,\n            clip: 29,\n            eoClip: 30,\n            beginText: 31,\n            endText: 32,\n            setCharSpacing: 33,\n            setWordSpacing: 34,\n            setHScale: 35,\n            setLeading: 36,\n            setFont: 37,\n            setTextRenderingMode: 38,\n            setTextRise: 39,\n            moveText: 40,\n            setLeadingMoveText: 41,\n            setTextMatrix: 42,\n            nextLine: 43,\n            showText: 44,\n            showSpacedText: 45,\n            nextLineShowText: 46,\n            nextLineSetSpacingShowText: 47,\n            setCharWidth: 48,\n            setCharWidthAndBounds: 49,\n            setStrokeColorSpace: 50,\n            setFillColorSpace: 51,\n            setStrokeColor: 52,\n            setStrokeColorN: 53,\n            setFillColor: 54,\n            setFillColorN: 55,\n            setStrokeGray: 56,\n            setFillGray: 57,\n            setStrokeRGBColor: 58,\n            setFillRGBColor: 59,\n            setStrokeCMYKColor: 60,\n            setFillCMYKColor: 61,\n            shadingFill: 62,\n            beginInlineImage: 63,\n            beginImageData: 64,\n            endInlineImage: 65,\n            paintXObject: 66,\n            markPoint: 67,\n            markPointProps: 68,\n            beginMarkedContent: 69,\n            beginMarkedContentProps: 70,\n            endMarkedContent: 71,\n            beginCompat: 72,\n            endCompat: 73,\n            paintFormXObjectBegin: 74,\n            paintFormXObjectEnd: 75,\n            beginGroup: 76,\n            endGroup: 77,\n            beginAnnotation: 80,\n            endAnnotation: 81,\n            paintImageMaskXObject: 83,\n            paintImageMaskXObjectGroup: 84,\n            paintImageXObject: 85,\n            paintInlineImageXObject: 86,\n            paintInlineImageXObjectGroup: 87,\n            paintImageXObjectRepeat: 88,\n            paintImageMaskXObjectRepeat: 89,\n            paintSolidColorImageMask: 90,\n            constructPath: 91\n        };\n        const PasswordResponses = {\n            NEED_PASSWORD: 1,\n            INCORRECT_PASSWORD: 2\n        };\n        let verbosity = VerbosityLevel.WARNINGS;\n        function setVerbosityLevel(level) {\n            if (Number.isInteger(level)) {\n                verbosity = level;\n            }\n        }\n        function getVerbosityLevel() {\n            return verbosity;\n        }\n        function info(msg) {\n            if (verbosity >= VerbosityLevel.INFOS) {\n                console.log(`Info: ${msg}`);\n            }\n        }\n        function warn(msg) {\n            if (verbosity >= VerbosityLevel.WARNINGS) {\n                console.log(`Warning: ${msg}`);\n            }\n        }\n        function unreachable(msg) {\n            throw new Error(msg);\n        }\n        function assert(cond, msg) {\n            if (!cond) {\n                unreachable(msg);\n            }\n        }\n        function _isValidProtocol(url) {\n            switch(url?.protocol){\n                case \"http:\":\n                case \"https:\":\n                case \"ftp:\":\n                case \"mailto:\":\n                case \"tel:\":\n                    return true;\n                default:\n                    return false;\n            }\n        }\n        function createValidAbsoluteUrl(url, baseUrl = null, options = null) {\n            if (!url) {\n                return null;\n            }\n            try {\n                if (options && typeof url === \"string\") {\n                    if (options.addDefaultProtocol && url.startsWith(\"www.\")) {\n                        const dots = url.match(/\\./g);\n                        if (dots?.length >= 2) {\n                            url = `http://${url}`;\n                        }\n                    }\n                    if (options.tryConvertEncoding) {\n                        try {\n                            url = stringToUTF8String(url);\n                        } catch  {}\n                    }\n                }\n                const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n                if (_isValidProtocol(absoluteUrl)) {\n                    return absoluteUrl;\n                }\n            } catch  {}\n            return null;\n        }\n        function shadow(obj, prop, value, nonSerializable = false) {\n            Object.defineProperty(obj, prop, {\n                value,\n                enumerable: !nonSerializable,\n                configurable: true,\n                writable: false\n            });\n            return value;\n        }\n        const BaseException = function BaseExceptionClosure() {\n            function BaseException(message, name) {\n                if (this.constructor === BaseException) {\n                    unreachable(\"Cannot initialize BaseException.\");\n                }\n                this.message = message;\n                this.name = name;\n            }\n            BaseException.prototype = new Error();\n            BaseException.constructor = BaseException;\n            return BaseException;\n        }();\n        class PasswordException extends BaseException {\n            constructor(msg, code){\n                super(msg, \"PasswordException\");\n                this.code = code;\n            }\n        }\n        class UnknownErrorException extends BaseException {\n            constructor(msg, details){\n                super(msg, \"UnknownErrorException\");\n                this.details = details;\n            }\n        }\n        class InvalidPDFException extends BaseException {\n            constructor(msg){\n                super(msg, \"InvalidPDFException\");\n            }\n        }\n        class MissingPDFException extends BaseException {\n            constructor(msg){\n                super(msg, \"MissingPDFException\");\n            }\n        }\n        class UnexpectedResponseException extends BaseException {\n            constructor(msg, status){\n                super(msg, \"UnexpectedResponseException\");\n                this.status = status;\n            }\n        }\n        class FormatError extends BaseException {\n            constructor(msg){\n                super(msg, \"FormatError\");\n            }\n        }\n        class AbortException extends BaseException {\n            constructor(msg){\n                super(msg, \"AbortException\");\n            }\n        }\n        function bytesToString(bytes) {\n            if (typeof bytes !== \"object\" || bytes?.length === undefined) {\n                unreachable(\"Invalid argument for bytesToString\");\n            }\n            const length = bytes.length;\n            const MAX_ARGUMENT_COUNT = 8192;\n            if (length < MAX_ARGUMENT_COUNT) {\n                return String.fromCharCode.apply(null, bytes);\n            }\n            const strBuf = [];\n            for(let i = 0; i < length; i += MAX_ARGUMENT_COUNT){\n                const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n                const chunk = bytes.subarray(i, chunkEnd);\n                strBuf.push(String.fromCharCode.apply(null, chunk));\n            }\n            return strBuf.join(\"\");\n        }\n        function stringToBytes(str) {\n            if (typeof str !== \"string\") {\n                unreachable(\"Invalid argument for stringToBytes\");\n            }\n            const length = str.length;\n            const bytes = new Uint8Array(length);\n            for(let i = 0; i < length; ++i){\n                bytes[i] = str.charCodeAt(i) & 0xff;\n            }\n            return bytes;\n        }\n        function string32(value) {\n            return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n        }\n        function objectSize(obj) {\n            return Object.keys(obj).length;\n        }\n        function objectFromMap(map) {\n            const obj = Object.create(null);\n            for (const [key, value] of map){\n                obj[key] = value;\n            }\n            return obj;\n        }\n        function isLittleEndian() {\n            const buffer8 = new Uint8Array(4);\n            buffer8[0] = 1;\n            const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n            return view32[0] === 1;\n        }\n        function isEvalSupported() {\n            try {\n                new Function(\"\");\n                return true;\n            } catch  {\n                return false;\n            }\n        }\n        class FeatureTest1 {\n            static get isLittleEndian() {\n                return shadow(this, \"isLittleEndian\", isLittleEndian());\n            }\n            static get isEvalSupported() {\n                return shadow(this, \"isEvalSupported\", isEvalSupported());\n            }\n            static get isOffscreenCanvasSupported() {\n                return shadow(this, \"isOffscreenCanvasSupported\", typeof OffscreenCanvas !== \"undefined\");\n            }\n            static get platform() {\n                if (typeof navigator !== \"undefined\" && typeof navigator?.platform === \"string\") {\n                    return shadow(this, \"platform\", {\n                        isMac: navigator.platform.includes(\"Mac\")\n                    });\n                }\n                return shadow(this, \"platform\", {\n                    isMac: false\n                });\n            }\n            static get isCSSRoundSupported() {\n                return shadow(this, \"isCSSRoundSupported\", globalThis.CSS?.supports?.(\"width: round(1.5px, 1px)\"));\n            }\n        }\n        const hexNumbers = [\n            ...Array(256).keys()\n        ].map((n)=>n.toString(16).padStart(2, \"0\"));\n        class Util {\n            static makeHexColor(r, g, b) {\n                return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n            }\n            static scaleMinMax(transform, minMax) {\n                let temp;\n                if (transform[0]) {\n                    if (transform[0] < 0) {\n                        temp = minMax[0];\n                        minMax[0] = minMax[1];\n                        minMax[1] = temp;\n                    }\n                    minMax[0] *= transform[0];\n                    minMax[1] *= transform[0];\n                    if (transform[3] < 0) {\n                        temp = minMax[2];\n                        minMax[2] = minMax[3];\n                        minMax[3] = temp;\n                    }\n                    minMax[2] *= transform[3];\n                    minMax[3] *= transform[3];\n                } else {\n                    temp = minMax[0];\n                    minMax[0] = minMax[2];\n                    minMax[2] = temp;\n                    temp = minMax[1];\n                    minMax[1] = minMax[3];\n                    minMax[3] = temp;\n                    if (transform[1] < 0) {\n                        temp = minMax[2];\n                        minMax[2] = minMax[3];\n                        minMax[3] = temp;\n                    }\n                    minMax[2] *= transform[1];\n                    minMax[3] *= transform[1];\n                    if (transform[2] < 0) {\n                        temp = minMax[0];\n                        minMax[0] = minMax[1];\n                        minMax[1] = temp;\n                    }\n                    minMax[0] *= transform[2];\n                    minMax[1] *= transform[2];\n                }\n                minMax[0] += transform[4];\n                minMax[1] += transform[4];\n                minMax[2] += transform[5];\n                minMax[3] += transform[5];\n            }\n            static transform(m1, m2) {\n                return [\n                    m1[0] * m2[0] + m1[2] * m2[1],\n                    m1[1] * m2[0] + m1[3] * m2[1],\n                    m1[0] * m2[2] + m1[2] * m2[3],\n                    m1[1] * m2[2] + m1[3] * m2[3],\n                    m1[0] * m2[4] + m1[2] * m2[5] + m1[4],\n                    m1[1] * m2[4] + m1[3] * m2[5] + m1[5]\n                ];\n            }\n            static applyTransform(p, m) {\n                const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n                const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n                return [\n                    xt,\n                    yt\n                ];\n            }\n            static applyInverseTransform(p, m) {\n                const d = m[0] * m[3] - m[1] * m[2];\n                const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n                const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n                return [\n                    xt,\n                    yt\n                ];\n            }\n            static getAxialAlignedBoundingBox(r, m) {\n                const p1 = this.applyTransform(r, m);\n                const p2 = this.applyTransform(r.slice(2, 4), m);\n                const p3 = this.applyTransform([\n                    r[0],\n                    r[3]\n                ], m);\n                const p4 = this.applyTransform([\n                    r[2],\n                    r[1]\n                ], m);\n                return [\n                    Math.min(p1[0], p2[0], p3[0], p4[0]),\n                    Math.min(p1[1], p2[1], p3[1], p4[1]),\n                    Math.max(p1[0], p2[0], p3[0], p4[0]),\n                    Math.max(p1[1], p2[1], p3[1], p4[1])\n                ];\n            }\n            static inverseTransform(m) {\n                const d = m[0] * m[3] - m[1] * m[2];\n                return [\n                    m[3] / d,\n                    -m[1] / d,\n                    -m[2] / d,\n                    m[0] / d,\n                    (m[2] * m[5] - m[4] * m[3]) / d,\n                    (m[4] * m[1] - m[5] * m[0]) / d\n                ];\n            }\n            static singularValueDecompose2dScale(m) {\n                const transpose = [\n                    m[0],\n                    m[2],\n                    m[1],\n                    m[3]\n                ];\n                const a = m[0] * transpose[0] + m[1] * transpose[2];\n                const b = m[0] * transpose[1] + m[1] * transpose[3];\n                const c = m[2] * transpose[0] + m[3] * transpose[2];\n                const d = m[2] * transpose[1] + m[3] * transpose[3];\n                const first = (a + d) / 2;\n                const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;\n                const sx = first + second || 1;\n                const sy = first - second || 1;\n                return [\n                    Math.sqrt(sx),\n                    Math.sqrt(sy)\n                ];\n            }\n            static normalizeRect(rect) {\n                const r = rect.slice(0);\n                if (rect[0] > rect[2]) {\n                    r[0] = rect[2];\n                    r[2] = rect[0];\n                }\n                if (rect[1] > rect[3]) {\n                    r[1] = rect[3];\n                    r[3] = rect[1];\n                }\n                return r;\n            }\n            static intersect(rect1, rect2) {\n                const xLow = Math.max(Math.min(rect1[0], rect1[2]), Math.min(rect2[0], rect2[2]));\n                const xHigh = Math.min(Math.max(rect1[0], rect1[2]), Math.max(rect2[0], rect2[2]));\n                if (xLow > xHigh) {\n                    return null;\n                }\n                const yLow = Math.max(Math.min(rect1[1], rect1[3]), Math.min(rect2[1], rect2[3]));\n                const yHigh = Math.min(Math.max(rect1[1], rect1[3]), Math.max(rect2[1], rect2[3]));\n                if (yLow > yHigh) {\n                    return null;\n                }\n                return [\n                    xLow,\n                    yLow,\n                    xHigh,\n                    yHigh\n                ];\n            }\n            static bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3) {\n                const tvalues = [], bounds = [\n                    [],\n                    []\n                ];\n                let a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n                for(let i = 0; i < 2; ++i){\n                    if (i === 0) {\n                        b = 6 * x0 - 12 * x1 + 6 * x2;\n                        a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n                        c = 3 * x1 - 3 * x0;\n                    } else {\n                        b = 6 * y0 - 12 * y1 + 6 * y2;\n                        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n                        c = 3 * y1 - 3 * y0;\n                    }\n                    if (Math.abs(a) < 1e-12) {\n                        if (Math.abs(b) < 1e-12) {\n                            continue;\n                        }\n                        t = -c / b;\n                        if (0 < t && t < 1) {\n                            tvalues.push(t);\n                        }\n                        continue;\n                    }\n                    b2ac = b * b - 4 * c * a;\n                    sqrtb2ac = Math.sqrt(b2ac);\n                    if (b2ac < 0) {\n                        continue;\n                    }\n                    t1 = (-b + sqrtb2ac) / (2 * a);\n                    if (0 < t1 && t1 < 1) {\n                        tvalues.push(t1);\n                    }\n                    t2 = (-b - sqrtb2ac) / (2 * a);\n                    if (0 < t2 && t2 < 1) {\n                        tvalues.push(t2);\n                    }\n                }\n                let j = tvalues.length, mt;\n                const jlen = j;\n                while(j--){\n                    t = tvalues[j];\n                    mt = 1 - t;\n                    bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n                    bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n                }\n                bounds[0][jlen] = x0;\n                bounds[1][jlen] = y0;\n                bounds[0][jlen + 1] = x3;\n                bounds[1][jlen + 1] = y3;\n                bounds[0].length = bounds[1].length = jlen + 2;\n                return [\n                    Math.min(...bounds[0]),\n                    Math.min(...bounds[1]),\n                    Math.max(...bounds[0]),\n                    Math.max(...bounds[1])\n                ];\n            }\n        }\n        const PDFStringTranslateTable = /* unused pure expression or super */ null && 0;\n        function stringToPDFString(str) {\n            if (str[0] >= \"\\xef\") {\n                let encoding;\n                if (str[0] === \"\\xfe\" && str[1] === \"\\xff\") {\n                    encoding = \"utf-16be\";\n                    if (str.length % 2 === 1) {\n                        str = str.slice(0, -1);\n                    }\n                } else if (str[0] === \"\\xff\" && str[1] === \"\\xfe\") {\n                    encoding = \"utf-16le\";\n                    if (str.length % 2 === 1) {\n                        str = str.slice(0, -1);\n                    }\n                } else if (str[0] === \"\\xef\" && str[1] === \"\\xbb\" && str[2] === \"\\xbf\") {\n                    encoding = \"utf-8\";\n                }\n                if (encoding) {\n                    try {\n                        const decoder = new TextDecoder(encoding, {\n                            fatal: true\n                        });\n                        const buffer = stringToBytes(str);\n                        const decoded = decoder.decode(buffer);\n                        if (!decoded.includes(\"\\x1b\")) {\n                            return decoded;\n                        }\n                        return decoded.replaceAll(/\\x1b[^\\x1b]*(?:\\x1b|$)/g, \"\");\n                    } catch (ex) {\n                        warn(`stringToPDFString: \"${ex}\".`);\n                    }\n                }\n            }\n            const strBuf = [];\n            for(let i = 0, ii = str.length; i < ii; i++){\n                const charCode = str.charCodeAt(i);\n                if (charCode === 0x1b) {\n                    while(++i < ii && str.charCodeAt(i) !== 0x1b){}\n                    continue;\n                }\n                const code = PDFStringTranslateTable[charCode];\n                strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n            }\n            return strBuf.join(\"\");\n        }\n        function stringToUTF8String(str) {\n            return decodeURIComponent(escape(str));\n        }\n        function utf8StringToString(str) {\n            return unescape(encodeURIComponent(str));\n        }\n        function isArrayBuffer(v) {\n            return typeof v === \"object\" && v?.byteLength !== undefined;\n        }\n        function isArrayEqual(arr1, arr2) {\n            if (arr1.length !== arr2.length) {\n                return false;\n            }\n            for(let i = 0, ii = arr1.length; i < ii; i++){\n                if (arr1[i] !== arr2[i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        function getModificationDate(date = new Date()) {\n            const buffer = [\n                date.getUTCFullYear().toString(),\n                (date.getUTCMonth() + 1).toString().padStart(2, \"0\"),\n                date.getUTCDate().toString().padStart(2, \"0\"),\n                date.getUTCHours().toString().padStart(2, \"0\"),\n                date.getUTCMinutes().toString().padStart(2, \"0\"),\n                date.getUTCSeconds().toString().padStart(2, \"0\")\n            ];\n            return buffer.join(\"\");\n        }\n        class PromiseCapability {\n            #settled;\n            constructor(){\n                this.#settled = false;\n                this.promise = new Promise((resolve, reject)=>{\n                    this.resolve = (data)=>{\n                        this.#settled = true;\n                        resolve(data);\n                    };\n                    this.reject = (reason)=>{\n                        this.#settled = true;\n                        reject(reason);\n                    };\n                });\n            }\n            get settled() {\n                return this.#settled;\n            }\n        }\n        let NormalizeRegex = null;\n        let NormalizationMap = null;\n        function normalizeUnicode(str) {\n            if (!NormalizeRegex) {\n                NormalizeRegex = /([\\u00a0\\u00b5\\u037e\\u0eb3\\u2000-\\u200a\\u202f\\u2126\\ufb00-\\ufb04\\ufb06\\ufb20-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufba1\\ufba4-\\ufba9\\ufbae-\\ufbb1\\ufbd3-\\ufbdc\\ufbde-\\ufbe7\\ufbea-\\ufbf8\\ufbfc-\\ufbfd\\ufc00-\\ufc5d\\ufc64-\\ufcf1\\ufcf5-\\ufd3d\\ufd88\\ufdf4\\ufdfa-\\ufdfb\\ufe71\\ufe77\\ufe79\\ufe7b\\ufe7d]+)|(\\ufb05+)/gu;\n                NormalizationMap = new Map([\n                    [\n                        \"ﬅ\",\n                        \"ſt\"\n                    ]\n                ]);\n            }\n            return str.replaceAll(NormalizeRegex, (_, p1, p2)=>{\n                return p1 ? p1.normalize(\"NFKC\") : NormalizationMap.get(p2);\n            });\n        }\n        function getUuid() {\n            if (typeof crypto !== \"undefined\" && typeof crypto?.randomUUID === \"function\") {\n                return crypto.randomUUID();\n            }\n            const buf = new Uint8Array(32);\n            if (typeof crypto !== \"undefined\" && typeof crypto?.getRandomValues === \"function\") {\n                crypto.getRandomValues(buf);\n            } else {\n                for(let i = 0; i < 32; i++){\n                    buf[i] = Math.floor(Math.random() * 255);\n                }\n            }\n            return bytesToString(buf);\n        }\n        const AnnotationPrefix = \"pdfjs_internal_id_\";\n    /***/ }\n};\n/************************************************************************/ /******/ // The module cache\n/******/ var __webpack_module_cache__ = {};\n/******/ /******/ // The require function\n/******/ function __nested_webpack_require_850537__(moduleId) {\n    /******/ // Check if module is in cache\n    /******/ var cachedModule = __webpack_module_cache__[moduleId];\n    /******/ if (cachedModule !== undefined) {\n        /******/ return cachedModule.exports;\n    /******/ }\n    /******/ // Create a new module (and put it into the cache)\n    /******/ var module = __webpack_module_cache__[moduleId] = {\n        /******/ // no module.id needed\n        /******/ // no module.loaded needed\n        /******/ exports: {}\n    };\n    /******/ /******/ // Execute the module function\n    /******/ __webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_850537__);\n    /******/ /******/ // Return the exports of the module\n    /******/ return module.exports;\n/******/ }\n/******/ /************************************************************************/ /******/ /* webpack/runtime/async module */ /******/ (()=>{\n    /******/ var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\n    /******/ var webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\n    /******/ var webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\n    /******/ var resolveQueue = (queue)=>{\n        /******/ if (queue && queue.d < 1) {\n            /******/ queue.d = 1;\n            /******/ queue.forEach((fn)=>fn.r--);\n            /******/ queue.forEach((fn)=>fn.r-- ? fn.r++ : fn());\n        /******/ }\n    /******/ };\n    /******/ var wrapDeps = (deps)=>deps.map((dep)=>{\n            /******/ if (dep !== null && typeof dep === \"object\") {\n                /******/ if (dep[webpackQueues]) return dep;\n                /******/ if (dep.then) {\n                    /******/ var queue = [];\n                    /******/ queue.d = 0;\n                    /******/ dep.then((r)=>{\n                        /******/ obj[webpackExports] = r;\n                        /******/ resolveQueue(queue);\n                    /******/ }, (e)=>{\n                        /******/ obj[webpackError] = e;\n                        /******/ resolveQueue(queue);\n                    /******/ });\n                    /******/ var obj = {};\n                    /******/ obj[webpackQueues] = (fn)=>fn(queue);\n                    /******/ return obj;\n                /******/ }\n            /******/ }\n            /******/ var ret = {};\n            /******/ ret[webpackQueues] = (x)=>{};\n            /******/ ret[webpackExports] = dep;\n            /******/ return ret;\n        /******/ });\n    /******/ __nested_webpack_require_850537__.a = (module, body, hasAwait)=>{\n        /******/ var queue;\n        /******/ hasAwait && ((queue = []).d = -1);\n        /******/ var depQueues = new Set();\n        /******/ var exports = module.exports;\n        /******/ var currentDeps;\n        /******/ var outerResolve;\n        /******/ var reject;\n        /******/ var promise = new Promise((resolve, rej)=>{\n            /******/ reject = rej;\n            /******/ outerResolve = resolve;\n        /******/ });\n        /******/ promise[webpackExports] = exports;\n        /******/ promise[webpackQueues] = (fn)=>(queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"]((x)=>{}));\n        /******/ module.exports = promise;\n        /******/ body((deps)=>{\n            /******/ currentDeps = wrapDeps(deps);\n            /******/ var fn;\n            /******/ var getResult = ()=>currentDeps.map((d)=>{\n                    /******/ if (d[webpackError]) throw d[webpackError];\n                    /******/ return d[webpackExports];\n                /******/ });\n            /******/ var promise = new Promise((resolve)=>{\n                /******/ fn = ()=>resolve(getResult);\n                /******/ fn.r = 0;\n                /******/ var fnQueue = (q)=>q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn)));\n                /******/ currentDeps.map((dep)=>dep[webpackQueues](fnQueue));\n            /******/ });\n            /******/ return fn.r ? promise : getResult();\n        /******/ }, (err)=>(err ? reject(promise[webpackError] = err) : outerResolve(exports), resolveQueue(queue)));\n        /******/ queue && queue.d < 0 && (queue.d = 0);\n    /******/ };\n/******/ })();\n/******/ /******/ /* webpack/runtime/define property getters */ /******/ (()=>{\n    /******/ // define getter functions for harmony exports\n    /******/ __nested_webpack_require_850537__.d = (exports, definition)=>{\n        /******/ for(var key in definition){\n            /******/ if (__nested_webpack_require_850537__.o(definition, key) && !__nested_webpack_require_850537__.o(exports, key)) {\n                /******/ Object.defineProperty(exports, key, {\n                    enumerable: true,\n                    get: definition[key]\n                });\n            /******/ }\n        /******/ }\n    /******/ };\n/******/ })();\n/******/ /******/ /* webpack/runtime/hasOwnProperty shorthand */ /******/ (()=>{\n    /******/ __nested_webpack_require_850537__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);\n/******/ })();\n/******/ /************************************************************************/ /******/ /******/ // startup\n/******/ // Load entry module and return exports\n/******/ // This entry module used 'module' so it can't be inlined\n/******/ var __nested_webpack_exports__ = __nested_webpack_require_850537__(907);\n/******/ __nested_webpack_exports__ = globalThis.pdfjsLib = await (globalThis.pdfjsLibPromise = __nested_webpack_exports__);\n/******/ var __webpack_exports__AbortException = __nested_webpack_exports__.AbortException;\n/******/ var __webpack_exports__AnnotationEditorLayer = __nested_webpack_exports__.AnnotationEditorLayer;\n/******/ var __webpack_exports__AnnotationEditorParamsType = __nested_webpack_exports__.AnnotationEditorParamsType;\n/******/ var __webpack_exports__AnnotationEditorType = __nested_webpack_exports__.AnnotationEditorType;\n/******/ var __webpack_exports__AnnotationEditorUIManager = __nested_webpack_exports__.AnnotationEditorUIManager;\n/******/ var __webpack_exports__AnnotationLayer = __nested_webpack_exports__.AnnotationLayer;\n/******/ var __webpack_exports__AnnotationMode = __nested_webpack_exports__.AnnotationMode;\n/******/ var __webpack_exports__CMapCompressionType = __nested_webpack_exports__.CMapCompressionType;\n/******/ var __webpack_exports__ColorPicker = __nested_webpack_exports__.ColorPicker;\n/******/ var __webpack_exports__DOMSVGFactory = __nested_webpack_exports__.DOMSVGFactory;\n/******/ var __webpack_exports__DrawLayer = __nested_webpack_exports__.DrawLayer;\n/******/ var __webpack_exports__FeatureTest = __nested_webpack_exports__.FeatureTest;\n/******/ var __webpack_exports__GlobalWorkerOptions = __nested_webpack_exports__.GlobalWorkerOptions;\n/******/ var __webpack_exports__ImageKind = __nested_webpack_exports__.ImageKind;\n/******/ var __webpack_exports__InvalidPDFException = __nested_webpack_exports__.InvalidPDFException;\n/******/ var __webpack_exports__MissingPDFException = __nested_webpack_exports__.MissingPDFException;\n/******/ var __webpack_exports__OPS = __nested_webpack_exports__.OPS;\n/******/ var __webpack_exports__Outliner = __nested_webpack_exports__.Outliner;\n/******/ var __webpack_exports__PDFDataRangeTransport = __nested_webpack_exports__.PDFDataRangeTransport;\n/******/ var __webpack_exports__PDFDateString = __nested_webpack_exports__.PDFDateString;\n/******/ var __webpack_exports__PDFWorker = __nested_webpack_exports__.PDFWorker;\n/******/ var __webpack_exports__PasswordResponses = __nested_webpack_exports__.PasswordResponses;\n/******/ var __webpack_exports__PermissionFlag = __nested_webpack_exports__.PermissionFlag;\n/******/ var __webpack_exports__PixelsPerInch = __nested_webpack_exports__.PixelsPerInch;\n/******/ var __webpack_exports__PromiseCapability = __nested_webpack_exports__.PromiseCapability;\n/******/ var __webpack_exports__RenderingCancelledException = __nested_webpack_exports__.RenderingCancelledException;\n/******/ var __webpack_exports__UnexpectedResponseException = __nested_webpack_exports__.UnexpectedResponseException;\n/******/ var __webpack_exports__Util = __nested_webpack_exports__.Util;\n/******/ var __webpack_exports__VerbosityLevel = __nested_webpack_exports__.VerbosityLevel;\n/******/ var __webpack_exports__XfaLayer = __nested_webpack_exports__.XfaLayer;\n/******/ var __webpack_exports__build = __nested_webpack_exports__.build;\n/******/ var __webpack_exports__createValidAbsoluteUrl = __nested_webpack_exports__.createValidAbsoluteUrl;\n/******/ var __webpack_exports__fetchData = __nested_webpack_exports__.fetchData;\n/******/ var __webpack_exports__getDocument = __nested_webpack_exports__.getDocument;\n/******/ var __webpack_exports__getFilenameFromUrl = __nested_webpack_exports__.getFilenameFromUrl;\n/******/ var __webpack_exports__getPdfFilenameFromUrl = __nested_webpack_exports__.getPdfFilenameFromUrl;\n/******/ var __webpack_exports__getXfaPageViewport = __nested_webpack_exports__.getXfaPageViewport;\n/******/ var __webpack_exports__isDataScheme = __nested_webpack_exports__.isDataScheme;\n/******/ var __webpack_exports__isPdfFile = __nested_webpack_exports__.isPdfFile;\n/******/ var __webpack_exports__noContextMenu = __nested_webpack_exports__.noContextMenu;\n/******/ var __webpack_exports__normalizeUnicode = __nested_webpack_exports__.normalizeUnicode;\n/******/ var __webpack_exports__renderTextLayer = __nested_webpack_exports__.renderTextLayer;\n/******/ var __webpack_exports__setLayerDimensions = __nested_webpack_exports__.setLayerDimensions;\n/******/ var __webpack_exports__shadow = __nested_webpack_exports__.shadow;\n/******/ var __webpack_exports__updateTextLayer = __nested_webpack_exports__.updateTextLayer;\n/******/ var __webpack_exports__version = __nested_webpack_exports__.version;\n/******/  /******/  //# sourceMappingURL=pdf.mjs.map\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pdfjs-dist/build/pdf.mjs\n");

/***/ })

};
;